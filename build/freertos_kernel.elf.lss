
./build/freertos_kernel.elf:     file format elf32-littlearm


Disassembly of section .text:

08000194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <SystemInit+0x20>)
 800019a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800019e:	4a05      	ldr	r2, [pc, #20]	; (80001b4 <SystemInit+0x20>)
 80001a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001a8:	bf00      	nop
 80001aa:	46bd      	mov	sp, r7
 80001ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	e000ed00 	.word	0xe000ed00

080001b8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b087      	sub	sp, #28
 80001bc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80001be:	2300      	movs	r3, #0
 80001c0:	613b      	str	r3, [r7, #16]
 80001c2:	2300      	movs	r3, #0
 80001c4:	617b      	str	r3, [r7, #20]
 80001c6:	2302      	movs	r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
 80001ca:	2300      	movs	r3, #0
 80001cc:	60bb      	str	r3, [r7, #8]
 80001ce:	2302      	movs	r3, #2
 80001d0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	f003 030c 	and.w	r3, r3, #12
 80001da:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	2b08      	cmp	r3, #8
 80001e0:	d011      	beq.n	8000206 <SystemCoreClockUpdate+0x4e>
 80001e2:	693b      	ldr	r3, [r7, #16]
 80001e4:	2b08      	cmp	r3, #8
 80001e6:	d844      	bhi.n	8000272 <SystemCoreClockUpdate+0xba>
 80001e8:	693b      	ldr	r3, [r7, #16]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d003      	beq.n	80001f6 <SystemCoreClockUpdate+0x3e>
 80001ee:	693b      	ldr	r3, [r7, #16]
 80001f0:	2b04      	cmp	r3, #4
 80001f2:	d004      	beq.n	80001fe <SystemCoreClockUpdate+0x46>
 80001f4:	e03d      	b.n	8000272 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80001f6:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 80001f8:	4a2c      	ldr	r2, [pc, #176]	; (80002ac <SystemCoreClockUpdate+0xf4>)
 80001fa:	601a      	str	r2, [r3, #0]
      break;
 80001fc:	e03d      	b.n	800027a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80001fe:	4b2a      	ldr	r3, [pc, #168]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 8000200:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <SystemCoreClockUpdate+0xf8>)
 8000202:	601a      	str	r2, [r3, #0]
      break;
 8000204:	e039      	b.n	800027a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000206:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	0d9b      	lsrs	r3, r3, #22
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000212:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800021a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d00c      	beq.n	800023c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000222:	4a23      	ldr	r2, [pc, #140]	; (80002b0 <SystemCoreClockUpdate+0xf8>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	fbb2 f3f3 	udiv	r3, r2, r3
 800022a:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 800022c:	6852      	ldr	r2, [r2, #4]
 800022e:	0992      	lsrs	r2, r2, #6
 8000230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000234:	fb02 f303 	mul.w	r3, r2, r3
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e00b      	b.n	8000254 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <SystemCoreClockUpdate+0xf4>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	fbb2 f3f3 	udiv	r3, r2, r3
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000246:	6852      	ldr	r2, [r2, #4]
 8000248:	0992      	lsrs	r2, r2, #6
 800024a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800024e:	fb02 f303 	mul.w	r3, r2, r3
 8000252:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	0c1b      	lsrs	r3, r3, #16
 800025a:	f003 0303 	and.w	r3, r3, #3
 800025e:	3301      	adds	r3, #1
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000264:	697a      	ldr	r2, [r7, #20]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	fbb2 f3f3 	udiv	r3, r2, r3
 800026c:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 800026e:	6013      	str	r3, [r2, #0]
      break;
 8000270:	e003      	b.n	800027a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000272:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	091b      	lsrs	r3, r3, #4
 8000280:	f003 030f 	and.w	r3, r3, #15
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <SystemCoreClockUpdate+0xfc>)
 8000286:	5cd3      	ldrb	r3, [r2, r3]
 8000288:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	fa22 f303 	lsr.w	r3, r2, r3
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	371c      	adds	r7, #28
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40023800 	.word	0x40023800
 80002a8:	20000000 	.word	0x20000000
 80002ac:	00f42400 	.word	0x00f42400
 80002b0:	017d7840 	.word	0x017d7840
 80002b4:	08006fbc 	.word	0x08006fbc

080002b8 <dev_get_irq_cpu_handle>:




type_device_cpu_irq_handle * dev_get_irq_cpu_handle(uint32_t irq_idx)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    if(irq_idx < NO_OF_TOTAL_INTERRUPTS )
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b06      	cmp	r3, #6
 80002c4:	d80a      	bhi.n	80002dc <dev_get_irq_cpu_handle+0x24>
    {
        /* Reset the interrupt counters upon handle call / init */
        cache_device_cpu_irq_handle[irq_idx].hw_irq_counter = 0;
 80002c6:	4a09      	ldr	r2, [pc, #36]	; (80002ec <dev_get_irq_cpu_handle+0x34>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	4413      	add	r3, r2
 80002ce:	2200      	movs	r2, #0
 80002d0:	605a      	str	r2, [r3, #4]

        return &cache_device_cpu_irq_handle[irq_idx];
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	00db      	lsls	r3, r3, #3
 80002d6:	4a05      	ldr	r2, [pc, #20]	; (80002ec <dev_get_irq_cpu_handle+0x34>)
 80002d8:	4413      	add	r3, r2
 80002da:	e000      	b.n	80002de <dev_get_irq_cpu_handle+0x26>
    }
    else
    {
        return NULL;
 80002dc:	2300      	movs	r3, #0
    }
}
 80002de:	4618      	mov	r0, r3
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000078 	.word	0x20000078

080002f0 <RTC_WKUP_IRQHandler>:


void RTC_WKUP_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[0].irq_handler != NULL)
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <RTC_WKUP_IRQHandler+0x24>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d008      	beq.n	800030e <RTC_WKUP_IRQHandler+0x1e>
    {
        (*cache_device_cpu_irq_handle[0].irq_handler)(NULL);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <RTC_WKUP_IRQHandler+0x24>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2000      	movs	r0, #0
 8000302:	4798      	blx	r3
        cache_device_cpu_irq_handle[0].hw_irq_counter++;
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <RTC_WKUP_IRQHandler+0x24>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	3301      	adds	r3, #1
 800030a:	4a02      	ldr	r2, [pc, #8]	; (8000314 <RTC_WKUP_IRQHandler+0x24>)
 800030c:	6053      	str	r3, [r2, #4]
    }
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000078 	.word	0x20000078

08000318 <RCC_IRQHandler>:

void RCC_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[1].irq_handler != NULL)
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <RCC_IRQHandler+0x24>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d008      	beq.n	8000336 <RCC_IRQHandler+0x1e>
    {
        (*cache_device_cpu_irq_handle[1].irq_handler)(NULL);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <RCC_IRQHandler+0x24>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	2000      	movs	r0, #0
 800032a:	4798      	blx	r3
        cache_device_cpu_irq_handle[1].hw_irq_counter++;
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <RCC_IRQHandler+0x24>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	3301      	adds	r3, #1
 8000332:	4a02      	ldr	r2, [pc, #8]	; (800033c <RCC_IRQHandler+0x24>)
 8000334:	60d3      	str	r3, [r2, #12]
    }
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000078 	.word	0x20000078

08000340 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[2].irq_handler != NULL)
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <TIM2_IRQHandler+0x24>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d008      	beq.n	800035e <TIM2_IRQHandler+0x1e>
    {
        (*cache_device_cpu_irq_handle[2].irq_handler)(NULL);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <TIM2_IRQHandler+0x24>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	2000      	movs	r0, #0
 8000352:	4798      	blx	r3
        cache_device_cpu_irq_handle[2].hw_irq_counter++;
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <TIM2_IRQHandler+0x24>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	3301      	adds	r3, #1
 800035a:	4a02      	ldr	r2, [pc, #8]	; (8000364 <TIM2_IRQHandler+0x24>)
 800035c:	6153      	str	r3, [r2, #20]
    }
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000078 	.word	0x20000078

08000368 <HardFault_Handler>:
// {
//     int a = 10;
// }

void HardFault_Handler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[3].irq_handler != NULL)
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <HardFault_Handler+0x24>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d008      	beq.n	8000386 <HardFault_Handler+0x1e>
    {
        (*cache_device_cpu_irq_handle[3].irq_handler)(NULL);
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <HardFault_Handler+0x24>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	2000      	movs	r0, #0
 800037a:	4798      	blx	r3
        cache_device_cpu_irq_handle[3].hw_irq_counter++;
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <HardFault_Handler+0x24>)
 800037e:	69db      	ldr	r3, [r3, #28]
 8000380:	3301      	adds	r3, #1
 8000382:	4a02      	ldr	r2, [pc, #8]	; (800038c <HardFault_Handler+0x24>)
 8000384:	61d3      	str	r3, [r2, #28]
    }
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000078 	.word	0x20000078

08000390 <MemManage_Handler>:

void MemManage_Handler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[4].irq_handler != NULL)
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <MemManage_Handler+0x24>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d008      	beq.n	80003ae <MemManage_Handler+0x1e>
    {
        (*cache_device_cpu_irq_handle[4].irq_handler)(NULL);
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <MemManage_Handler+0x24>)
 800039e:	6a1b      	ldr	r3, [r3, #32]
 80003a0:	2000      	movs	r0, #0
 80003a2:	4798      	blx	r3
        cache_device_cpu_irq_handle[4].hw_irq_counter++;
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <MemManage_Handler+0x24>)
 80003a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a8:	3301      	adds	r3, #1
 80003aa:	4a02      	ldr	r2, [pc, #8]	; (80003b4 <MemManage_Handler+0x24>)
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24
    }
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000078 	.word	0x20000078

080003b8 <BusFault_Handler>:

void BusFault_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[5].irq_handler != NULL)
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <BusFault_Handler+0x24>)
 80003be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d008      	beq.n	80003d6 <BusFault_Handler+0x1e>
    {
        (*cache_device_cpu_irq_handle[5].irq_handler)(NULL);
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <BusFault_Handler+0x24>)
 80003c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c8:	2000      	movs	r0, #0
 80003ca:	4798      	blx	r3
        cache_device_cpu_irq_handle[5].hw_irq_counter++;
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <BusFault_Handler+0x24>)
 80003ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a02      	ldr	r2, [pc, #8]	; (80003dc <BusFault_Handler+0x24>)
 80003d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000078 	.word	0x20000078

080003e0 <UsageFault_Handler>:

void UsageFault_Handler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[6].irq_handler != NULL)
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <UsageFault_Handler+0x24>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d008      	beq.n	80003fe <UsageFault_Handler+0x1e>
    {
        (*cache_device_cpu_irq_handle[6].irq_handler)(NULL);
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <UsageFault_Handler+0x24>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	2000      	movs	r0, #0
 80003f2:	4798      	blx	r3
        cache_device_cpu_irq_handle[6].hw_irq_counter++;
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <UsageFault_Handler+0x24>)
 80003f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003f8:	3301      	adds	r3, #1
 80003fa:	4a02      	ldr	r2, [pc, #8]	; (8000404 <UsageFault_Handler+0x24>)
 80003fc:	6353      	str	r3, [r2, #52]	; 0x34
    }
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000078 	.word	0x20000078

08000408 <register_hw_cb>:




type_irq_desc * register_hw_cb(uint32_t interrupt_id, const irq_handler_t irq_handle_reg, uint32_t irq_idx)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
    /* Get the indexed hardware handles */
    type_device_cpu_irq_handle* dev_irq_handle = dev_get_irq_cpu_handle(irq_idx);
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f7ff ff4f 	bl	80002b8 <dev_get_irq_cpu_handle>
 800041a:	6178      	str	r0, [r7, #20]

    if( (dev_irq_handle != NULL)    && \
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d05c      	beq.n	80004dc <register_hw_cb+0xd4>
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	2b05      	cmp	r3, #5
 8000426:	d859      	bhi.n	80004dc <register_hw_cb+0xd4>
        (interrupt_id < MAX_IRQ_SERV)   \
      )
    {
        /* Assign IRQ ID This is for dynamic time allocation */
        cache_irq_desc[interrupt_id].irq_id                 = interrupt_id;
 8000428:	68f9      	ldr	r1, [r7, #12]
 800042a:	482f      	ldr	r0, [pc, #188]	; (80004e8 <register_hw_cb+0xe0>)
 800042c:	68fa      	ldr	r2, [r7, #12]
 800042e:	4613      	mov	r3, r2
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	4413      	add	r3, r2
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	4403      	add	r3, r0
 8000438:	6019      	str	r1, [r3, #0]

        /* Registering callback device_interrupt */
        dev_irq_handle->irq_handler                         = irq_handle_reg;
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	68ba      	ldr	r2, [r7, #8]
 800043e:	601a      	str	r2, [r3, #0]
        cache_irq_desc[interrupt_id].irq_handle             = irq_handle_reg;
 8000440:	4929      	ldr	r1, [pc, #164]	; (80004e8 <register_hw_cb+0xe0>)
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	4613      	mov	r3, r2
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	4413      	add	r3, r2
 800044a:	011b      	lsls	r3, r3, #4
 800044c:	440b      	add	r3, r1
 800044e:	331c      	adds	r3, #28
 8000450:	68ba      	ldr	r2, [r7, #8]
 8000452:	601a      	str	r2, [r3, #0]
        
        /* Clearing all variables */
        cache_irq_desc[interrupt_id].error_counter          = 0;
 8000454:	4924      	ldr	r1, [pc, #144]	; (80004e8 <register_hw_cb+0xe0>)
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	011b      	lsls	r3, r3, #4
 8000460:	440b      	add	r3, r1
 8000462:	3324      	adds	r3, #36	; 0x24
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
        cache_irq_desc[interrupt_id].error_status           = 0;
 8000468:	491f      	ldr	r1, [pc, #124]	; (80004e8 <register_hw_cb+0xe0>)
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	4613      	mov	r3, r2
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4413      	add	r3, r2
 8000472:	011b      	lsls	r3, r3, #4
 8000474:	440b      	add	r3, r1
 8000476:	3320      	adds	r3, #32
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
        cache_irq_desc[interrupt_id].event_generated        = 0;
 800047c:	491a      	ldr	r1, [pc, #104]	; (80004e8 <register_hw_cb+0xe0>)
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	4613      	mov	r3, r2
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	4413      	add	r3, r2
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	440b      	add	r3, r1
 800048a:	332c      	adds	r3, #44	; 0x2c
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
        cache_irq_desc[interrupt_id].handled_ts             = 0;
 8000490:	4915      	ldr	r1, [pc, #84]	; (80004e8 <register_hw_cb+0xe0>)
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	4613      	mov	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	011b      	lsls	r3, r3, #4
 800049c:	440b      	add	r3, r1
 800049e:	3328      	adds	r3, #40	; 0x28
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
        cache_irq_desc[interrupt_id].irq_stat.counter       = 0;
 80004a4:	4910      	ldr	r1, [pc, #64]	; (80004e8 <register_hw_cb+0xe0>)
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	4613      	mov	r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4413      	add	r3, r2
 80004ae:	011b      	lsls	r3, r3, #4
 80004b0:	440b      	add	r3, r1
 80004b2:	3304      	adds	r3, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
        cache_irq_desc[interrupt_id].irq_stat.service_ts    = 0;
 80004b8:	490b      	ldr	r1, [pc, #44]	; (80004e8 <register_hw_cb+0xe0>)
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	4613      	mov	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	4413      	add	r3, r2
 80004c2:	011b      	lsls	r3, r3, #4
 80004c4:	440b      	add	r3, r1
 80004c6:	3308      	adds	r3, #8
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]

        return &cache_irq_desc[interrupt_id];
 80004cc:	68fa      	ldr	r2, [r7, #12]
 80004ce:	4613      	mov	r3, r2
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	4413      	add	r3, r2
 80004d4:	011b      	lsls	r3, r3, #4
 80004d6:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <register_hw_cb+0xe0>)
 80004d8:	4413      	add	r3, r2
 80004da:	e000      	b.n	80004de <register_hw_cb+0xd6>
    }
    else
    {
        return NULL;
 80004dc:	2300      	movs	r3, #0
    }
 80004de:	4618      	mov	r0, r3
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000098 	.word	0x20000098

080004ec <theread_create>:
                                type_thread_struct * thread_handle,
                                uint32_t stack_depth_bytes,
                                uint32_t priority,
                                const char * const task_info_str,
                                void       * parameters)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
        BaseType_t  returned =  xTaskCreate( thread_function,
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	3304      	adds	r3, #4
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	6a39      	ldr	r1, [r7, #32]
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f001 fdc6 	bl	800209c <xTaskCreate>
 8000510:	6178      	str	r0, [r7, #20]
                                task_info_str,
                                stack_depth_bytes,
                                parameters,
                                (UBaseType_t)priority,
                                &(thread_handle->thread_handle) );
        if( returned == pdPASS)
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d109      	bne.n	800052c <theread_create+0x40>
        {
            thread_handle->thread_id            = thread_counter++;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <theread_create+0x4c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	4906      	ldr	r1, [pc, #24]	; (8000538 <theread_create+0x4c>)
 8000520:	600a      	str	r2, [r1, #0]
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	6013      	str	r3, [r2, #0]
            return thread_counter;
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <theread_create+0x4c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	e001      	b.n	8000530 <theread_create+0x44>
        }
        else
        {
            return THEREAD_CREATE_FAILED;
 800052c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }  
}
 8000530:	4618      	mov	r0, r3
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000004 	.word	0x20000004

0800053c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f103 0208 	add.w	r2, r3, #8
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000554:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f103 0208 	add.w	r2, r3, #8
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f103 0208 	add.w	r2, r3, #8
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000596:	b480      	push	{r7}
 8000598:	b085      	sub	sp, #20
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	689a      	ldr	r2, [r3, #8]
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005de:	b480      	push	{r7}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005f4:	d103      	bne.n	80005fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e00c      	b.n	8000618 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3308      	adds	r3, #8
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	e002      	b.n	800060c <vListInsert+0x2e>
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	429a      	cmp	r2, r3
 8000616:	d2f6      	bcs.n	8000606 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	1c5a      	adds	r2, r3, #1
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	691b      	ldr	r3, [r3, #16]
 800065c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	6892      	ldr	r2, [r2, #8]
 8000666:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	6852      	ldr	r2, [r2, #4]
 8000670:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	429a      	cmp	r2, r3
 800067a:	d103      	bne.n	8000684 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	1e5a      	subs	r2, r3, #1
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10a      	bne.n	80006d2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80006bc:	f04f 0310 	mov.w	r3, #16
 80006c0:	f383 8811 	msr	BASEPRI, r3
 80006c4:	f3bf 8f6f 	isb	sy
 80006c8:	f3bf 8f4f 	dsb	sy
 80006cc:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006ce:	bf00      	nop
 80006d0:	e7fe      	b.n	80006d0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d05d      	beq.n	8000794 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d059      	beq.n	8000794 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006e8:	2100      	movs	r1, #0
 80006ea:	fba3 2302 	umull	r2, r3, r3, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d000      	beq.n	80006f4 <xQueueGenericReset+0x50>
 80006f2:	2101      	movs	r1, #1
 80006f4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d14c      	bne.n	8000794 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80006fa:	f005 fda9 	bl	8006250 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000706:	6939      	ldr	r1, [r7, #16]
 8000708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	441a      	add	r2, r3
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	2200      	movs	r2, #0
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800072a:	3b01      	subs	r3, #1
 800072c:	6939      	ldr	r1, [r7, #16]
 800072e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000730:	fb01 f303 	mul.w	r3, r1, r3
 8000734:	441a      	add	r2, r3
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	22ff      	movs	r2, #255	; 0xff
 800073e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d114      	bne.n	800077a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d01a      	beq.n	800078e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f003 f923 	bl	80039a8 <xTaskRemoveFromEventList>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <xQueueGenericReset+0x11c>)
 800076a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	f3bf 8f6f 	isb	sy
 8000778:	e009      	b.n	800078e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	3310      	adds	r3, #16
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fedc 	bl	800053c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	3324      	adds	r3, #36	; 0x24
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fed7 	bl	800053c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800078e:	f005 fd8f 	bl	80062b0 <vPortExitCritical>
 8000792:	e001      	b.n	8000798 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10a      	bne.n	80007b4 <xQueueGenericReset+0x110>
    __asm volatile
 800079e:	f04f 0310 	mov.w	r3, #16
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	60bb      	str	r3, [r7, #8]
}
 80007b0:	bf00      	nop
 80007b2:	e7fe      	b.n	80007b2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80007b4:	697b      	ldr	r3, [r7, #20]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	e000ed04 	.word	0xe000ed04

080007c4 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10a      	bne.n	80007f2 <xQueueGenericCreateStatic+0x2e>
    __asm volatile
 80007dc:	f04f 0310 	mov.w	r3, #16
 80007e0:	f383 8811 	msr	BASEPRI, r3
 80007e4:	f3bf 8f6f 	isb	sy
 80007e8:	f3bf 8f4f 	dsb	sy
 80007ec:	623b      	str	r3, [r7, #32]
}
 80007ee:	bf00      	nop
 80007f0:	e7fe      	b.n	80007f0 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d030      	beq.n	800085a <xQueueGenericCreateStatic+0x96>
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d02d      	beq.n	800085a <xQueueGenericCreateStatic+0x96>
            ( pxStaticQueue != NULL ) &&
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <xQueueGenericCreateStatic+0x46>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d027      	beq.n	800085a <xQueueGenericCreateStatic+0x96>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <xQueueGenericCreateStatic+0x52>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d121      	bne.n	800085a <xQueueGenericCreateStatic+0x96>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8000816:	2350      	movs	r3, #80	; 0x50
 8000818:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	2b50      	cmp	r3, #80	; 0x50
 800081e:	d00a      	beq.n	8000836 <xQueueGenericCreateStatic+0x72>
    __asm volatile
 8000820:	f04f 0310 	mov.w	r3, #16
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	61fb      	str	r3, [r7, #28]
}
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <xQueueGenericCreateStatic+0x70>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 8000836:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated either statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	2201      	movs	r2, #1
 8000840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000844:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4613      	mov	r3, r2
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	68b9      	ldr	r1, [r7, #8]
 8000852:	68f8      	ldr	r0, [r7, #12]
 8000854:	f000 f8a5 	bl	80009a2 <prvInitialiseNewQueue>
 8000858:	e00d      	b.n	8000876 <xQueueGenericCreateStatic+0xb2>
        }
        else
        {
            configASSERT( pxNewQueue );
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10a      	bne.n	8000876 <xQueueGenericCreateStatic+0xb2>
    __asm volatile
 8000860:	f04f 0310 	mov.w	r3, #16
 8000864:	f383 8811 	msr	BASEPRI, r3
 8000868:	f3bf 8f6f 	isb	sy
 800086c:	f3bf 8f4f 	dsb	sy
 8000870:	61bb      	str	r3, [r7, #24]
}
 8000872:	bf00      	nop
 8000874:	e7fe      	b.n	8000874 <xQueueGenericCreateStatic+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 8000876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000878:	4618      	mov	r0, r3
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <xQueueGenericGetStaticBuffers>:
#if ( configSUPPORT_STATIC_ALLOCATION == 1 )

    BaseType_t xQueueGenericGetStaticBuffers( QueueHandle_t xQueue,
                                              uint8_t ** ppucQueueStorage,
                                              StaticQueue_t ** ppxStaticQueue )
    {
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxQueue = xQueue;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	61bb      	str	r3, [r7, #24]

        traceENTER_xQueueGenericGetStaticBuffers( xQueue, ppucQueueStorage, ppxStaticQueue );

        configASSERT( pxQueue );
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10a      	bne.n	80008ac <xQueueGenericGetStaticBuffers+0x2c>
    __asm volatile
 8000896:	f04f 0310 	mov.w	r3, #16
 800089a:	f383 8811 	msr	BASEPRI, r3
 800089e:	f3bf 8f6f 	isb	sy
 80008a2:	f3bf 8f4f 	dsb	sy
 80008a6:	617b      	str	r3, [r7, #20]
}
 80008a8:	bf00      	nop
 80008aa:	e7fe      	b.n	80008aa <xQueueGenericGetStaticBuffers+0x2a>
        configASSERT( ppxStaticQueue );
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d10a      	bne.n	80008c8 <xQueueGenericGetStaticBuffers+0x48>
    __asm volatile
 80008b2:	f04f 0310 	mov.w	r3, #16
 80008b6:	f383 8811 	msr	BASEPRI, r3
 80008ba:	f3bf 8f6f 	isb	sy
 80008be:	f3bf 8f4f 	dsb	sy
 80008c2:	613b      	str	r3, [r7, #16]
}
 80008c4:	bf00      	nop
 80008c6:	e7fe      	b.n	80008c6 <xQueueGenericGetStaticBuffers+0x46>

        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
        {
            /* Check if the queue was statically allocated. */
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdTRUE )
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d10c      	bne.n	80008ec <xQueueGenericGetStaticBuffers+0x6c>
            {
                if( ppucQueueStorage != NULL )
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <xQueueGenericGetStaticBuffers+0x60>
                {
                    *ppucQueueStorage = ( uint8_t * ) pxQueue->pcHead;
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	601a      	str	r2, [r3, #0]
                }

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                *ppxStaticQueue = ( StaticQueue_t * ) pxQueue;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	601a      	str	r2, [r3, #0]
                xReturn = pdTRUE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
 80008ea:	e001      	b.n	80008f0 <xQueueGenericGetStaticBuffers+0x70>
            }
            else
            {
                xReturn = pdFALSE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_xQueueGenericGetStaticBuffers( xReturn );

        return xReturn;
 80008f0:	69fb      	ldr	r3, [r7, #28]
    }
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80008fe:	b580      	push	{r7, lr}
 8000900:	b08a      	sub	sp, #40	; 0x28
 8000902:	af02      	add	r7, sp, #8
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	4613      	mov	r3, r2
 800090a:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d032      	beq.n	800097c <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000916:	2100      	movs	r1, #0
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	fba3 2302 	umull	r2, r3, r3, r2
 8000920:	2b00      	cmp	r3, #0
 8000922:	d000      	beq.n	8000926 <xQueueGenericCreate+0x28>
 8000924:	2101      	movs	r1, #1
 8000926:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000928:	2b00      	cmp	r3, #0
 800092a:	d127      	bne.n	800097c <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( uxQueueLength * uxItemSize ) ) )
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000934:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000938:	d820      	bhi.n	800097c <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	fb02 f303 	mul.w	r3, r2, r3
 8000942:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	3350      	adds	r3, #80	; 0x50
 8000948:	4618      	mov	r0, r3
 800094a:	f005 fd9d 	bl	8006488 <pvPortMalloc>
 800094e:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d020      	beq.n	8000998 <xQueueGenericCreate+0x9a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3350      	adds	r3, #80	; 0x50
 800095e:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	4613      	mov	r3, r2
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	68b9      	ldr	r1, [r7, #8]
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f814 	bl	80009a2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800097a:	e00d      	b.n	8000998 <xQueueGenericCreate+0x9a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10a      	bne.n	8000998 <xQueueGenericCreate+0x9a>
    __asm volatile
 8000982:	f04f 0310 	mov.w	r3, #16
 8000986:	f383 8811 	msr	BASEPRI, r3
 800098a:	f3bf 8f6f 	isb	sy
 800098e:	f3bf 8f4f 	dsb	sy
 8000992:	613b      	str	r3, [r7, #16]
}
 8000994:	bf00      	nop
 8000996:	e7fe      	b.n	8000996 <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000998:	69fb      	ldr	r3, [r7, #28]
    }
 800099a:	4618      	mov	r0, r3
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	e002      	b.n	80009c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80009d0:	2101      	movs	r1, #1
 80009d2:	69b8      	ldr	r0, [r7, #24]
 80009d4:	f7ff fe66 	bl	80006a4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	78fa      	ldrb	r2, [r7, #3]
 80009dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00e      	beq.n	8000a14 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f94b 	bl	8000caa <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8000a26:	2301      	movs	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	461a      	mov	r2, r3
 8000a32:	6939      	ldr	r1, [r7, #16]
 8000a34:	6978      	ldr	r0, [r7, #20]
 8000a36:	f7ff ff62 	bl	80008fe <xQueueGenericCreate>
 8000a3a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f7ff ffd3 	bl	80009e8 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8000a42:	68fb      	ldr	r3, [r7, #12]
    }
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	2200      	movs	r2, #0
 8000a68:	6939      	ldr	r1, [r7, #16]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff feaa 	bl	80007c4 <xQueueGenericCreateStatic>
 8000a70:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f7ff ffb8 	bl	80009e8 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutexStatic( xNewQueue );

        return xNewQueue;
 8000a78:	68fb      	ldr	r3, [r7, #12]
    }
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

    TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
    {
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
        TaskHandle_t pxReturn;
        Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGetMutexHolder( xSemaphore );

        configASSERT( xSemaphore );
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10a      	bne.n	8000aaa <xQueueGetMutexHolder+0x28>
    __asm volatile
 8000a94:	f04f 0310 	mov.w	r3, #16
 8000a98:	f383 8811 	msr	BASEPRI, r3
 8000a9c:	f3bf 8f6f 	isb	sy
 8000aa0:	f3bf 8f4f 	dsb	sy
 8000aa4:	60fb      	str	r3, [r7, #12]
}
 8000aa6:	bf00      	nop
 8000aa8:	e7fe      	b.n	8000aa8 <xQueueGetMutexHolder+0x26>
        /* This function is called by xSemaphoreGetMutexHolder(), and should not
         * be called directly.  Note:  This is a good way of determining if the
         * calling task is the mutex holder, but not a good way of determining the
         * identity of the mutex holder, as the holder may change between the
         * following critical section exiting and the function returning. */
        taskENTER_CRITICAL();
 8000aaa:	f005 fbd1 	bl	8006250 <vPortEnterCritical>
        {
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d103      	bne.n	8000abe <xQueueGetMutexHolder+0x3c>
            {
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e001      	b.n	8000ac2 <xQueueGetMutexHolder+0x40>
            }
            else
            {
                pxReturn = NULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8000ac2:	f005 fbf5 	bl	80062b0 <vPortExitCritical>

        traceRETURN_xQueueGetMutexHolder( pxReturn );

        return pxReturn;
 8000ac6:	697b      	ldr	r3, [r7, #20]
    }
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <xQueueGetMutexHolderFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

    TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
    {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
        TaskHandle_t pxReturn;

        traceENTER_xQueueGetMutexHolderFromISR( xSemaphore );

        configASSERT( xSemaphore );
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10a      	bne.n	8000af4 <xQueueGetMutexHolderFromISR+0x24>
    __asm volatile
 8000ade:	f04f 0310 	mov.w	r3, #16
 8000ae2:	f383 8811 	msr	BASEPRI, r3
 8000ae6:	f3bf 8f6f 	isb	sy
 8000aea:	f3bf 8f4f 	dsb	sy
 8000aee:	60bb      	str	r3, [r7, #8]
}
 8000af0:	bf00      	nop
 8000af2:	e7fe      	b.n	8000af2 <xQueueGetMutexHolderFromISR+0x22>

        /* Mutexes cannot be used in interrupt service routines, so the mutex
         * holder should not change in an ISR, and therefore a critical section is
         * not required here. */
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d103      	bne.n	8000b04 <xQueueGetMutexHolderFromISR+0x34>
        {
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e001      	b.n	8000b08 <xQueueGetMutexHolderFromISR+0x38>
        }
        else
        {
            pxReturn = NULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
        }

        traceRETURN_xQueueGetMutexHolderFromISR( pxReturn );

        return pxReturn;
 8000b08:	68fb      	ldr	r3, [r7, #12]
    }
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 8000b16:	b590      	push	{r4, r7, lr}
 8000b18:	b087      	sub	sp, #28
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10a      	bne.n	8000b3e <xQueueGiveMutexRecursive+0x28>
    __asm volatile
 8000b28:	f04f 0310 	mov.w	r3, #16
 8000b2c:	f383 8811 	msr	BASEPRI, r3
 8000b30:	f3bf 8f6f 	isb	sy
 8000b34:	f3bf 8f4f 	dsb	sy
 8000b38:	60fb      	str	r3, [r7, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	e7fe      	b.n	8000b3c <xQueueGiveMutexRecursive+0x26>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	689c      	ldr	r4, [r3, #8]
 8000b42:	f003 fb89 	bl	8004258 <xTaskGetCurrentTaskHandle>
 8000b46:	4603      	mov	r3, r0
 8000b48:	429c      	cmp	r4, r3
 8000b4a:	d111      	bne.n	8000b70 <xQueueGiveMutexRecursive+0x5a>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	1e5a      	subs	r2, r3, #1
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d105      	bne.n	8000b6a <xQueueGiveMutexRecursive+0x54>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	6938      	ldr	r0, [r7, #16]
 8000b66:	f000 f8a0 	bl	8000caa <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e001      	b.n	8000b74 <xQueueGiveMutexRecursive+0x5e>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 8000b74:	697b      	ldr	r3, [r7, #20]
    }
 8000b76:	4618      	mov	r0, r3
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd90      	pop	{r4, r7, pc}

08000b7e <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 8000b7e:	b590      	push	{r4, r7, lr}
 8000b80:	b087      	sub	sp, #28
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10a      	bne.n	8000ba8 <xQueueTakeMutexRecursive+0x2a>
    __asm volatile
 8000b92:	f04f 0310 	mov.w	r3, #16
 8000b96:	f383 8811 	msr	BASEPRI, r3
 8000b9a:	f3bf 8f6f 	isb	sy
 8000b9e:	f3bf 8f4f 	dsb	sy
 8000ba2:	60fb      	str	r3, [r7, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	e7fe      	b.n	8000ba6 <xQueueTakeMutexRecursive+0x28>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	689c      	ldr	r4, [r3, #8]
 8000bac:	f003 fb54 	bl	8004258 <xTaskGetCurrentTaskHandle>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	d107      	bne.n	8000bc6 <xQueueTakeMutexRecursive+0x48>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00c      	b.n	8000be0 <xQueueTakeMutexRecursive+0x62>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	6938      	ldr	r0, [r7, #16]
 8000bca:	f000 fba3 	bl	8001314 <xQueueSemaphoreTake>
 8000bce:	6178      	str	r0, [r7, #20]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <xQueueTakeMutexRecursive+0x62>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 8000be0:	697b      	ldr	r3, [r7, #20]
    }
 8000be2:	4618      	mov	r0, r3
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}

08000bea <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b088      	sub	sp, #32
 8000bee:	af02      	add	r7, sp, #8
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]

        traceENTER_xQueueCreateCountingSemaphoreStatic( uxMaxCount, uxInitialCount, pxStaticQueue );

        if( ( uxMaxCount != 0U ) &&
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d013      	beq.n	8000c28 <xQueueCreateCountingSemaphoreStatic+0x3e>
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d80f      	bhi.n	8000c28 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000c08:	2302      	movs	r3, #2
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f7ff fdd6 	bl	80007c4 <xQueueGenericCreateStatic>
 8000c18:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d011      	beq.n	8000c44 <xQueueCreateCountingSemaphoreStatic+0x5a>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8000c26:	e00d      	b.n	8000c44 <xQueueCreateCountingSemaphoreStatic+0x5a>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10a      	bne.n	8000c44 <xQueueCreateCountingSemaphoreStatic+0x5a>
    __asm volatile
 8000c2e:	f04f 0310 	mov.w	r3, #16
 8000c32:	f383 8811 	msr	BASEPRI, r3
 8000c36:	f3bf 8f6f 	isb	sy
 8000c3a:	f3bf 8f4f 	dsb	sy
 8000c3e:	613b      	str	r3, [r7, #16]
}
 8000c40:	bf00      	nop
 8000c42:	e7fe      	b.n	8000c42 <xQueueCreateCountingSemaphoreStatic+0x58>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphoreStatic( xHandle );

        return xHandle;
 8000c44:	697b      	ldr	r3, [r7, #20]
    }
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d010      	beq.n	8000c84 <xQueueCreateCountingSemaphore+0x36>
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d80c      	bhi.n	8000c84 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fe45 	bl	80008fe <xQueueGenericCreate>
 8000c74:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d011      	beq.n	8000ca0 <xQueueCreateCountingSemaphore+0x52>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8000c82:	e00d      	b.n	8000ca0 <xQueueCreateCountingSemaphore+0x52>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10a      	bne.n	8000ca0 <xQueueCreateCountingSemaphore+0x52>
    __asm volatile
 8000c8a:	f04f 0310 	mov.w	r3, #16
 8000c8e:	f383 8811 	msr	BASEPRI, r3
 8000c92:	f3bf 8f6f 	isb	sy
 8000c96:	f3bf 8f4f 	dsb	sy
 8000c9a:	60bb      	str	r3, [r7, #8]
}
 8000c9c:	bf00      	nop
 8000c9e:	e7fe      	b.n	8000c9e <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    }
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b08e      	sub	sp, #56	; 0x38
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8000cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10a      	bne.n	8000cdc <xQueueGenericSend+0x32>
    __asm volatile
 8000cc6:	f04f 0310 	mov.w	r3, #16
 8000cca:	f383 8811 	msr	BASEPRI, r3
 8000cce:	f3bf 8f6f 	isb	sy
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000cd8:	bf00      	nop
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d103      	bne.n	8000cea <xQueueGenericSend+0x40>
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <xQueueGenericSend+0x44>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <xQueueGenericSend+0x46>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10a      	bne.n	8000d0a <xQueueGenericSend+0x60>
    __asm volatile
 8000cf4:	f04f 0310 	mov.w	r3, #16
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000d06:	bf00      	nop
 8000d08:	e7fe      	b.n	8000d08 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d103      	bne.n	8000d18 <xQueueGenericSend+0x6e>
 8000d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d101      	bne.n	8000d1c <xQueueGenericSend+0x72>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <xQueueGenericSend+0x74>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <xQueueGenericSend+0x8e>
    __asm volatile
 8000d22:	f04f 0310 	mov.w	r3, #16
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	623b      	str	r3, [r7, #32]
}
 8000d34:	bf00      	nop
 8000d36:	e7fe      	b.n	8000d36 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d38:	f003 fab6 	bl	80042a8 <xTaskGetSchedulerState>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <xQueueGenericSend+0x9e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <xQueueGenericSend+0xa2>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <xQueueGenericSend+0xa4>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10a      	bne.n	8000d68 <xQueueGenericSend+0xbe>
    __asm volatile
 8000d52:	f04f 0310 	mov.w	r3, #16
 8000d56:	f383 8811 	msr	BASEPRI, r3
 8000d5a:	f3bf 8f6f 	isb	sy
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	61fb      	str	r3, [r7, #28]
}
 8000d64:	bf00      	nop
 8000d66:	e7fe      	b.n	8000d66 <xQueueGenericSend+0xbc>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d68:	f005 fa72 	bl	8006250 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d302      	bcc.n	8000d7e <xQueueGenericSend+0xd4>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d129      	bne.n	8000dd2 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d84:	f000 fe7f 	bl	8001a86 <prvCopyDataToQueue>
 8000d88:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d010      	beq.n	8000db4 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d94:	3324      	adds	r3, #36	; 0x24
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fe06 	bl	80039a8 <xTaskRemoveFromEventList>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d013      	beq.n	8000dca <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000da2:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <xQueueGenericSend+0x1fa>)
 8000da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	f3bf 8f4f 	dsb	sy
 8000dae:	f3bf 8f6f 	isb	sy
 8000db2:	e00a      	b.n	8000dca <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d007      	beq.n	8000dca <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <xQueueGenericSend+0x1fa>)
 8000dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	f3bf 8f4f 	dsb	sy
 8000dc6:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000dca:	f005 fa71 	bl	80062b0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e063      	b.n	8000e9a <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000dd8:	f005 fa6a 	bl	80062b0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e05c      	b.n	8000e9a <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d106      	bne.n	8000df4 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 ffa0 	bl	8003d30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000df4:	f005 fa5c 	bl	80062b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000df8:	f002 f912 	bl	8003020 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dfc:	f005 fa28 	bl	8006250 <vPortEnterCritical>
 8000e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e0c:	d103      	bne.n	8000e16 <xQueueGenericSend+0x16c>
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e22:	d103      	bne.n	8000e2c <xQueueGenericSend+0x182>
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e2c:	f005 fa40 	bl	80062b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e30:	1d3a      	adds	r2, r7, #4
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 ff8f 	bl	8003d5c <xTaskCheckForTimeOut>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d124      	bne.n	8000e8e <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e46:	f000 ff3a 	bl	8001cbe <prvIsQueueFull>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d018      	beq.n	8000e82 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e52:	3310      	adds	r3, #16
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fce5 	bl	8003828 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e60:	f000 fea1 	bl	8001ba6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000e64:	f002 f8ea 	bl	800303c <xTaskResumeAll>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f47f af7c 	bne.w	8000d68 <xQueueGenericSend+0xbe>
                {
                    taskYIELD_WITHIN_API();
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <xQueueGenericSend+0x1fa>)
 8000e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	f3bf 8f4f 	dsb	sy
 8000e7c:	f3bf 8f6f 	isb	sy
 8000e80:	e772      	b.n	8000d68 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e84:	f000 fe8f 	bl	8001ba6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e88:	f002 f8d8 	bl	800303c <xTaskResumeAll>
 8000e8c:	e76c      	b.n	8000d68 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000e8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e90:	f000 fe89 	bl	8001ba6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e94:	f002 f8d2 	bl	800303c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000e98:	2300      	movs	r3, #0
        }
    }
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3738      	adds	r7, #56	; 0x38
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000ed04 	.word	0xe000ed04

08000ea8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b092      	sub	sp, #72	; 0x48
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	643b      	str	r3, [r7, #64]	; 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8000eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10a      	bne.n	8000ed6 <xQueueGenericSendFromISR+0x2e>
    __asm volatile
 8000ec0:	f04f 0310 	mov.w	r3, #16
 8000ec4:	f383 8811 	msr	BASEPRI, r3
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	f3bf 8f4f 	dsb	sy
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 8000ed2:	bf00      	nop
 8000ed4:	e7fe      	b.n	8000ed4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d103      	bne.n	8000ee4 <xQueueGenericSendFromISR+0x3c>
 8000edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <xQueueGenericSendFromISR+0x40>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <xQueueGenericSendFromISR+0x42>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10a      	bne.n	8000f04 <xQueueGenericSendFromISR+0x5c>
    __asm volatile
 8000eee:	f04f 0310 	mov.w	r3, #16
 8000ef2:	f383 8811 	msr	BASEPRI, r3
 8000ef6:	f3bf 8f6f 	isb	sy
 8000efa:	f3bf 8f4f 	dsb	sy
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000f00:	bf00      	nop
 8000f02:	e7fe      	b.n	8000f02 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d103      	bne.n	8000f12 <xQueueGenericSendFromISR+0x6a>
 8000f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <xQueueGenericSendFromISR+0x6e>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <xQueueGenericSendFromISR+0x70>
 8000f16:	2300      	movs	r3, #0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10a      	bne.n	8000f32 <xQueueGenericSendFromISR+0x8a>
    __asm volatile
 8000f1c:	f04f 0310 	mov.w	r3, #16
 8000f20:	f383 8811 	msr	BASEPRI, r3
 8000f24:	f3bf 8f6f 	isb	sy
 8000f28:	f3bf 8f4f 	dsb	sy
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000f2e:	bf00      	nop
 8000f30:	e7fe      	b.n	8000f30 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f32:	f005 fa6a 	bl	800640a <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000f36:	f3ef 8211 	mrs	r2, BASEPRI
 8000f3a:	f04f 0310 	mov.w	r3, #16
 8000f3e:	f383 8811 	msr	BASEPRI, r3
 8000f42:	f3bf 8f6f 	isb	sy
 8000f46:	f3bf 8f4f 	dsb	sy
 8000f4a:	623a      	str	r2, [r7, #32]
 8000f4c:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d302      	bcc.n	8000f64 <xQueueGenericSendFromISR+0xbc>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d146      	bne.n	8000ff2 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000f7a:	f000 fd84 	bl	8001a86 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000f7e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f86:	d112      	bne.n	8000fae <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d02d      	beq.n	8000fec <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f92:	3324      	adds	r3, #36	; 0x24
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 fd07 	bl	80039a8 <xTaskRemoveFromEventList>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d025      	beq.n	8000fec <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d022      	beq.n	8000fec <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e01e      	b.n	8000fec <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000fae:	f002 f96f 	bl	8003290 <uxTaskGetNumberOfTasks>
 8000fb2:	6338      	str	r0, [r7, #48]	; 0x30
 8000fb4:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d916      	bls.n	8000fec <xQueueGenericSendFromISR+0x144>
 8000fbe:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fc4:	d10a      	bne.n	8000fdc <xQueueGenericSendFromISR+0x134>
    __asm volatile
 8000fc6:	f04f 0310 	mov.w	r3, #16
 8000fca:	f383 8811 	msr	BASEPRI, r3
 8000fce:	f3bf 8f6f 	isb	sy
 8000fd2:	f3bf 8f4f 	dsb	sy
 8000fd6:	61bb      	str	r3, [r7, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	e7fe      	b.n	8000fda <xQueueGenericSendFromISR+0x132>
 8000fdc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	b25a      	sxtb	r2, r3
 8000fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000fec:	2301      	movs	r3, #1
 8000fee:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8000ff0:	e001      	b.n	8000ff6 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ff8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8001000:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8001002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001004:	4618      	mov	r0, r3
 8001006:	3748      	adds	r7, #72	; 0x48
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b090      	sub	sp, #64	; 0x40
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10a      	bne.n	8001036 <xQueueGiveFromISR+0x2a>
    __asm volatile
 8001020:	f04f 0310 	mov.w	r3, #16
 8001024:	f383 8811 	msr	BASEPRI, r3
 8001028:	f3bf 8f6f 	isb	sy
 800102c:	f3bf 8f4f 	dsb	sy
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001032:	bf00      	nop
 8001034:	e7fe      	b.n	8001034 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00a      	beq.n	8001054 <xQueueGiveFromISR+0x48>
    __asm volatile
 800103e:	f04f 0310 	mov.w	r3, #16
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	623b      	str	r3, [r7, #32]
}
 8001050:	bf00      	nop
 8001052:	e7fe      	b.n	8001052 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d103      	bne.n	8001064 <xQueueGiveFromISR+0x58>
 800105c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <xQueueGiveFromISR+0x5c>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <xQueueGiveFromISR+0x5e>
 8001068:	2300      	movs	r3, #0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10a      	bne.n	8001084 <xQueueGiveFromISR+0x78>
    __asm volatile
 800106e:	f04f 0310 	mov.w	r3, #16
 8001072:	f383 8811 	msr	BASEPRI, r3
 8001076:	f3bf 8f6f 	isb	sy
 800107a:	f3bf 8f4f 	dsb	sy
 800107e:	61fb      	str	r3, [r7, #28]
}
 8001080:	bf00      	nop
 8001082:	e7fe      	b.n	8001082 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001084:	f005 f9c1 	bl	800640a <vPortValidateInterruptPriority>
    __asm volatile
 8001088:	f3ef 8211 	mrs	r2, BASEPRI
 800108c:	f04f 0310 	mov.w	r3, #16
 8001090:	f383 8811 	msr	BASEPRI, r3
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	f3bf 8f4f 	dsb	sy
 800109c:	61ba      	str	r2, [r7, #24]
 800109e:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 80010a0:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80010aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d242      	bcs.n	800113a <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80010b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80010be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80010c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ce:	d112      	bne.n	80010f6 <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d02d      	beq.n	8001134 <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010da:	3324      	adds	r3, #36	; 0x24
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fc63 	bl	80039a8 <xTaskRemoveFromEventList>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d025      	beq.n	8001134 <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d022      	beq.n	8001134 <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e01e      	b.n	8001134 <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80010f6:	f002 f8cb 	bl	8003290 <uxTaskGetNumberOfTasks>
 80010fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80010fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001102:	429a      	cmp	r2, r3
 8001104:	d916      	bls.n	8001134 <xQueueGiveFromISR+0x128>
 8001106:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800110a:	2b7f      	cmp	r3, #127	; 0x7f
 800110c:	d10a      	bne.n	8001124 <xQueueGiveFromISR+0x118>
    __asm volatile
 800110e:	f04f 0310 	mov.w	r3, #16
 8001112:	f383 8811 	msr	BASEPRI, r3
 8001116:	f3bf 8f6f 	isb	sy
 800111a:	f3bf 8f4f 	dsb	sy
 800111e:	613b      	str	r3, [r7, #16]
}
 8001120:	bf00      	nop
 8001122:	e7fe      	b.n	8001122 <xQueueGiveFromISR+0x116>
 8001124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001128:	3301      	adds	r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	b25a      	sxtb	r2, r3
 800112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001134:	2301      	movs	r3, #1
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001138:	e001      	b.n	800113e <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800113a:	2300      	movs	r3, #0
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800113e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001140:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f383 8811 	msr	BASEPRI, r3
}
 8001148:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
 800114a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800114c:	4618      	mov	r0, r3
 800114e:	3740      	adds	r7, #64	; 0x40
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10a      	bne.n	8001184 <xQueueReceive+0x30>
    __asm volatile
 800116e:	f04f 0310 	mov.w	r3, #16
 8001172:	f383 8811 	msr	BASEPRI, r3
 8001176:	f3bf 8f6f 	isb	sy
 800117a:	f3bf 8f4f 	dsb	sy
 800117e:	623b      	str	r3, [r7, #32]
}
 8001180:	bf00      	nop
 8001182:	e7fe      	b.n	8001182 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d103      	bne.n	8001192 <xQueueReceive+0x3e>
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <xQueueReceive+0x42>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <xQueueReceive+0x44>
 8001196:	2300      	movs	r3, #0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10a      	bne.n	80011b2 <xQueueReceive+0x5e>
    __asm volatile
 800119c:	f04f 0310 	mov.w	r3, #16
 80011a0:	f383 8811 	msr	BASEPRI, r3
 80011a4:	f3bf 8f6f 	isb	sy
 80011a8:	f3bf 8f4f 	dsb	sy
 80011ac:	61fb      	str	r3, [r7, #28]
}
 80011ae:	bf00      	nop
 80011b0:	e7fe      	b.n	80011b0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80011b2:	f003 f879 	bl	80042a8 <xTaskGetSchedulerState>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <xQueueReceive+0x6e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <xQueueReceive+0x72>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <xQueueReceive+0x74>
 80011c6:	2300      	movs	r3, #0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10a      	bne.n	80011e2 <xQueueReceive+0x8e>
    __asm volatile
 80011cc:	f04f 0310 	mov.w	r3, #16
 80011d0:	f383 8811 	msr	BASEPRI, r3
 80011d4:	f3bf 8f6f 	isb	sy
 80011d8:	f3bf 8f4f 	dsb	sy
 80011dc:	61bb      	str	r3, [r7, #24]
}
 80011de:	bf00      	nop
 80011e0:	e7fe      	b.n	80011e0 <xQueueReceive+0x8c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80011e2:	f005 f835 	bl	8006250 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d01f      	beq.n	8001232 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011f6:	f000 fcb0 	bl	8001b5a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001200:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00f      	beq.n	800122a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	3310      	adds	r3, #16
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fbca 	bl	80039a8 <xTaskRemoveFromEventList>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800121a:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <xQueueReceive+0x1bc>)
 800121c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	f3bf 8f4f 	dsb	sy
 8001226:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800122a:	f005 f841 	bl	80062b0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 800122e:	2301      	movs	r3, #1
 8001230:	e069      	b.n	8001306 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d103      	bne.n	8001240 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001238:	f005 f83a 	bl	80062b0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800123c:	2300      	movs	r3, #0
 800123e:	e062      	b.n	8001306 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	2b00      	cmp	r3, #0
 8001244:	d106      	bne.n	8001254 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fd70 	bl	8003d30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001250:	2301      	movs	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001254:	f005 f82c 	bl	80062b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001258:	f001 fee2 	bl	8003020 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800125c:	f004 fff8 	bl	8006250 <vPortEnterCritical>
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001266:	b25b      	sxtb	r3, r3
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800126c:	d103      	bne.n	8001276 <xQueueReceive+0x122>
 800126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800127c:	b25b      	sxtb	r3, r3
 800127e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001282:	d103      	bne.n	800128c <xQueueReceive+0x138>
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800128c:	f005 f810 	bl	80062b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001290:	1d3a      	adds	r2, r7, #4
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fd5f 	bl	8003d5c <xTaskCheckForTimeOut>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d123      	bne.n	80012ec <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012a6:	f000 fcd0 	bl	8001c4a <prvIsQueueEmpty>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d017      	beq.n	80012e0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	3324      	adds	r3, #36	; 0x24
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fab5 	bl	8003828 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80012be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012c0:	f000 fc71 	bl	8001ba6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80012c4:	f001 feba 	bl	800303c <xTaskResumeAll>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d189      	bne.n	80011e2 <xQueueReceive+0x8e>
                {
                    taskYIELD_WITHIN_API();
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <xQueueReceive+0x1bc>)
 80012d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	f3bf 8f4f 	dsb	sy
 80012da:	f3bf 8f6f 	isb	sy
 80012de:	e780      	b.n	80011e2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80012e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012e2:	f000 fc60 	bl	8001ba6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80012e6:	f001 fea9 	bl	800303c <xTaskResumeAll>
 80012ea:	e77a      	b.n	80011e2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80012ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012ee:	f000 fc5a 	bl	8001ba6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80012f2:	f001 fea3 	bl	800303c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012f8:	f000 fca7 	bl	8001c4a <prvIsQueueEmpty>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f43f af6f 	beq.w	80011e2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8001304:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001306:	4618      	mov	r0, r3
 8001308:	3730      	adds	r7, #48	; 0x30
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000ed04 	.word	0xe000ed04

08001314 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10a      	bne.n	8001346 <xQueueSemaphoreTake+0x32>
    __asm volatile
 8001330:	f04f 0310 	mov.w	r3, #16
 8001334:	f383 8811 	msr	BASEPRI, r3
 8001338:	f3bf 8f6f 	isb	sy
 800133c:	f3bf 8f4f 	dsb	sy
 8001340:	61bb      	str	r3, [r7, #24]
}
 8001342:	bf00      	nop
 8001344:	e7fe      	b.n	8001344 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00a      	beq.n	8001364 <xQueueSemaphoreTake+0x50>
    __asm volatile
 800134e:	f04f 0310 	mov.w	r3, #16
 8001352:	f383 8811 	msr	BASEPRI, r3
 8001356:	f3bf 8f6f 	isb	sy
 800135a:	f3bf 8f4f 	dsb	sy
 800135e:	617b      	str	r3, [r7, #20]
}
 8001360:	bf00      	nop
 8001362:	e7fe      	b.n	8001362 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001364:	f002 ffa0 	bl	80042a8 <xTaskGetSchedulerState>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <xQueueSemaphoreTake+0x60>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <xQueueSemaphoreTake+0x64>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <xQueueSemaphoreTake+0x66>
 8001378:	2300      	movs	r3, #0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10a      	bne.n	8001394 <xQueueSemaphoreTake+0x80>
    __asm volatile
 800137e:	f04f 0310 	mov.w	r3, #16
 8001382:	f383 8811 	msr	BASEPRI, r3
 8001386:	f3bf 8f6f 	isb	sy
 800138a:	f3bf 8f4f 	dsb	sy
 800138e:	613b      	str	r3, [r7, #16]
}
 8001390:	bf00      	nop
 8001392:	e7fe      	b.n	8001392 <xQueueSemaphoreTake+0x7e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001394:	f004 ff5c 	bl	8006250 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d024      	beq.n	80013ee <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	1e5a      	subs	r2, r3, #1
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80013b4:	f003 f984 	bl	80046c0 <pvTaskIncrementMutexHeldCount>
 80013b8:	4602      	mov	r2, r0
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00f      	beq.n	80013e6 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	3310      	adds	r3, #16
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 faec 	bl	80039a8 <xTaskRemoveFromEventList>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80013d6:	4b4d      	ldr	r3, [pc, #308]	; (800150c <xQueueSemaphoreTake+0x1f8>)
 80013d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	f3bf 8f4f 	dsb	sy
 80013e2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80013e6:	f004 ff63 	bl	80062b0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e089      	b.n	8001502 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80013f4:	f004 ff5c 	bl	80062b0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e082      	b.n	8001502 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 80013fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fc92 	bl	8003d30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800140c:	2301      	movs	r3, #1
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001410:	f004 ff4e 	bl	80062b0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001414:	f001 fe04 	bl	8003020 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001418:	f004 ff1a 	bl	8006250 <vPortEnterCritical>
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001422:	b25b      	sxtb	r3, r3
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001428:	d103      	bne.n	8001432 <xQueueSemaphoreTake+0x11e>
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001438:	b25b      	sxtb	r3, r3
 800143a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800143e:	d103      	bne.n	8001448 <xQueueSemaphoreTake+0x134>
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001448:	f004 ff32 	bl	80062b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800144c:	463a      	mov	r2, r7
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fc81 	bl	8003d5c <xTaskCheckForTimeOut>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d132      	bne.n	80014c6 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001462:	f000 fbf2 	bl	8001c4a <prvIsQueueEmpty>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d026      	beq.n	80014ba <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d109      	bne.n	8001488 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8001474:	f004 feec 	bl	8006250 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4618      	mov	r0, r3
 800147e:	f002 ff31 	bl	80042e4 <xTaskPriorityInherit>
 8001482:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8001484:	f004 ff14 	bl	80062b0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	3324      	adds	r3, #36	; 0x24
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f002 f9c9 	bl	8003828 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001498:	f000 fb85 	bl	8001ba6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800149c:	f001 fdce 	bl	800303c <xTaskResumeAll>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f47f af76 	bne.w	8001394 <xQueueSemaphoreTake+0x80>
                {
                    taskYIELD_WITHIN_API();
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <xQueueSemaphoreTake+0x1f8>)
 80014aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	f3bf 8f6f 	isb	sy
 80014b8:	e76c      	b.n	8001394 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80014ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014bc:	f000 fb73 	bl	8001ba6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80014c0:	f001 fdbc 	bl	800303c <xTaskResumeAll>
 80014c4:	e766      	b.n	8001394 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80014c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014c8:	f000 fb6d 	bl	8001ba6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80014cc:	f001 fdb6 	bl	800303c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80014d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014d2:	f000 fbba 	bl	8001c4a <prvIsQueueEmpty>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f43f af5b 	beq.w	8001394 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00d      	beq.n	8001500 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 80014e4:	f004 feb4 	bl	8006250 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetHighestPriorityOfWaitToReceiveList( pxQueue );
 80014e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014ea:	f000 fab4 	bl	8001a56 <prvGetHighestPriorityOfWaitToReceiveList>
 80014ee:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetHighestPriorityOfWaitToReceiveList,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	69f9      	ldr	r1, [r7, #28]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 f81e 	bl	8004538 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80014fc:	f004 fed8 	bl	80062b0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8001500:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001502:	4618      	mov	r0, r3
 8001504:	3730      	adds	r7, #48	; 0x30
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000ed04 	.word	0xe000ed04

08001510 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	; 0x38
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	633b      	str	r3, [r7, #48]	; 0x30

    traceENTER_xQueuePeek( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10a      	bne.n	8001540 <xQueuePeek+0x30>
    __asm volatile
 800152a:	f04f 0310 	mov.w	r3, #16
 800152e:	f383 8811 	msr	BASEPRI, r3
 8001532:	f3bf 8f6f 	isb	sy
 8001536:	f3bf 8f4f 	dsb	sy
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800153c:	bf00      	nop
 800153e:	e7fe      	b.n	800153e <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d103      	bne.n	800154e <xQueuePeek+0x3e>
 8001546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <xQueuePeek+0x42>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <xQueuePeek+0x44>
 8001552:	2300      	movs	r3, #0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10a      	bne.n	800156e <xQueuePeek+0x5e>
    __asm volatile
 8001558:	f04f 0310 	mov.w	r3, #16
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	623b      	str	r3, [r7, #32]
}
 800156a:	bf00      	nop
 800156c:	e7fe      	b.n	800156c <xQueuePeek+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800156e:	f002 fe9b 	bl	80042a8 <xTaskGetSchedulerState>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <xQueuePeek+0x6e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <xQueuePeek+0x72>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <xQueuePeek+0x74>
 8001582:	2300      	movs	r3, #0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10a      	bne.n	800159e <xQueuePeek+0x8e>
    __asm volatile
 8001588:	f04f 0310 	mov.w	r3, #16
 800158c:	f383 8811 	msr	BASEPRI, r3
 8001590:	f3bf 8f6f 	isb	sy
 8001594:	f3bf 8f4f 	dsb	sy
 8001598:	61fb      	str	r3, [r7, #28]
}
 800159a:	bf00      	nop
 800159c:	e7fe      	b.n	800159c <xQueuePeek+0x8c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800159e:	f004 fe57 	bl	8006250 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d021      	beq.n	80015f2 <xQueuePeek+0xe2>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015b8:	f000 facf 	bl	8001b5a <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c0:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00f      	beq.n	80015ea <xQueuePeek+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015cc:	3324      	adds	r3, #36	; 0x24
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 f9ea 	bl	80039a8 <xTaskRemoveFromEventList>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <xQueuePeek+0xda>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <xQueuePeek+0x1c0>)
 80015dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80015ea:	f004 fe61 	bl	80062b0 <vPortExitCritical>

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e069      	b.n	80016c6 <xQueuePeek+0x1b6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d103      	bne.n	8001600 <xQueuePeek+0xf0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80015f8:	f004 fe5a 	bl	80062b0 <vPortExitCritical>

                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e062      	b.n	80016c6 <xQueuePeek+0x1b6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <xQueuePeek+0x104>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4618      	mov	r0, r3
 800160c:	f002 fb90 	bl	8003d30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001610:	2301      	movs	r3, #1
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001614:	f004 fe4c 	bl	80062b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 8001618:	f001 fd02 	bl	8003020 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800161c:	f004 fe18 	bl	8006250 <vPortEnterCritical>
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001626:	b25b      	sxtb	r3, r3
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800162c:	d103      	bne.n	8001636 <xQueuePeek+0x126>
 800162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800163c:	b25b      	sxtb	r3, r3
 800163e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001642:	d103      	bne.n	800164c <xQueuePeek+0x13c>
 8001644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800164c:	f004 fe30 	bl	80062b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001650:	1d3a      	adds	r2, r7, #4
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fb7f 	bl	8003d5c <xTaskCheckForTimeOut>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d123      	bne.n	80016ac <xQueuePeek+0x19c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001666:	f000 faf0 	bl	8001c4a <prvIsQueueEmpty>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d017      	beq.n	80016a0 <xQueuePeek+0x190>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001672:	3324      	adds	r3, #36	; 0x24
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f002 f8d5 	bl	8003828 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800167e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001680:	f000 fa91 	bl	8001ba6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001684:	f001 fcda 	bl	800303c <xTaskResumeAll>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d187      	bne.n	800159e <xQueuePeek+0x8e>
                {
                    taskYIELD_WITHIN_API();
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <xQueuePeek+0x1c0>)
 8001690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	f3bf 8f4f 	dsb	sy
 800169a:	f3bf 8f6f 	isb	sy
 800169e:	e77e      	b.n	800159e <xQueuePeek+0x8e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 80016a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016a2:	f000 fa80 	bl	8001ba6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80016a6:	f001 fcc9 	bl	800303c <xTaskResumeAll>
 80016aa:	e778      	b.n	800159e <xQueuePeek+0x8e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 80016ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016ae:	f000 fa7a 	bl	8001ba6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80016b2:	f001 fcc3 	bl	800303c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016b8:	f000 fac7 	bl	8001c4a <prvIsQueueEmpty>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f43f af6d 	beq.w	800159e <xQueuePeek+0x8e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80016c4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3738      	adds	r7, #56	; 0x38
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000ed04 	.word	0xe000ed04

080016d4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b090      	sub	sp, #64	; 0x40
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	63bb      	str	r3, [r7, #56]	; 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 80016e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10a      	bne.n	8001700 <xQueueReceiveFromISR+0x2c>
    __asm volatile
 80016ea:	f04f 0310 	mov.w	r3, #16
 80016ee:	f383 8811 	msr	BASEPRI, r3
 80016f2:	f3bf 8f6f 	isb	sy
 80016f6:	f3bf 8f4f 	dsb	sy
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80016fc:	bf00      	nop
 80016fe:	e7fe      	b.n	80016fe <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <xQueueReceiveFromISR+0x3a>
 8001706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <xQueueReceiveFromISR+0x3e>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <xQueueReceiveFromISR+0x40>
 8001712:	2300      	movs	r3, #0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10a      	bne.n	800172e <xQueueReceiveFromISR+0x5a>
    __asm volatile
 8001718:	f04f 0310 	mov.w	r3, #16
 800171c:	f383 8811 	msr	BASEPRI, r3
 8001720:	f3bf 8f6f 	isb	sy
 8001724:	f3bf 8f4f 	dsb	sy
 8001728:	623b      	str	r3, [r7, #32]
}
 800172a:	bf00      	nop
 800172c:	e7fe      	b.n	800172c <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800172e:	f004 fe6c 	bl	800640a <vPortValidateInterruptPriority>
    __asm volatile
 8001732:	f3ef 8211 	mrs	r2, BASEPRI
 8001736:	f04f 0310 	mov.w	r3, #16
 800173a:	f383 8811 	msr	BASEPRI, r3
 800173e:	f3bf 8f6f 	isb	sy
 8001742:	f3bf 8f4f 	dsb	sy
 8001746:	61fa      	str	r2, [r7, #28]
 8001748:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 800174a:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800174e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001752:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001756:	2b00      	cmp	r3, #0
 8001758:	d046      	beq.n	80017e8 <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001768:	f000 f9f7 	bl	8001b5a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8001774:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800177c:	d112      	bne.n	80017a4 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800177e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d02d      	beq.n	80017e2 <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	3310      	adds	r3, #16
 800178a:	4618      	mov	r0, r3
 800178c:	f002 f90c 	bl	80039a8 <xTaskRemoveFromEventList>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d025      	beq.n	80017e2 <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d022      	beq.n	80017e2 <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e01e      	b.n	80017e2 <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80017a4:	f001 fd74 	bl	8003290 <uxTaskGetNumberOfTasks>
 80017a8:	62b8      	str	r0, [r7, #40]	; 0x28
 80017aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80017ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d916      	bls.n	80017e2 <xQueueReceiveFromISR+0x10e>
 80017b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80017b8:	2b7f      	cmp	r3, #127	; 0x7f
 80017ba:	d10a      	bne.n	80017d2 <xQueueReceiveFromISR+0xfe>
    __asm volatile
 80017bc:	f04f 0310 	mov.w	r3, #16
 80017c0:	f383 8811 	msr	BASEPRI, r3
 80017c4:	f3bf 8f6f 	isb	sy
 80017c8:	f3bf 8f4f 	dsb	sy
 80017cc:	617b      	str	r3, [r7, #20]
}
 80017ce:	bf00      	nop
 80017d0:	e7fe      	b.n	80017d0 <xQueueReceiveFromISR+0xfc>
 80017d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b25a      	sxtb	r2, r3
 80017dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80017e2:	2301      	movs	r3, #1
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017e6:	e001      	b.n	80017ec <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ee:	613b      	str	r3, [r7, #16]
    __asm volatile
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f383 8811 	msr	BASEPRI, r3
}
 80017f6:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
 80017f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3740      	adds	r7, #64	; 0x40
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b08c      	sub	sp, #48	; 0x30
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28

    traceENTER_xQueuePeekFromISR( xQueue, pvBuffer );

    configASSERT( pxQueue );
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10a      	bne.n	800182c <xQueuePeekFromISR+0x2a>
    __asm volatile
 8001816:	f04f 0310 	mov.w	r3, #16
 800181a:	f383 8811 	msr	BASEPRI, r3
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f3bf 8f4f 	dsb	sy
 8001826:	61fb      	str	r3, [r7, #28]
}
 8001828:	bf00      	nop
 800182a:	e7fe      	b.n	800182a <xQueuePeekFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <xQueuePeekFromISR+0x38>
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <xQueuePeekFromISR+0x3c>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <xQueuePeekFromISR+0x3e>
 800183e:	2300      	movs	r3, #0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10a      	bne.n	800185a <xQueuePeekFromISR+0x58>
    __asm volatile
 8001844:	f04f 0310 	mov.w	r3, #16
 8001848:	f383 8811 	msr	BASEPRI, r3
 800184c:	f3bf 8f6f 	isb	sy
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	61bb      	str	r3, [r7, #24]
}
 8001856:	bf00      	nop
 8001858:	e7fe      	b.n	8001858 <xQueuePeekFromISR+0x56>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10a      	bne.n	8001878 <xQueuePeekFromISR+0x76>
    __asm volatile
 8001862:	f04f 0310 	mov.w	r3, #16
 8001866:	f383 8811 	msr	BASEPRI, r3
 800186a:	f3bf 8f6f 	isb	sy
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	617b      	str	r3, [r7, #20]
}
 8001874:	bf00      	nop
 8001876:	e7fe      	b.n	8001876 <xQueuePeekFromISR+0x74>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001878:	f004 fdc7 	bl	800640a <vPortValidateInterruptPriority>
    __asm volatile
 800187c:	f3ef 8211 	mrs	r2, BASEPRI
 8001880:	f04f 0310 	mov.w	r3, #16
 8001884:	f383 8811 	msr	BASEPRI, r3
 8001888:	f3bf 8f6f 	isb	sy
 800188c:	f3bf 8f4f 	dsb	sy
 8001890:	613a      	str	r2, [r7, #16]
 8001892:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8001894:	693b      	ldr	r3, [r7, #16]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <xQueuePeekFromISR+0xb8>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	623b      	str	r3, [r7, #32]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018aa:	f000 f956 	bl	8001b5a <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	6a3a      	ldr	r2, [r7, #32]
 80018b2:	60da      	str	r2, [r3, #12]

            xReturn = pdPASS;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b8:	e001      	b.n	80018be <xQueuePeekFromISR+0xbc>
        }
        else
        {
            xReturn = pdFAIL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	60bb      	str	r3, [r7, #8]
    __asm volatile
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f383 8811 	msr	BASEPRI, r3
}
 80018c8:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3730      	adds	r7, #48	; 0x30
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10a      	bne.n	80018f8 <uxQueueMessagesWaiting+0x24>
    __asm volatile
 80018e2:	f04f 0310 	mov.w	r3, #16
 80018e6:	f383 8811 	msr	BASEPRI, r3
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	60bb      	str	r3, [r7, #8]
}
 80018f4:	bf00      	nop
 80018f6:	e7fe      	b.n	80018f6 <uxQueueMessagesWaiting+0x22>

    portBASE_TYPE_ENTER_CRITICAL();
 80018f8:	f004 fcaa 	bl	8006250 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	60fb      	str	r3, [r7, #12]
    }
    portBASE_TYPE_EXIT_CRITICAL();
 8001902:	f004 fcd5 	bl	80062b0 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	617b      	str	r3, [r7, #20]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <uxQueueSpacesAvailable+0x28>
    __asm volatile
 8001922:	f04f 0310 	mov.w	r3, #16
 8001926:	f383 8811 	msr	BASEPRI, r3
 800192a:	f3bf 8f6f 	isb	sy
 800192e:	f3bf 8f4f 	dsb	sy
 8001932:	60fb      	str	r3, [r7, #12]
}
 8001934:	bf00      	nop
 8001936:	e7fe      	b.n	8001936 <uxQueueSpacesAvailable+0x26>

    portBASE_TYPE_ENTER_CRITICAL();
 8001938:	f004 fc8a 	bl	8006250 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	613b      	str	r3, [r7, #16]
    }
    portBASE_TYPE_EXIT_CRITICAL();
 8001948:	f004 fcb2 	bl	80062b0 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 800194c:	693b      	ldr	r3, [r7, #16]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8001956:	b480      	push	{r7}
 8001958:	b087      	sub	sp, #28
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	617b      	str	r3, [r7, #20]

    traceENTER_uxQueueMessagesWaitingFromISR( xQueue );

    configASSERT( pxQueue );
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10a      	bne.n	800197e <uxQueueMessagesWaitingFromISR+0x28>
    __asm volatile
 8001968:	f04f 0310 	mov.w	r3, #16
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	60fb      	str	r3, [r7, #12]
}
 800197a:	bf00      	nop
 800197c:	e7fe      	b.n	800197c <uxQueueMessagesWaitingFromISR+0x26>
    uxReturn = pxQueue->uxMessagesWaiting;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001982:	613b      	str	r3, [r7, #16]

    traceRETURN_uxQueueMessagesWaitingFromISR( uxReturn );

    return uxReturn;
 8001984:	693b      	ldr	r3, [r7, #16]
}
 8001986:	4618      	mov	r0, r3
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10a      	bne.n	80019ba <vQueueDelete+0x28>
    __asm volatile
 80019a4:	f04f 0310 	mov.w	r3, #16
 80019a8:	f383 8811 	msr	BASEPRI, r3
 80019ac:	f3bf 8f6f 	isb	sy
 80019b0:	f3bf 8f4f 	dsb	sy
 80019b4:	60bb      	str	r3, [r7, #8]
}
 80019b6:	bf00      	nop
 80019b8:	e7fe      	b.n	80019b8 <vQueueDelete+0x26>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 fa40 	bl	8001e40 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <vQueueDelete+0x3e>
        {
            vPortFree( pxQueue );
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f004 fe4a 	bl	8006664 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
        traceENTER_uxQueueGetQueueNumber( xQueue );

        traceRETURN_uxQueueGetQueueNumber( ( ( Queue_t * ) xQueue )->uxQueueNumber );

        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
        traceENTER_vQueueSetQueueNumber( xQueue, uxQueueNumber );

        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	649a      	str	r2, [r3, #72]	; 0x48

        traceRETURN_vQueueSetQueueNumber();
    }
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
        traceENTER_ucQueueGetQueueType( xQueue );

        traceRETURN_ucQueueGetQueueType( ( ( Queue_t * ) xQueue )->ucQueueType );

        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    }
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <uxQueueGetQueueItemSize>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueGetQueueItemSize( QueueHandle_t xQueue ) /* PRIVILEGED_FUNCTION */
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
    traceENTER_uxQueueGetQueueItemSize( xQueue );

    traceRETURN_uxQueueGetQueueItemSize( ( ( Queue_t * ) xQueue )->uxItemSize );

    return ( ( Queue_t * ) xQueue )->uxItemSize;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <uxQueueGetQueueLength>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueGetQueueLength( QueueHandle_t xQueue ) /* PRIVILEGED_FUNCTION */
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
    traceENTER_uxQueueGetQueueLength( xQueue );

    traceRETURN_uxQueueGetQueueLength( ( ( Queue_t * ) xQueue )->uxLength );

    return ( ( Queue_t * ) xQueue )->uxLength;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <prvGetHighestPriorityOfWaitToReceiveList>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetHighestPriorityOfWaitToReceiveList( const Queue_t * const pxQueue )
    {
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <prvGetHighestPriorityOfWaitToReceiveList+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e001      	b.n	8001a78 <prvGetHighestPriorityOfWaitToReceiveList+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001a78:	68fb      	ldr	r3, [r7, #12]
    }
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10d      	bne.n	8001ac0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d14d      	bne.n	8001b48 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fca9 	bl	8004408 <xTaskPriorityDisinherit>
 8001ab6:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	e043      	b.n	8001b48 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d119      	bne.n	8001afa <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6858      	ldr	r0, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	f005 f98f 	bl	8006df4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	441a      	add	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d32b      	bcc.n	8001b48 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	e026      	b.n	8001b48 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	68d8      	ldr	r0, [r3, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	461a      	mov	r2, r3
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	f005 f975 	bl	8006df4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	425b      	negs	r3, r3
 8001b14:	441a      	add	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d207      	bcs.n	8001b36 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	425b      	negs	r3, r3
 8001b30:	441a      	add	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d105      	bne.n	8001b48 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001b50:	697b      	ldr	r3, [r7, #20]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d018      	beq.n	8001b9e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	441a      	add	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d303      	bcc.n	8001b8e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68d9      	ldr	r1, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	461a      	mov	r2, r3
 8001b98:	6838      	ldr	r0, [r7, #0]
 8001b9a:	f005 f92b 	bl	8006df4 <memcpy>
    }
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001bae:	f004 fb4f 	bl	8006250 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bb8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bba:	e011      	b.n	8001be0 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d012      	beq.n	8001bea <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3324      	adds	r3, #36	; 0x24
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f001 feed 	bl	80039a8 <xTaskRemoveFromEventList>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001bd4:	f002 f928 	bl	8003e28 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	dce9      	bgt.n	8001bbc <prvUnlockQueue+0x16>
 8001be8:	e000      	b.n	8001bec <prvUnlockQueue+0x46>
                    break;
 8001bea:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	22ff      	movs	r2, #255	; 0xff
 8001bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001bf4:	f004 fb5c 	bl	80062b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001bf8:	f004 fb2a 	bl	8006250 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c02:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c04:	e011      	b.n	8001c2a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d012      	beq.n	8001c34 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3310      	adds	r3, #16
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 fec8 	bl	80039a8 <xTaskRemoveFromEventList>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001c1e:	f002 f903 	bl	8003e28 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001c22:	7bbb      	ldrb	r3, [r7, #14]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	dce9      	bgt.n	8001c06 <prvUnlockQueue+0x60>
 8001c32:	e000      	b.n	8001c36 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001c34:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	22ff      	movs	r2, #255	; 0xff
 8001c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001c3e:	f004 fb37 	bl	80062b0 <vPortExitCritical>
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c52:	f004 fafd 	bl	8006250 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e001      	b.n	8001c68 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c68:	f004 fb22 	bl	80062b0 <vPortExitCritical>

    return xReturn;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8001c76:	b480      	push	{r7}
 8001c78:	b087      	sub	sp, #28
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueIsQueueEmptyFromISR( xQueue );

    configASSERT( pxQueue );
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <xQueueIsQueueEmptyFromISR+0x28>
    __asm volatile
 8001c88:	f04f 0310 	mov.w	r3, #16
 8001c8c:	f383 8811 	msr	BASEPRI, r3
 8001c90:	f3bf 8f6f 	isb	sy
 8001c94:	f3bf 8f4f 	dsb	sy
 8001c98:	60fb      	str	r3, [r7, #12]
}
 8001c9a:	bf00      	nop
 8001c9c:	e7fe      	b.n	8001c9c <xQueueIsQueueEmptyFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <xQueueIsQueueEmptyFromISR+0x36>
    {
        xReturn = pdTRUE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e001      	b.n	8001cb0 <xQueueIsQueueEmptyFromISR+0x3a>
    }
    else
    {
        xReturn = pdFALSE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
    }

    traceRETURN_xQueueIsQueueEmptyFromISR( xReturn );

    return xReturn;
 8001cb0:	697b      	ldr	r3, [r7, #20]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001cc6:	f004 fac3 	bl	8006250 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d102      	bne.n	8001cdc <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e001      	b.n	8001ce0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001ce0:	f004 fae6 	bl	80062b0 <vPortExitCritical>

    return xReturn;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b087      	sub	sp, #28
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10a      	bne.n	8001d16 <xQueueIsQueueFullFromISR+0x28>
    __asm volatile
 8001d00:	f04f 0310 	mov.w	r3, #16
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	60fb      	str	r3, [r7, #12]
}
 8001d12:	bf00      	nop
 8001d14:	e7fe      	b.n	8001d14 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d102      	bne.n	8001d28 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001d22:	2301      	movs	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e001      	b.n	8001d2c <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
 8001d2c:	697b      	ldr	r3, [r7, #20]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8001d3a:	b480      	push	{r7}
 8001d3c:	b087      	sub	sp, #28
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <vQueueAddToRegistry+0x2a>
    __asm volatile
 8001d4e:	f04f 0310 	mov.w	r3, #16
 8001d52:	f383 8811 	msr	BASEPRI, r3
 8001d56:	f3bf 8f6f 	isb	sy
 8001d5a:	f3bf 8f4f 	dsb	sy
 8001d5e:	60fb      	str	r3, [r7, #12]
}
 8001d60:	bf00      	nop
 8001d62:	e7fe      	b.n	8001d62 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d024      	beq.n	8001db4 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e01e      	b.n	8001dae <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001d70:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <vQueueAddToRegistry+0x9a>)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d105      	bne.n	8001d8c <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <vQueueAddToRegistry+0x9a>)
 8001d86:	4413      	add	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
                    break;
 8001d8a:	e013      	b.n	8001db4 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <vQueueAddToRegistry+0x6e>
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <vQueueAddToRegistry+0x9a>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d104      	bne.n	8001da8 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <vQueueAddToRegistry+0x9a>)
 8001da4:	4413      	add	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b07      	cmp	r3, #7
 8001db2:	d9dd      	bls.n	8001d70 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8001dc6:	bf00      	nop
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200001b8 	.word	0x200001b8

08001dd8 <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    const char * pcQueueGetName( QueueHandle_t xQueue )
    {
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;
        const char * pcReturn = NULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]

        traceENTER_pcQueueGetName( xQueue );

        configASSERT( xQueue );
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10a      	bne.n	8001e00 <pcQueueGetName+0x28>
    __asm volatile
 8001dea:	f04f 0310 	mov.w	r3, #16
 8001dee:	f383 8811 	msr	BASEPRI, r3
 8001df2:	f3bf 8f6f 	isb	sy
 8001df6:	f3bf 8f4f 	dsb	sy
 8001dfa:	60fb      	str	r3, [r7, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	e7fe      	b.n	8001dfe <pcQueueGetName+0x26>

        /* Note there is nothing here to protect against another task adding or
         * removing entries from the registry while it is being searched. */

        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e010      	b.n	8001e28 <pcQueueGetName+0x50>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001e06:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <pcQueueGetName+0x64>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d105      	bne.n	8001e22 <pcQueueGetName+0x4a>
            {
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <pcQueueGetName+0x64>)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e1e:	613b      	str	r3, [r7, #16]
                break;
 8001e20:	e005      	b.n	8001e2e <pcQueueGetName+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b07      	cmp	r3, #7
 8001e2c:	d9eb      	bls.n	8001e06 <pcQueueGetName+0x2e>
            }
        }

        traceRETURN_pcQueueGetName( pcReturn );

        return pcReturn;
 8001e2e:	693b      	ldr	r3, [r7, #16]
    }
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	200001b8 	.word	0x200001b8

08001e40 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10a      	bne.n	8001e64 <vQueueUnregisterQueue+0x24>
    __asm volatile
 8001e4e:	f04f 0310 	mov.w	r3, #16
 8001e52:	f383 8811 	msr	BASEPRI, r3
 8001e56:	f3bf 8f6f 	isb	sy
 8001e5a:	f3bf 8f4f 	dsb	sy
 8001e5e:	60bb      	str	r3, [r7, #8]
}
 8001e60:	bf00      	nop
 8001e62:	e7fe      	b.n	8001e62 <vQueueUnregisterQueue+0x22>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e016      	b.n	8001e98 <vQueueUnregisterQueue+0x58>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <vQueueUnregisterQueue+0x6c>)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d10b      	bne.n	8001e92 <vQueueUnregisterQueue+0x52>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <vQueueUnregisterQueue+0x6c>)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <vQueueUnregisterQueue+0x6c>)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
                break;
 8001e90:	e006      	b.n	8001ea0 <vQueueUnregisterQueue+0x60>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3301      	adds	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b07      	cmp	r3, #7
 8001e9c:	d9e5      	bls.n	8001e6a <vQueueUnregisterQueue+0x2a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	200001b8 	.word	0x200001b8

08001eb0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001ec0:	f004 f9c6 	bl	8006250 <vPortEnterCritical>
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed0:	d103      	bne.n	8001eda <vQueueWaitForMessageRestricted+0x2a>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ee6:	d103      	bne.n	8001ef0 <vQueueWaitForMessageRestricted+0x40>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ef0:	f004 f9de 	bl	80062b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3324      	adds	r3, #36	; 0x24
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f001 fd09 	bl	800391c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff fe4b 	bl	8001ba6 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8001f10:	bf00      	nop
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08e      	sub	sp, #56	; 0x38
 8001f1c:	af04      	add	r7, sp, #16
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <prvCreateStaticTask+0x2a>
    __asm volatile
 8001f2c:	f04f 0310 	mov.w	r3, #16
 8001f30:	f383 8811 	msr	BASEPRI, r3
 8001f34:	f3bf 8f6f 	isb	sy
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	623b      	str	r3, [r7, #32]
}
 8001f3e:	bf00      	nop
 8001f40:	e7fe      	b.n	8001f40 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8001f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <prvCreateStaticTask+0x46>
    __asm volatile
 8001f48:	f04f 0310 	mov.w	r3, #16
 8001f4c:	f383 8811 	msr	BASEPRI, r3
 8001f50:	f3bf 8f6f 	isb	sy
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	61fb      	str	r3, [r7, #28]
}
 8001f5a:	bf00      	nop
 8001f5c:	e7fe      	b.n	8001f5c <prvCreateStaticTask+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8001f5e:	23bc      	movs	r3, #188	; 0xbc
 8001f60:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2bbc      	cmp	r3, #188	; 0xbc
 8001f66:	d00a      	beq.n	8001f7e <prvCreateStaticTask+0x66>
    __asm volatile
 8001f68:	f04f 0310 	mov.w	r3, #16
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	61bb      	str	r3, [r7, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	e7fe      	b.n	8001f7c <prvCreateStaticTask+0x64>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8001f7e:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01f      	beq.n	8001fc6 <prvCreateStaticTask+0xae>
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01c      	beq.n	8001fc6 <prvCreateStaticTask+0xae>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8001f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001f90:	22bc      	movs	r2, #188	; 0xbc
 8001f92:	2100      	movs	r1, #0
 8001f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f96:	f004 ff3b 	bl	8006e10 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9303      	str	r3, [sp, #12]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	9302      	str	r3, [sp, #8]
 8001fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f88f 	bl	80020e2 <prvInitialiseNewTask>
 8001fc4:	e001      	b.n	8001fca <prvCreateStaticTask+0xb2>
        }
        else
        {
            pxNewTCB = NULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        return pxNewTCB;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af04      	add	r7, sp, #16
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	9303      	str	r3, [sp, #12]
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff ff8a 	bl	8001f18 <prvCreateStaticTask>
 8002004:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800200c:	6978      	ldr	r0, [r7, #20]
 800200e:	f000 f90d 	bl	800222c <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 8002012:	693b      	ldr	r3, [r7, #16]
    }
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af04      	add	r7, sp, #16
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fa2a 	bl	8006488 <pvPortMalloc>
 8002034:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800203c:	20bc      	movs	r0, #188	; 0xbc
 800203e:	f004 fa23 	bl	8006488 <pvPortMalloc>
 8002042:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800204a:	22bc      	movs	r2, #188	; 0xbc
 800204c:	2100      	movs	r1, #0
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f004 fede 	bl	8006e10 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
 800205a:	e005      	b.n	8002068 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800205c:	6938      	ldr	r0, [r7, #16]
 800205e:	f004 fb01 	bl	8006664 <vPortFree>
 8002062:	e001      	b.n	8002068 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d011      	beq.n	8002092 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002076:	2300      	movs	r3, #0
 8002078:	9303      	str	r3, [sp, #12]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	9302      	str	r3, [sp, #8]
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f828 	bl	80020e2 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002092:	697b      	ldr	r3, [r7, #20]
    }
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff ffaf 	bl	800201c <prvCreateTask>
 80020be:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80020c6:	6938      	ldr	r0, [r7, #16]
 80020c8:	f000 f8b0 	bl	800222c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80020cc:	2301      	movs	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e002      	b.n	80020d8 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d6:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80020d8:	697b      	ldr	r3, [r7, #20]
    }
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b088      	sub	sp, #32
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	461a      	mov	r2, r3
 80020fa:	21a5      	movs	r1, #165	; 0xa5
 80020fc:	f004 fe88 	bl	8006e10 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800210a:	3b01      	subs	r3, #1
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f023 0307 	bic.w	r3, r3, #7
 8002118:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <prvInitialiseNewTask+0x58>
    __asm volatile
 8002124:	f04f 0310 	mov.w	r3, #16
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	617b      	str	r3, [r7, #20]
}
 8002136:	bf00      	nop
 8002138:	e7fe      	b.n	8002138 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01e      	beq.n	800217e <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e012      	b.n	800216c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	4413      	add	r3, r2
 800214c:	7819      	ldrb	r1, [r3, #0]
 800214e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	3334      	adds	r3, #52	; 0x34
 8002156:	460a      	mov	r2, r1
 8002158:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	d9e9      	bls.n	8002146 <prvInitialiseNewTask+0x64>
 8002172:	e000      	b.n	8002176 <prvInitialiseNewTask+0x94>
            {
                break;
 8002174:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	2b37      	cmp	r3, #55	; 0x37
 8002182:	d90a      	bls.n	800219a <prvInitialiseNewTask+0xb8>
    __asm volatile
 8002184:	f04f 0310 	mov.w	r3, #16
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	613b      	str	r3, [r7, #16]
}
 8002196:	bf00      	nop
 8002198:	e7fe      	b.n	8002198 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	2b37      	cmp	r3, #55	; 0x37
 800219e:	d901      	bls.n	80021a4 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021a0:	2337      	movs	r3, #55	; 0x37
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ae:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	3304      	adds	r3, #4
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f9e1 	bl	800057c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	3318      	adds	r3, #24
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f9dc 	bl	800057c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021c8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	3354      	adds	r3, #84	; 0x54
 80021de:	2260      	movs	r2, #96	; 0x60
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 fe14 	bl	8006e10 <memset>
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <prvInitialiseNewTask+0x13e>)
 80021ec:	659a      	str	r2, [r3, #88]	; 0x58
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <prvInitialiseNewTask+0x142>)
 80021f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <prvInitialiseNewTask+0x146>)
 80021f8:	661a      	str	r2, [r3, #96]	; 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	69b8      	ldr	r0, [r7, #24]
 8002200:	f003 fe9c 	bl	8005f3c <pxPortInitialiseStack>
 8002204:	4602      	mov	r2, r0
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <prvInitialiseNewTask+0x134>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002214:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002216:	bf00      	nop
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	0800702c 	.word	0x0800702c
 8002224:	0800704c 	.word	0x0800704c
 8002228:	0800700c 	.word	0x0800700c

0800222c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002234:	f004 f80c 	bl	8006250 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <prvAddNewTaskToReadyList+0x118>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	4a41      	ldr	r2, [pc, #260]	; (8002344 <prvAddNewTaskToReadyList+0x118>)
 8002240:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <prvAddNewTaskToReadyList+0x11c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800224a:	4a3f      	ldr	r2, [pc, #252]	; (8002348 <prvAddNewTaskToReadyList+0x11c>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <prvAddNewTaskToReadyList+0x118>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d110      	bne.n	800227a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002258:	f001 fe32 	bl	8003ec0 <prvInitialiseTaskLists>
 800225c:	e00d      	b.n	800227a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800225e:	4b3b      	ldr	r3, [pc, #236]	; (800234c <prvAddNewTaskToReadyList+0x120>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <prvAddNewTaskToReadyList+0x11c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	429a      	cmp	r2, r3
 8002272:	d802      	bhi.n	800227a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002274:	4a34      	ldr	r2, [pc, #208]	; (8002348 <prvAddNewTaskToReadyList+0x11c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <prvAddNewTaskToReadyList+0x124>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	4a33      	ldr	r2, [pc, #204]	; (8002350 <prvAddNewTaskToReadyList+0x124>)
 8002282:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002284:	4b32      	ldr	r3, [pc, #200]	; (8002350 <prvAddNewTaskToReadyList+0x124>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <prvAddNewTaskToReadyList+0x128>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d903      	bls.n	80022a0 <prvAddNewTaskToReadyList+0x74>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	4a2d      	ldr	r2, [pc, #180]	; (8002354 <prvAddNewTaskToReadyList+0x128>)
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	492c      	ldr	r1, [pc, #176]	; (8002358 <prvAddNewTaskToReadyList+0x12c>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3304      	adds	r3, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	3204      	adds	r2, #4
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1d1a      	adds	r2, r3, #4
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <prvAddNewTaskToReadyList+0x12c>)
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	491a      	ldr	r1, [pc, #104]	; (8002358 <prvAddNewTaskToReadyList+0x12c>)
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002300:	1c59      	adds	r1, r3, #1
 8002302:	4815      	ldr	r0, [pc, #84]	; (8002358 <prvAddNewTaskToReadyList+0x12c>)
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4403      	add	r3, r0
 800230e:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002310:	f003 ffce 	bl	80062b0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <prvAddNewTaskToReadyList+0x120>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00e      	beq.n	800233a <prvAddNewTaskToReadyList+0x10e>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <prvAddNewTaskToReadyList+0x11c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	429a      	cmp	r2, r3
 8002328:	d207      	bcs.n	800233a <prvAddNewTaskToReadyList+0x10e>
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <prvAddNewTaskToReadyList+0x130>)
 800232c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f3bf 8f4f 	dsb	sy
 8002336:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200006cc 	.word	0x200006cc
 8002348:	200001f8 	.word	0x200001f8
 800234c:	200006d8 	.word	0x200006d8
 8002350:	200006e8 	.word	0x200006e8
 8002354:	200006d4 	.word	0x200006d4
 8002358:	200001fc 	.word	0x200001fc
 800235c:	e000ed04 	.word	0xe000ed04

08002360 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 800236c:	f003 ff70 	bl	8006250 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <vTaskDelete+0x1c>
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <vTaskDelete+0x104>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e000      	b.n	800237e <vTaskDelete+0x1e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	61bb      	str	r3, [r7, #24]
            configASSERT( pxTCB != NULL );
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10a      	bne.n	800239c <vTaskDelete+0x3c>
    __asm volatile
 8002386:	f04f 0310 	mov.w	r3, #16
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	613b      	str	r3, [r7, #16]
}
 8002398:	bf00      	nop
 800239a:	e7fe      	b.n	800239a <vTaskDelete+0x3a>

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	3304      	adds	r3, #4
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f955 	bl	8000650 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <vTaskDelete+0x58>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	3318      	adds	r3, #24
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f94c 	bl	8000650 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <vTaskDelete+0x108>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <vTaskDelete+0x108>)
 80023c0:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 80023c2:	4b28      	ldr	r3, [pc, #160]	; (8002464 <vTaskDelete+0x104>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d101      	bne.n	80023d0 <vTaskDelete+0x70>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <vTaskDelete+0x72>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <vTaskDelete+0x10c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d010      	beq.n	80023fe <vTaskDelete+0x9e>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00d      	beq.n	80023fe <vTaskDelete+0x9e>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	3304      	adds	r3, #4
 80023e6:	4619      	mov	r1, r3
 80023e8:	4821      	ldr	r0, [pc, #132]	; (8002470 <vTaskDelete+0x110>)
 80023ea:	f7fe f8d4 	bl	8000596 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80023ee:	4b21      	ldr	r3, [pc, #132]	; (8002474 <vTaskDelete+0x114>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <vTaskDelete+0x114>)
 80023f6:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 80023f8:	2301      	movs	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	e006      	b.n	800240c <vTaskDelete+0xac>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <vTaskDelete+0x118>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3b01      	subs	r3, #1
 8002404:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <vTaskDelete+0x118>)
 8002406:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002408:	f001 ff0a 	bl	8004220 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800240c:	f003 ff50 	bl	80062b0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d002      	beq.n	800241c <vTaskDelete+0xbc>
        {
            prvDeleteTCB( pxTCB );
 8002416:	69b8      	ldr	r0, [r7, #24]
 8002418:	f001 fece 	bl	80041b8 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <vTaskDelete+0x10c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01b      	beq.n	800245c <vTaskDelete+0xfc>
            {
                if( pxTCB == pxCurrentTCB )
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <vTaskDelete+0x104>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	429a      	cmp	r2, r3
 800242c:	d116      	bne.n	800245c <vTaskDelete+0xfc>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <vTaskDelete+0x11c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <vTaskDelete+0xec>
    __asm volatile
 8002436:	f04f 0310 	mov.w	r3, #16
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	60fb      	str	r3, [r7, #12]
}
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <vTaskDelete+0xea>
                    taskYIELD_WITHIN_API();
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <vTaskDelete+0x120>)
 800244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 800245c:	bf00      	nop
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200001f8 	.word	0x200001f8
 8002468:	200006e8 	.word	0x200006e8
 800246c:	200006d8 	.word	0x200006d8
 8002470:	200006a0 	.word	0x200006a0
 8002474:	200006b4 	.word	0x200006b4
 8002478:	200006cc 	.word	0x200006cc
 800247c:	200006f4 	.word	0x200006f4
 8002480:	e000ed04 	.word	0xe000ed04

08002484 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24

        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <xTaskDelayUntil+0x2a>
    __asm volatile
 8002498:	f04f 0310 	mov.w	r3, #16
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	617b      	str	r3, [r7, #20]
}
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <xTaskDelayUntil+0x46>
    __asm volatile
 80024b4:	f04f 0310 	mov.w	r3, #16
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	613b      	str	r3, [r7, #16]
}
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <xTaskDelayUntil+0x44>

        vTaskSuspendAll();
 80024ca:	f000 fda9 	bl	8003020 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <xTaskDelayUntil+0xf0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	623b      	str	r3, [r7, #32]

            configASSERT( uxSchedulerSuspended == 1U );
 80024d4:	4b28      	ldr	r3, [pc, #160]	; (8002578 <xTaskDelayUntil+0xf4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d00a      	beq.n	80024f2 <xTaskDelayUntil+0x6e>
    __asm volatile
 80024dc:	f04f 0310 	mov.w	r3, #16
 80024e0:	f383 8811 	msr	BASEPRI, r3
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	60fb      	str	r3, [r7, #12]
}
 80024ee:	bf00      	nop
 80024f0:	e7fe      	b.n	80024f0 <xTaskDelayUntil+0x6c>

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	429a      	cmp	r2, r3
 8002504:	d20b      	bcs.n	800251e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	429a      	cmp	r2, r3
 800250e:	d211      	bcs.n	8002534 <xTaskDelayUntil+0xb0>
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	429a      	cmp	r2, r3
 8002516:	d90d      	bls.n	8002534 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002518:	2301      	movs	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
 800251c:	e00a      	b.n	8002534 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	d303      	bcc.n	8002530 <xTaskDelayUntil+0xac>
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	429a      	cmp	r2, r3
 800252e:	d901      	bls.n	8002534 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002530:	2301      	movs	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fe27 	bl	800519c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800254e:	f000 fd75 	bl	800303c <xTaskResumeAll>
 8002552:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d107      	bne.n	800256a <xTaskDelayUntil+0xe6>
        {
            taskYIELD_WITHIN_API();
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <xTaskDelayUntil+0xf8>)
 800255c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f3bf 8f4f 	dsb	sy
 8002566:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );

        return xShouldDelay;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800256c:	4618      	mov	r0, r3
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200006d0 	.word	0x200006d0
 8002578:	200006f4 	.word	0x200006f4
 800257c:	e000ed04 	.word	0xe000ed04

08002580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d017      	beq.n	80025c2 <vTaskDelay+0x42>
        {
            vTaskSuspendAll();
 8002592:	f000 fd45 	bl	8003020 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <vTaskDelay+0x60>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d00a      	beq.n	80025b4 <vTaskDelay+0x34>
    __asm volatile
 800259e:	f04f 0310 	mov.w	r3, #16
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	60bb      	str	r3, [r7, #8]
}
 80025b0:	bf00      	nop
 80025b2:	e7fe      	b.n	80025b2 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80025b4:	2100      	movs	r1, #0
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f002 fdf0 	bl	800519c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80025bc:	f000 fd3e 	bl	800303c <xTaskResumeAll>
 80025c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <vTaskDelay+0x58>
        {
            taskYIELD_WITHIN_API();
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <vTaskDelay+0x64>)
 80025ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200006f4 	.word	0x200006f4
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	61fb      	str	r3, [r7, #28]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB != NULL );
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <eTaskGetState+0x28>
    __asm volatile
 80025fa:	f04f 0310 	mov.w	r3, #16
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	60bb      	str	r3, [r7, #8]
}
 800260c:	bf00      	nop
 800260e:	e7fe      	b.n	800260e <eTaskGetState+0x26>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 8002610:	4b32      	ldr	r3, [pc, #200]	; (80026dc <eTaskGetState+0xf4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	429a      	cmp	r2, r3
 8002618:	d103      	bne.n	8002622 <eTaskGetState+0x3a>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002620:	e056      	b.n	80026d0 <eTaskGetState+0xe8>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 8002622:	f003 fe15 	bl	8006250 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	61bb      	str	r3, [r7, #24]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	617b      	str	r3, [r7, #20]
                pxDelayedList = pxDelayedTaskList;
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <eTaskGetState+0xf8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	613b      	str	r3, [r7, #16]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <eTaskGetState+0xfc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
            }
            taskEXIT_CRITICAL();
 800263e:	f003 fe37 	bl	80062b0 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <eTaskGetState+0x100>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d103      	bne.n	8002652 <eTaskGetState+0x6a>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002650:	e03e      	b.n	80026d0 <eTaskGetState+0xe8>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	429a      	cmp	r2, r3
 8002658:	d003      	beq.n	8002662 <eTaskGetState+0x7a>
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	429a      	cmp	r2, r3
 8002660:	d103      	bne.n	800266a <eTaskGetState+0x82>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8002662:	2302      	movs	r3, #2
 8002664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002668:	e032      	b.n	80026d0 <eTaskGetState+0xe8>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <eTaskGetState+0x104>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d120      	bne.n	80026b4 <eTaskGetState+0xcc>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <eTaskGetState+0xc4>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
 800267a:	2303      	movs	r3, #3
 800267c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	e00e      	b.n	80026a4 <eTaskGetState+0xbc>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	4413      	add	r3, r2
 800268c:	33b8      	adds	r3, #184	; 0xb8
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d103      	bne.n	800269e <eTaskGetState+0xb6>
                                {
                                    eReturn = eBlocked;
 8002696:	2302      	movs	r3, #2
 8002698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                    break;
 800269c:	e018      	b.n	80026d0 <eTaskGetState+0xe8>
                            for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	3301      	adds	r3, #1
 80026a2:	623b      	str	r3, [r7, #32]
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dded      	ble.n	8002686 <eTaskGetState+0x9e>
 80026aa:	e011      	b.n	80026d0 <eTaskGetState+0xe8>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 80026ac:	2302      	movs	r3, #2
 80026ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026b2:	e00d      	b.n	80026d0 <eTaskGetState+0xe8>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <eTaskGetState+0x108>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d002      	beq.n	80026c2 <eTaskGetState+0xda>
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <eTaskGetState+0xe2>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 80026c2:	2304      	movs	r3, #4
 80026c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026c8:	e002      	b.n	80026d0 <eTaskGetState+0xe8>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 80026d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    }
 80026d4:	4618      	mov	r0, r3
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	200001f8 	.word	0x200001f8
 80026e0:	20000684 	.word	0x20000684
 80026e4:	20000688 	.word	0x20000688
 80026e8:	2000068c 	.word	0x2000068c
 80026ec:	200006b8 	.word	0x200006b8
 80026f0:	200006a0 	.word	0x200006a0

080026f4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        traceENTER_uxTaskPriorityGet( xTask );

        portBASE_TYPE_ENTER_CRITICAL();
 80026fc:	f003 fda8 	bl	8006250 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <uxTaskPriorityGet+0x18>
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <uxTaskPriorityGet+0x4c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	e000      	b.n	800270e <uxTaskPriorityGet+0x1a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	617b      	str	r3, [r7, #20]
            configASSERT( pxTCB != NULL );
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <uxTaskPriorityGet+0x38>
    __asm volatile
 8002716:	f04f 0310 	mov.w	r3, #16
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	60fb      	str	r3, [r7, #12]
}
 8002728:	bf00      	nop
 800272a:	e7fe      	b.n	800272a <uxTaskPriorityGet+0x36>

            uxReturn = pxTCB->uxPriority;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	613b      	str	r3, [r7, #16]
        }
        portBASE_TYPE_EXIT_CRITICAL();
 8002732:	f003 fdbd 	bl	80062b0 <vPortExitCritical>

        traceRETURN_uxTaskPriorityGet( uxReturn );

        return uxReturn;
 8002736:	693b      	ldr	r3, [r7, #16]
    }
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200001f8 	.word	0x200001f8

08002744 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
    {
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800274c:	f003 fe5d 	bl	800640a <vPortValidateInterruptPriority>
    __asm volatile
 8002750:	f3ef 8211 	mrs	r2, BASEPRI
 8002754:	f04f 0310 	mov.w	r3, #16
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	61ba      	str	r2, [r7, #24]
 8002766:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 8002768:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <uxTaskPriorityGetFromISR+0x34>
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <uxTaskPriorityGetFromISR+0x70>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	e000      	b.n	800277a <uxTaskPriorityGetFromISR+0x36>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	623b      	str	r3, [r7, #32]
            configASSERT( pxTCB != NULL );
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <uxTaskPriorityGetFromISR+0x54>
    __asm volatile
 8002782:	f04f 0310 	mov.w	r3, #16
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	613b      	str	r3, [r7, #16]
}
 8002794:	bf00      	nop
 8002796:	e7fe      	b.n	8002796 <uxTaskPriorityGetFromISR+0x52>

            uxReturn = pxTCB->uxPriority;
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	60fb      	str	r3, [r7, #12]
    __asm volatile
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f383 8811 	msr	BASEPRI, r3
}
 80027a8:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_uxTaskPriorityGetFromISR( uxReturn );

        return uxReturn;
 80027aa:	69fb      	ldr	r3, [r7, #28]
    }
 80027ac:	4618      	mov	r0, r3
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200001f8 	.word	0x200001f8

080027b8 <uxTaskBasePriorityGet>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) )

    UBaseType_t uxTaskBasePriorityGet( const TaskHandle_t xTask )
    {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        traceENTER_uxTaskBasePriorityGet( xTask );

        portBASE_TYPE_ENTER_CRITICAL();
 80027c0:	f003 fd46 	bl	8006250 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the base priority of the task
             * that called uxTaskBasePriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <uxTaskBasePriorityGet+0x18>
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <uxTaskBasePriorityGet+0x4c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e000      	b.n	80027d2 <uxTaskBasePriorityGet+0x1a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	617b      	str	r3, [r7, #20]
            configASSERT( pxTCB != NULL );
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <uxTaskBasePriorityGet+0x38>
    __asm volatile
 80027da:	f04f 0310 	mov.w	r3, #16
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	60fb      	str	r3, [r7, #12]
}
 80027ec:	bf00      	nop
 80027ee:	e7fe      	b.n	80027ee <uxTaskBasePriorityGet+0x36>

            uxReturn = pxTCB->uxBasePriority;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	613b      	str	r3, [r7, #16]
        }
        portBASE_TYPE_EXIT_CRITICAL();
 80027f6:	f003 fd5b 	bl	80062b0 <vPortExitCritical>

        traceRETURN_uxTaskBasePriorityGet( uxReturn );

        return uxReturn;
 80027fa:	693b      	ldr	r3, [r7, #16]
    }
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200001f8 	.word	0x200001f8

08002808 <uxTaskBasePriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) )

    UBaseType_t uxTaskBasePriorityGetFromISR( const TaskHandle_t xTask )
    {
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002810:	f003 fdfb 	bl	800640a <vPortValidateInterruptPriority>
    __asm volatile
 8002814:	f3ef 8211 	mrs	r2, BASEPRI
 8002818:	f04f 0310 	mov.w	r3, #16
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	61ba      	str	r2, [r7, #24]
 800282a:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 800282c:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
        {
            /* If null is passed in here then it is the base priority of the calling
             * task that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <uxTaskBasePriorityGetFromISR+0x34>
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <uxTaskBasePriorityGetFromISR+0x70>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e000      	b.n	800283e <uxTaskBasePriorityGetFromISR+0x36>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	623b      	str	r3, [r7, #32]
            configASSERT( pxTCB != NULL );
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <uxTaskBasePriorityGetFromISR+0x54>
    __asm volatile
 8002846:	f04f 0310 	mov.w	r3, #16
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	613b      	str	r3, [r7, #16]
}
 8002858:	bf00      	nop
 800285a:	e7fe      	b.n	800285a <uxTaskBasePriorityGetFromISR+0x52>

            uxReturn = pxTCB->uxBasePriority;
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f383 8811 	msr	BASEPRI, r3
}
 800286c:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_uxTaskBasePriorityGetFromISR( uxReturn );

        return uxReturn;
 800286e:	69fb      	ldr	r3, [r7, #28]
    }
 8002870:	4618      	mov	r0, r3
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200001f8 	.word	0x200001f8

0800287c <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
            BaseType_t xYieldForTask = pdFALSE;
        #endif

        traceENTER_vTaskPrioritySet( xTask, uxNewPriority );

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b37      	cmp	r3, #55	; 0x37
 800288e:	d90a      	bls.n	80028a6 <vTaskPrioritySet+0x2a>
    __asm volatile
 8002890:	f04f 0310 	mov.w	r3, #16
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	613b      	str	r3, [r7, #16]
}
 80028a2:	bf00      	nop
 80028a4:	e7fe      	b.n	80028a4 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b37      	cmp	r3, #55	; 0x37
 80028aa:	d901      	bls.n	80028b0 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028ac:	2337      	movs	r3, #55	; 0x37
 80028ae:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80028b0:	f003 fcce 	bl	8006250 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <vTaskPrioritySet+0x44>
 80028ba:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <vTaskPrioritySet+0x1a8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	e000      	b.n	80028c2 <vTaskPrioritySet+0x46>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	623b      	str	r3, [r7, #32]
            configASSERT( pxTCB != NULL );
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <vTaskPrioritySet+0x64>
    __asm volatile
 80028ca:	f04f 0310 	mov.w	r3, #16
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	60fb      	str	r3, [r7, #12]
}
 80028dc:	bf00      	nop
 80028de:	e7fe      	b.n	80028de <vTaskPrioritySet+0x62>

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	61fb      	str	r3, [r7, #28]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	f000 8093 	beq.w	8002a16 <vTaskPrioritySet+0x19a>
            {
                /* The priority change may have readied a task of higher
                 * priority than a running task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d90d      	bls.n	8002914 <vTaskPrioritySet+0x98>
                {
                    #if ( configNUMBER_OF_CORES == 1 )
                    {
                        if( pxTCB != pxCurrentTCB )
 80028f8:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <vTaskPrioritySet+0x1a8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a3a      	ldr	r2, [r7, #32]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d00f      	beq.n	8002922 <vTaskPrioritySet+0xa6>
                        {
                            /* The priority of a task other than the currently
                             * running task is being raised.  Is the priority being
                             * raised above that of the running task? */
                            if( uxNewPriority > pxCurrentTCB->uxPriority )
 8002902:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <vTaskPrioritySet+0x1a8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d909      	bls.n	8002922 <vTaskPrioritySet+0xa6>
                            {
                                xYieldRequired = pdTRUE;
 800290e:	2301      	movs	r3, #1
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
 8002912:	e006      	b.n	8002922 <vTaskPrioritySet+0xa6>
                         * perform a yield for this task later. */
                        xYieldForTask = pdTRUE;
                    }
                    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                }
                else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8002914:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <vTaskPrioritySet+0x1a8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a3a      	ldr	r2, [r7, #32]
 800291a:	429a      	cmp	r2, r3
 800291c:	d101      	bne.n	8002922 <vTaskPrioritySet+0xa6>
                     * is ready to execute. */
                    #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
                        if( pxTCB->xPreemptionDisable == pdFALSE )
                    #endif
                    {
                        xYieldRequired = pdTRUE;
 800291e:	2301      	movs	r3, #1
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	61bb      	str	r3, [r7, #24]
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority or the new priority
                     * is bigger than the inherited priority. */
                    if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->uxPriority ) )
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	429a      	cmp	r2, r3
 8002932:	d004      	beq.n	800293e <vTaskPrioritySet+0xc2>
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d902      	bls.n	8002944 <vTaskPrioritySet+0xc8>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db04      	blt.n	800295c <vTaskPrioritySet+0xe0>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) );
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	6959      	ldr	r1, [r3, #20]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4a2f      	ldr	r2, [pc, #188]	; (8002a28 <vTaskPrioritySet+0x1ac>)
 800296c:	4413      	add	r3, r2
 800296e:	4299      	cmp	r1, r3
 8002970:	d146      	bne.n	8002a00 <vTaskPrioritySet+0x184>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	3304      	adds	r3, #4
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fe6a 	bl	8000650 <uxListRemove>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <vTaskPrioritySet+0x1b0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d903      	bls.n	8002990 <vTaskPrioritySet+0x114>
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <vTaskPrioritySet+0x1b0>)
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	4924      	ldr	r1, [pc, #144]	; (8002a28 <vTaskPrioritySet+0x1ac>)
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3304      	adds	r3, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	3204      	adds	r2, #4
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	1d1a      	adds	r2, r3, #4
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <vTaskPrioritySet+0x1ac>)
 80029d4:	441a      	add	r2, r3
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	615a      	str	r2, [r3, #20]
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029de:	4912      	ldr	r1, [pc, #72]	; (8002a28 <vTaskPrioritySet+0x1ac>)
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6a3a      	ldr	r2, [r7, #32]
 80029ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029f0:	1c59      	adds	r1, r3, #1
 80029f2:	480d      	ldr	r0, [pc, #52]	; (8002a28 <vTaskPrioritySet+0x1ac>)
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4403      	add	r3, r0
 80029fe:	6019      	str	r1, [r3, #0]
                        xYieldForTask = pdFALSE;
                    }
                    #endif
                }

                if( xYieldRequired != pdFALSE )
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <vTaskPrioritySet+0x19a>
                {
                    /* The running task priority is set down. Request the task to yield. */
                    taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <vTaskPrioritySet+0x1b4>)
 8002a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002a16:	f003 fc4b 	bl	80062b0 <vPortExitCritical>

        traceRETURN_vTaskPrioritySet();
    }
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	; 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200001f8 	.word	0x200001f8
 8002a28:	200001fc 	.word	0x200001fc
 8002a2c:	200006d4 	.word	0x200006d4
 8002a30:	e000ed04 	.word	0xe000ed04

08002a34 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        traceENTER_vTaskSuspend( xTaskToSuspend );

        taskENTER_CRITICAL();
 8002a3c:	f003 fc08 	bl	8006250 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <vTaskSuspend+0x18>
 8002a46:	4b3e      	ldr	r3, [pc, #248]	; (8002b40 <vTaskSuspend+0x10c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	e000      	b.n	8002a4e <vTaskSuspend+0x1a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	61bb      	str	r3, [r7, #24]
            configASSERT( pxTCB != NULL );
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <vTaskSuspend+0x38>
    __asm volatile
 8002a56:	f04f 0310 	mov.w	r3, #16
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	613b      	str	r3, [r7, #16]
}
 8002a68:	bf00      	nop
 8002a6a:	e7fe      	b.n	8002a6a <vTaskSuspend+0x36>

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fded 	bl	8000650 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <vTaskSuspend+0x54>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3318      	adds	r3, #24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fde4 	bl	8000650 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	482d      	ldr	r0, [pc, #180]	; (8002b44 <vTaskSuspend+0x110>)
 8002a90:	f7fd fd81 	bl	8000596 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	e010      	b.n	8002abc <vTaskSuspend+0x88>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	33b8      	adds	r3, #184	; 0xb8
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d105      	bne.n	8002ab6 <vTaskSuspend+0x82>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	33b8      	adds	r3, #184	; 0xb8
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	ddeb      	ble.n	8002a9a <vTaskSuspend+0x66>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
        }
        taskEXIT_CRITICAL();
 8002ac2:	f003 fbf5 	bl	80062b0 <vPortExitCritical>

        #if ( configNUMBER_OF_CORES == 1 )
        {
            UBaseType_t uxCurrentListLength;

            if( xSchedulerRunning != pdFALSE )
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <vTaskSuspend+0x114>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <vTaskSuspend+0xa6>
            {
                /* Reset the next expected unblock time in case it referred to the
                 * task that is now in the Suspended state. */
                taskENTER_CRITICAL();
 8002ace:	f003 fbbf 	bl	8006250 <vPortEnterCritical>
                {
                    prvResetNextTaskUnblockTime();
 8002ad2:	f001 fba5 	bl	8004220 <prvResetNextTaskUnblockTime>
                }
                taskEXIT_CRITICAL();
 8002ad6:	f003 fbeb 	bl	80062b0 <vPortExitCritical>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( pxTCB == pxCurrentTCB )
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <vTaskSuspend+0x10c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d129      	bne.n	8002b38 <vTaskSuspend+0x104>
            {
                if( xSchedulerRunning != pdFALSE )
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <vTaskSuspend+0x114>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d017      	beq.n	8002b1c <vTaskSuspend+0xe8>
                {
                    /* The current task has just been suspended. */
                    configASSERT( uxSchedulerSuspended == 0 );
 8002aec:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <vTaskSuspend+0x118>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <vTaskSuspend+0xd6>
    __asm volatile
 8002af4:	f04f 0310 	mov.w	r3, #16
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	60fb      	str	r3, [r7, #12]
}
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <vTaskSuspend+0xd4>
                    portYIELD_WITHIN_API();
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <vTaskSuspend+0x11c>)
 8002b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskSuspend();
    }
 8002b1a:	e00d      	b.n	8002b38 <vTaskSuspend+0x104>
                    uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <vTaskSuspend+0x110>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
                    if( uxCurrentListLength == uxCurrentNumberOfTasks )
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <vTaskSuspend+0x120>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d103      	bne.n	8002b34 <vTaskSuspend+0x100>
                        pxCurrentTCB = NULL;
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <vTaskSuspend+0x10c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
    }
 8002b32:	e001      	b.n	8002b38 <vTaskSuspend+0x104>
                        vTaskSwitchContext();
 8002b34:	f000 fe12 	bl	800375c <vTaskSwitchContext>
    }
 8002b38:	bf00      	nop
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200001f8 	.word	0x200001f8
 8002b44:	200006b8 	.word	0x200006b8
 8002b48:	200006d8 	.word	0x200006d8
 8002b4c:	200006f4 	.word	0x200006f4
 8002b50:	e000ed04 	.word	0xe000ed04
 8002b54:	200006cc 	.word	0x200006cc

08002b58 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60fb      	str	r3, [r7, #12]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <prvTaskIsTaskSuspended+0x2c>
    __asm volatile
 8002b6e:	f04f 0310 	mov.w	r3, #16
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	60bb      	str	r3, [r7, #8]
}
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <prvTaskIsTaskSuspended+0x84>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11e      	bne.n	8002bcc <prvTaskIsTaskSuspended+0x74>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <prvTaskIsTaskSuspended+0x88>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d019      	beq.n	8002bcc <prvTaskIsTaskSuspended+0x74>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because it is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d115      	bne.n	8002bcc <prvTaskIsTaskSuspended+0x74>
                        /* The task does not appear on the event list item of
                         * and of the RTOS objects, but could still be in the
                         * blocked state if it is waiting on its notification
                         * rather than waiting on an object.  If not, is
                         * suspended. */
                        xReturn = pdTRUE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]

                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	e00d      	b.n	8002bc6 <prvTaskIsTaskSuspended+0x6e>
                        {
                            if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	33b8      	adds	r3, #184	; 0xb8
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d102      	bne.n	8002bc0 <prvTaskIsTaskSuspended+0x68>
                            {
                                xReturn = pdFALSE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
                                break;
 8002bbe:	e005      	b.n	8002bcc <prvTaskIsTaskSuspended+0x74>
                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	ddee      	ble.n	8002baa <prvTaskIsTaskSuspended+0x52>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002bcc:	697b      	ldr	r3, [r7, #20]
    }
 8002bce:	4618      	mov	r0, r3
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	200006b8 	.word	0x200006b8
 8002be0:	2000068c 	.word	0x2000068c

08002be4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskResume( xTaskToResume );

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <vTaskResume+0x28>
    __asm volatile
 8002bf6:	f04f 0310 	mov.w	r3, #16
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	60fb      	str	r3, [r7, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <vTaskResume+0x26>

        #if ( configNUMBER_OF_CORES == 1 )

            /* The parameter cannot be NULL as it is impossible to resume the
             * currently executing task. */
            if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <vTaskResume+0x100>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d062      	beq.n	8002cdc <vTaskResume+0xf8>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05f      	beq.n	8002cdc <vTaskResume+0xf8>
             * to check their run state here. Therefore, we get into a critical
             * section and check if the task is actually suspended or not. */
            if( pxTCB != NULL )
        #endif
        {
            taskENTER_CRITICAL();
 8002c1c:	f003 fb18 	bl	8006250 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002c20:	6978      	ldr	r0, [r7, #20]
 8002c22:	f7ff ff99 	bl	8002b58 <prvTaskIsTaskSuspended>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d055      	beq.n	8002cd8 <vTaskResume+0xf4>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fd0d 	bl	8000650 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <vTaskResume+0x104>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d903      	bls.n	8002c4a <vTaskResume+0x66>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	4a28      	ldr	r2, [pc, #160]	; (8002ce8 <vTaskResume+0x104>)
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4e:	4927      	ldr	r1, [pc, #156]	; (8002cec <vTaskResume+0x108>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	3204      	adds	r2, #4
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	1d1a      	adds	r2, r3, #4
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <vTaskResume+0x108>)
 8002c8e:	441a      	add	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	615a      	str	r2, [r3, #20]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	4914      	ldr	r1, [pc, #80]	; (8002cec <vTaskResume+0x108>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002caa:	1c59      	adds	r1, r3, #1
 8002cac:	480f      	ldr	r0, [pc, #60]	; (8002cec <vTaskResume+0x108>)
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4403      	add	r3, r0
 8002cb8:	6019      	str	r1, [r3, #0]

                    /* This yield may not cause the task just resumed to run,
                     * but will leave the lists in the correct state for the
                     * next yield. */
                    taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <vTaskResume+0x100>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d207      	bcs.n	8002cd8 <vTaskResume+0xf4>
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <vTaskResume+0x10c>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002cd8:	f003 faea 	bl	80062b0 <vPortExitCritical>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskResume();
    }
 8002cdc:	bf00      	nop
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	200001f8 	.word	0x200001f8
 8002ce8:	200006d4 	.word	0x200006d4
 8002cec:	200001fc 	.word	0x200001fc
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	623b      	str	r3, [r7, #32]
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskResumeFromISR( xTaskToResume );

        configASSERT( xTaskToResume );
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <xTaskResumeFromISR+0x2c>
    __asm volatile
 8002d0a:	f04f 0310 	mov.w	r3, #16
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	617b      	str	r3, [r7, #20]
}
 8002d1c:	bf00      	nop
 8002d1e:	e7fe      	b.n	8002d1e <xTaskResumeFromISR+0x2a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d20:	f003 fb73 	bl	800640a <vPortValidateInterruptPriority>
    __asm volatile
 8002d24:	f3ef 8211 	mrs	r2, BASEPRI
 8002d28:	f04f 0310 	mov.w	r3, #16
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	613a      	str	r2, [r7, #16]
 8002d3a:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 8002d3c:	693b      	ldr	r3, [r7, #16]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8002d3e:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002d40:	6a38      	ldr	r0, [r7, #32]
 8002d42:	f7ff ff09 	bl	8002b58 <prvTaskIsTaskSuspended>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05d      	beq.n	8002e08 <xTaskResumeFromISR+0x114>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002d4c:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <xTaskResumeFromISR+0x12c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d153      	bne.n	8002dfc <xTaskResumeFromISR+0x108>
                {
                    #if ( configNUMBER_OF_CORES == 1 )
                    {
                        /* Ready lists can be accessed so move the task from the
                         * suspended list to the ready list directly. */
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d58:	4b32      	ldr	r3, [pc, #200]	; (8002e24 <xTaskResumeFromISR+0x130>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d904      	bls.n	8002d6c <xTaskResumeFromISR+0x78>
                        {
                            xYieldRequired = pdTRUE;
 8002d62:	2301      	movs	r3, #1
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24

                            /* Mark that a yield is pending in case the user is not
                             * using the return value to initiate a context switch
                             * from the ISR using the port specific portYIELD_FROM_ISR(). */
                            xYieldPendings[ 0 ] = pdTRUE;
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <xTaskResumeFromISR+0x134>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fc6d 	bl	8000650 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <xTaskResumeFromISR+0x138>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d903      	bls.n	8002d8a <xTaskResumeFromISR+0x96>
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <xTaskResumeFromISR+0x138>)
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8e:	4928      	ldr	r1, [pc, #160]	; (8002e30 <xTaskResumeFromISR+0x13c>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	6a3a      	ldr	r2, [r7, #32]
 8002db4:	3204      	adds	r2, #4
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	1d1a      	adds	r2, r3, #4
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <xTaskResumeFromISR+0x13c>)
 8002dce:	441a      	add	r2, r3
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	615a      	str	r2, [r3, #20]
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd8:	4915      	ldr	r1, [pc, #84]	; (8002e30 <xTaskResumeFromISR+0x13c>)
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6a3a      	ldr	r2, [r7, #32]
 8002de8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dea:	1c59      	adds	r1, r3, #1
 8002dec:	4810      	ldr	r0, [pc, #64]	; (8002e30 <xTaskResumeFromISR+0x13c>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4403      	add	r3, r0
 8002df8:	6019      	str	r1, [r3, #0]
 8002dfa:	e005      	b.n	8002e08 <xTaskResumeFromISR+0x114>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	3318      	adds	r3, #24
 8002e00:	4619      	mov	r1, r3
 8002e02:	480c      	ldr	r0, [pc, #48]	; (8002e34 <xTaskResumeFromISR+0x140>)
 8002e04:	f7fd fbc7 	bl	8000596 <vListInsertEnd>
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f383 8811 	msr	BASEPRI, r3
}
 8002e12:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskResumeFromISR( xYieldRequired );

        return xYieldRequired;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002e16:	4618      	mov	r0, r3
 8002e18:	3728      	adds	r7, #40	; 0x28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200006f4 	.word	0x200006f4
 8002e24:	200001f8 	.word	0x200001f8
 8002e28:	200006e0 	.word	0x200006e0
 8002e2c:	200006d4 	.word	0x200006d4
 8002e30:	200001fc 	.word	0x200001fc
 8002e34:	2000068c 	.word	0x2000068c

08002e38 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b090      	sub	sp, #64	; 0x40
 8002e3c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	f107 0314 	add.w	r3, r7, #20
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5a:	e013      	b.n	8002e84 <prvCreateIdleTasks+0x4c>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002e5c:	4a2e      	ldr	r2, [pc, #184]	; (8002f18 <prvCreateIdleTasks+0xe0>)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	4413      	add	r3, r2
 8002e62:	7819      	ldrb	r1, [r3, #0]
 8002e64:	f107 0210 	add.w	r2, r7, #16
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	4413      	add	r3, r2
 8002e6c:	460a      	mov	r2, r1
 8002e6e:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002e70:	f107 0210 	add.w	r2, r7, #16
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	4413      	add	r3, r2
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <prvCreateIdleTasks+0x54>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	3301      	adds	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	2b0e      	cmp	r3, #14
 8002e88:	d9e8      	bls.n	8002e5c <prvCreateIdleTasks+0x24>
 8002e8a:	e000      	b.n	8002e8e <prvCreateIdleTasks+0x56>
        {
            break;
 8002e8c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8002e8e:	f107 0210 	add.w	r2, r7, #16
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	4413      	add	r3, r2
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9e:	e031      	b.n	8002f04 <prvCreateIdleTasks+0xcc>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <prvCreateIdleTasks+0xe4>)
 8002ea2:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002eac:	1d3a      	adds	r2, r7, #4
 8002eae:	f107 0108 	add.w	r1, r7, #8
 8002eb2:	f107 030c 	add.w	r3, r7, #12
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 f9e0 	bl	800527c <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	f107 0110 	add.w	r1, r7, #16
 8002ec6:	9202      	str	r2, [sp, #8]
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a38      	ldr	r0, [r7, #32]
 8002ed4:	f7ff f87e 	bl	8001fd4 <xTaskCreateStatic>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4911      	ldr	r1, [pc, #68]	; (8002f20 <prvCreateIdleTasks+0xe8>)
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002ee2:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <prvCreateIdleTasks+0xe8>)
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <prvCreateIdleTasks+0xbc>
            {
                xReturn = pdPASS;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef2:	e001      	b.n	8002ef8 <prvCreateIdleTasks+0xc0>
            }
            else
            {
                xReturn = pdFAIL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d106      	bne.n	8002f0c <prvCreateIdleTasks+0xd4>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	3301      	adds	r3, #1
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	ddca      	ble.n	8002ea0 <prvCreateIdleTasks+0x68>
 8002f0a:	e000      	b.n	8002f0e <prvCreateIdleTasks+0xd6>
        {
            break;
 8002f0c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3730      	adds	r7, #48	; 0x30
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	08006fd4 	.word	0x08006fd4
 8002f1c:	08003e93 	.word	0x08003e93
 8002f20:	200006f0 	.word	0x200006f0

08002f24 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002f2a:	f7ff ff85 	bl	8002e38 <prvCreateIdleTasks>
 8002f2e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d102      	bne.n	8002f3c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002f36:	f002 fa25 	bl	8005384 <xTimerCreateTimerTask>
 8002f3a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d11b      	bne.n	8002f7a <vTaskStartScheduler+0x56>
    __asm volatile
 8002f42:	f04f 0310 	mov.w	r3, #16
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	60bb      	str	r3, [r7, #8]
}
 8002f54:	bf00      	nop

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <vTaskStartScheduler+0x80>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3354      	adds	r3, #84	; 0x54
 8002f5c:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <vTaskStartScheduler+0x84>)
 8002f5e:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <vTaskStartScheduler+0x88>)
 8002f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f66:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <vTaskStartScheduler+0x8c>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <vTaskStartScheduler+0x90>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002f74:	f003 f867 	bl	8006046 <xPortStartScheduler>
 8002f78:	e00e      	b.n	8002f98 <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f80:	d10a      	bne.n	8002f98 <vTaskStartScheduler+0x74>
    __asm volatile
 8002f82:	f04f 0310 	mov.w	r3, #16
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	607b      	str	r3, [r7, #4]
}
 8002f94:	bf00      	nop
 8002f96:	e7fe      	b.n	8002f96 <vTaskStartScheduler+0x72>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <vTaskStartScheduler+0x94>)
 8002f9a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	200001f8 	.word	0x200001f8
 8002fa8:	20000014 	.word	0x20000014
 8002fac:	200006ec 	.word	0x200006ec
 8002fb0:	200006d8 	.word	0x200006d8
 8002fb4:	200006d0 	.word	0x200006d0
 8002fb8:	20000008 	.word	0x20000008

08002fbc <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
        BaseType_t xCoreID;

        #if ( configUSE_TIMERS == 1 )
        {
            /* Delete the timer task created by the kernel. */
            vTaskDelete( xTimerGetTimerDaemonTaskHandle() );
 8002fc2:	f002 fb51 	bl	8005668 <xTimerGetTimerDaemonTaskHandle>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f9c9 	bl	8002360 <vTaskDelete>
        }
        #endif /* #if ( configUSE_TIMERS == 1 ) */

        /* Delete Idle tasks created by the kernel.*/
        for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	e009      	b.n	8002fe8 <vTaskEndScheduler+0x2c>
        {
            vTaskDelete( xIdleTaskHandles[ xCoreID ] );
 8002fd4:	4a10      	ldr	r2, [pc, #64]	; (8003018 <vTaskEndScheduler+0x5c>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff f9bf 	bl	8002360 <vTaskDelete>
        for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	ddf2      	ble.n	8002fd4 <vTaskEndScheduler+0x18>

        /* Idle task is responsible for reclaiming the resources of the tasks in
         * xTasksWaitingTermination list. Since the idle task is now deleted and
         * no longer going to run, we need to reclaim resources of all the tasks
         * in the xTasksWaitingTermination list. */
        prvCheckTasksWaitingTermination();
 8002fee:	f000 ffa7 	bl	8003f40 <prvCheckTasksWaitingTermination>
    __asm volatile
 8002ff2:	f04f 0310 	mov.w	r3, #16
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	603b      	str	r3, [r7, #0]
}
 8003004:	bf00      	nop

    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <vTaskEndScheduler+0x60>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

    /* This function must be called from a task and the application is
     * responsible for deleting that task after the scheduler is stopped. */
    vPortEndScheduler();
 800300c:	f003 f904 	bl	8006218 <vPortEndScheduler>

    traceRETURN_vTaskEndScheduler();
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200006f0 	.word	0x200006f0
 800301c:	200006d8 	.word	0x200006d8

08003020 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <vTaskSuspendAll+0x18>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	4a03      	ldr	r2, [pc, #12]	; (8003038 <vTaskSuspendAll+0x18>)
 800302c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	200006f4 	.word	0x200006f4

0800303c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800304a:	f003 f901 	bl	8006250 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003052:	4b75      	ldr	r3, [pc, #468]	; (8003228 <xTaskResumeAll+0x1ec>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <xTaskResumeAll+0x34>
    __asm volatile
 800305a:	f04f 0310 	mov.w	r3, #16
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	603b      	str	r3, [r7, #0]
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003070:	4b6d      	ldr	r3, [pc, #436]	; (8003228 <xTaskResumeAll+0x1ec>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3b01      	subs	r3, #1
 8003076:	4a6c      	ldr	r2, [pc, #432]	; (8003228 <xTaskResumeAll+0x1ec>)
 8003078:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800307a:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <xTaskResumeAll+0x1ec>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 80cb 	bne.w	800321a <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003084:	4b69      	ldr	r3, [pc, #420]	; (800322c <xTaskResumeAll+0x1f0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80c6 	beq.w	800321a <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800308e:	e08f      	b.n	80031b0 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003090:	4b67      	ldr	r3, [pc, #412]	; (8003230 <xTaskResumeAll+0x1f4>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	6a12      	ldr	r2, [r2, #32]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	69d2      	ldr	r2, [r2, #28]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3318      	adds	r3, #24
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d103      	bne.n	80030c6 <xTaskResumeAll+0x8a>
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	2200      	movs	r2, #0
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	1e5a      	subs	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	68d2      	ldr	r2, [r2, #12]
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	3304      	adds	r3, #4
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d103      	bne.n	8003104 <xTaskResumeAll+0xc8>
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2200      	movs	r2, #0
 8003108:	615a      	str	r2, [r3, #20]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	4b46      	ldr	r3, [pc, #280]	; (8003234 <xTaskResumeAll+0x1f8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d903      	bls.n	8003128 <xTaskResumeAll+0xec>
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4a43      	ldr	r2, [pc, #268]	; (8003234 <xTaskResumeAll+0x1f8>)
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	4942      	ldr	r1, [pc, #264]	; (8003238 <xTaskResumeAll+0x1fc>)
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3304      	adds	r3, #4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	60da      	str	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	3204      	adds	r2, #4
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	1d1a      	adds	r2, r3, #4
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4a33      	ldr	r2, [pc, #204]	; (8003238 <xTaskResumeAll+0x1fc>)
 800316c:	441a      	add	r2, r3
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	615a      	str	r2, [r3, #20]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003176:	4930      	ldr	r1, [pc, #192]	; (8003238 <xTaskResumeAll+0x1fc>)
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003188:	1c59      	adds	r1, r3, #1
 800318a:	482b      	ldr	r0, [pc, #172]	; (8003238 <xTaskResumeAll+0x1fc>)
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4403      	add	r3, r0
 8003196:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	4b27      	ldr	r3, [pc, #156]	; (800323c <xTaskResumeAll+0x200>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d904      	bls.n	80031b0 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80031a6:	4a26      	ldr	r2, [pc, #152]	; (8003240 <xTaskResumeAll+0x204>)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2101      	movs	r1, #1
 80031ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <xTaskResumeAll+0x1f4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f47f af6b 	bne.w	8003090 <xTaskResumeAll+0x54>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80031c0:	f001 f82e 	bl	8004220 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <xTaskResumeAll+0x208>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80031d0:	f000 f9aa 	bl	8003528 <xTaskIncrementTick>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <xTaskResumeAll+0x204>)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2101      	movs	r1, #1
 80031e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ef      	bne.n	80031d0 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <xTaskResumeAll+0x208>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <xTaskResumeAll+0x204>)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003202:	2301      	movs	r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <xTaskResumeAll+0x200>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <xTaskResumeAll+0x20c>)
 800320c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800321a:	f003 f849 	bl	80062b0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800321e:	69bb      	ldr	r3, [r7, #24]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	200006f4 	.word	0x200006f4
 800322c:	200006cc 	.word	0x200006cc
 8003230:	2000068c 	.word	0x2000068c
 8003234:	200006d4 	.word	0x200006d4
 8003238:	200001fc 	.word	0x200001fc
 800323c:	200001f8 	.word	0x200001f8
 8003240:	200006e0 	.word	0x200006e0
 8003244:	200006dc 	.word	0x200006dc
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <xTaskGetTickCount+0x1c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	200006d0 	.word	0x200006d0

0800326c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003272:	f003 f8ca 	bl	800640a <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <xTaskGetTickCountFromISR+0x20>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
 8003280:	683b      	ldr	r3, [r7, #0]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	200006d0 	.word	0x200006d0

08003290 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <uxTaskGetNumberOfTasks+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	200006cc 	.word	0x200006cc

080032a8 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <pcTaskGetName+0x14>
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <pcTaskGetName+0x44>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	e000      	b.n	80032be <pcTaskGetName+0x16>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB != NULL );
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <pcTaskGetName+0x34>
    __asm volatile
 80032c6:	f04f 0310 	mov.w	r3, #16
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	60bb      	str	r3, [r7, #8]
}
 80032d8:	bf00      	nop
 80032da:	e7fe      	b.n	80032da <pcTaskGetName+0x32>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3334      	adds	r3, #52	; 0x34
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	200001f8 	.word	0x200001f8

080032f0 <xTaskGetStaticBuffers>:
#if ( configSUPPORT_STATIC_ALLOCATION == 1 )

    BaseType_t xTaskGetStaticBuffers( TaskHandle_t xTask,
                                      StackType_t ** ppuxStackBuffer,
                                      StaticTask_t ** ppxTaskBuffer )
    {
 80032f0:	b480      	push	{r7}
 80032f2:	b08b      	sub	sp, #44	; 0x2c
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;
        TCB_t * pxTCB;

        traceENTER_xTaskGetStaticBuffers( xTask, ppuxStackBuffer, ppxTaskBuffer );

        configASSERT( ppuxStackBuffer != NULL );
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <xTaskGetStaticBuffers+0x28>
    __asm volatile
 8003302:	f04f 0310 	mov.w	r3, #16
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	61fb      	str	r3, [r7, #28]
}
 8003314:	bf00      	nop
 8003316:	e7fe      	b.n	8003316 <xTaskGetStaticBuffers+0x26>
        configASSERT( ppxTaskBuffer != NULL );
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <xTaskGetStaticBuffers+0x44>
    __asm volatile
 800331e:	f04f 0310 	mov.w	r3, #16
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	61bb      	str	r3, [r7, #24]
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <xTaskGetStaticBuffers+0x42>

        pxTCB = prvGetTCBFromHandle( xTask );
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <xTaskGetStaticBuffers+0x50>
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <xTaskGetStaticBuffers+0xc0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	e000      	b.n	8003342 <xTaskGetStaticBuffers+0x52>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	623b      	str	r3, [r7, #32]
        configASSERT( pxTCB != NULL );
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <xTaskGetStaticBuffers+0x70>
    __asm volatile
 800334a:	f04f 0310 	mov.w	r3, #16
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	617b      	str	r3, [r7, #20]
}
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xTaskGetStaticBuffers+0x6e>

        #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
        {
            if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB )
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003366:	2b02      	cmp	r3, #2
 8003368:	d109      	bne.n	800337e <xTaskGetStaticBuffers+0x8e>
            {
                *ppuxStackBuffer = pxTCB->pxStack;
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	601a      	str	r2, [r3, #0]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	601a      	str	r2, [r3, #0]
                xReturn = pdTRUE;
 8003378:	2301      	movs	r3, #1
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
 800337c:	e010      	b.n	80033a0 <xTaskGetStaticBuffers+0xb0>
            }
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003384:	2b01      	cmp	r3, #1
 8003386:	d109      	bne.n	800339c <xTaskGetStaticBuffers+0xac>
            {
                *ppuxStackBuffer = pxTCB->pxStack;
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	601a      	str	r2, [r3, #0]
                *ppxTaskBuffer = NULL;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
                xReturn = pdTRUE;
 8003396:	2301      	movs	r3, #1
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	e001      	b.n	80033a0 <xTaskGetStaticBuffers+0xb0>
            }
            else
            {
                xReturn = pdFALSE;
 800339c:	2300      	movs	r3, #0
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 */

        traceRETURN_xTaskGetStaticBuffers( xReturn );

        return xReturn;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80033a2:	4618      	mov	r0, r3
 80033a4:	372c      	adds	r7, #44	; 0x2c
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	200001f8 	.word	0x200001f8

080033b4 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	2338      	movs	r3, #56	; 0x38
 80033c6:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 80033c8:	f7ff fe2a 	bl	8003020 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80033cc:	4b3a      	ldr	r3, [pc, #232]	; (80034b8 <uxTaskGetSystemState+0x104>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d368      	bcc.n	80034a8 <uxTaskGetSystemState+0xf4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	3b01      	subs	r3, #1
 80033da:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1898      	adds	r0, r3, r2
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4a31      	ldr	r2, [pc, #196]	; (80034bc <uxTaskGetSystemState+0x108>)
 80033f8:	4413      	add	r3, r2
 80033fa:	2201      	movs	r2, #1
 80033fc:	4619      	mov	r1, r3
 80033fe:	f000 fe63 	bl	80040c8 <prvListTasksWithinSingleList>
 8003402:	4602      	mov	r2, r0
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	4413      	add	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e2      	bne.n	80033d6 <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <uxTaskGetSystemState+0x10c>)
 8003422:	6811      	ldr	r1, [r2, #0]
 8003424:	2202      	movs	r2, #2
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fe4e 	bl	80040c8 <prvListTasksWithinSingleList>
 800342c:	4602      	mov	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	4413      	add	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <uxTaskGetSystemState+0x110>)
 8003446:	6811      	ldr	r1, [r2, #0]
 8003448:	2202      	movs	r2, #2
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fe3c 	bl	80040c8 <prvListTasksWithinSingleList>
 8003450:	4602      	mov	r2, r0
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	4413      	add	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	2204      	movs	r2, #4
 800346a:	4917      	ldr	r1, [pc, #92]	; (80034c8 <uxTaskGetSystemState+0x114>)
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fe2b 	bl	80040c8 <prvListTasksWithinSingleList>
 8003472:	4602      	mov	r2, r0
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	4413      	add	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task in the Suspended state. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	461a      	mov	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	2203      	movs	r2, #3
 800348c:	490f      	ldr	r1, [pc, #60]	; (80034cc <uxTaskGetSystemState+0x118>)
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fe1a 	bl	80040c8 <prvListTasksWithinSingleList>
 8003494:	4602      	mov	r2, r0
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	4413      	add	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
                        #endif
                    }
                }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                {
                    if( pulTotalRunTime != NULL )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <uxTaskGetSystemState+0xf4>
                    {
                        *pulTotalRunTime = 0;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 80034a8:	f7ff fdc8 	bl	800303c <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 80034ac:	697b      	ldr	r3, [r7, #20]
    }
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200006cc 	.word	0x200006cc
 80034bc:	200001fc 	.word	0x200001fc
 80034c0:	20000684 	.word	0x20000684
 80034c4:	20000688 	.word	0x20000688
 80034c8:	200006a0 	.word	0x200006a0
 80034cc:	200006b8 	.word	0x200006b8

080034d0 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

    traceENTER_xTaskCatchUpTicks( xTicksToCatchUp );

    /* Must not be called with the scheduler suspended as the implementation
     * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
    configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <xTaskCatchUpTicks+0x50>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <xTaskCatchUpTicks+0x26>
    __asm volatile
 80034e0:	f04f 0310 	mov.w	r3, #16
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	60bb      	str	r3, [r7, #8]
}
 80034f2:	bf00      	nop
 80034f4:	e7fe      	b.n	80034f4 <xTaskCatchUpTicks+0x24>

    /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
    vTaskSuspendAll();
 80034f6:	f7ff fd93 	bl	8003020 <vTaskSuspendAll>

    /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
    taskENTER_CRITICAL();
 80034fa:	f002 fea9 	bl	8006250 <vPortEnterCritical>
    {
        xPendedTicks += xTicksToCatchUp;
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <xTaskCatchUpTicks+0x54>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	4a07      	ldr	r2, [pc, #28]	; (8003524 <xTaskCatchUpTicks+0x54>)
 8003508:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 800350a:	f002 fed1 	bl	80062b0 <vPortExitCritical>
    xYieldOccurred = xTaskResumeAll();
 800350e:	f7ff fd95 	bl	800303c <xTaskResumeAll>
 8003512:	60f8      	str	r0, [r7, #12]

    traceRETURN_xTaskCatchUpTicks( xYieldOccurred );

    return xYieldOccurred;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200006f4 	.word	0x200006f4
 8003524:	200006dc 	.word	0x200006dc

08003528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003532:	4b7f      	ldr	r3, [pc, #508]	; (8003730 <xTaskIncrementTick+0x208>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 80ef 	bne.w	800371a <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800353c:	4b7d      	ldr	r3, [pc, #500]	; (8003734 <xTaskIncrementTick+0x20c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003544:	4a7b      	ldr	r2, [pc, #492]	; (8003734 <xTaskIncrementTick+0x20c>)
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d120      	bne.n	8003592 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003550:	4b79      	ldr	r3, [pc, #484]	; (8003738 <xTaskIncrementTick+0x210>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <xTaskIncrementTick+0x48>
    __asm volatile
 800355a:	f04f 0310 	mov.w	r3, #16
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	607b      	str	r3, [r7, #4]
}
 800356c:	bf00      	nop
 800356e:	e7fe      	b.n	800356e <xTaskIncrementTick+0x46>
 8003570:	4b71      	ldr	r3, [pc, #452]	; (8003738 <xTaskIncrementTick+0x210>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	4b71      	ldr	r3, [pc, #452]	; (800373c <xTaskIncrementTick+0x214>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6f      	ldr	r2, [pc, #444]	; (8003738 <xTaskIncrementTick+0x210>)
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4a6f      	ldr	r2, [pc, #444]	; (800373c <xTaskIncrementTick+0x214>)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b6e      	ldr	r3, [pc, #440]	; (8003740 <xTaskIncrementTick+0x218>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	4a6d      	ldr	r2, [pc, #436]	; (8003740 <xTaskIncrementTick+0x218>)
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	f000 fe47 	bl	8004220 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003592:	4b6c      	ldr	r3, [pc, #432]	; (8003744 <xTaskIncrementTick+0x21c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	429a      	cmp	r2, r3
 800359a:	f0c0 80a9 	bcc.w	80036f0 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800359e:	4b66      	ldr	r3, [pc, #408]	; (8003738 <xTaskIncrementTick+0x210>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80035a8:	4b66      	ldr	r3, [pc, #408]	; (8003744 <xTaskIncrementTick+0x21c>)
 80035aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035ae:	601a      	str	r2, [r3, #0]
                    break;
 80035b0:	e09e      	b.n	80036f0 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035b2:	4b61      	ldr	r3, [pc, #388]	; (8003738 <xTaskIncrementTick+0x210>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80035c2:	6a3a      	ldr	r2, [r7, #32]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d203      	bcs.n	80035d2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035ca:	4a5e      	ldr	r2, [pc, #376]	; (8003744 <xTaskIncrementTick+0x21c>)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	6013      	str	r3, [r2, #0]
                        break;
 80035d0:	e08e      	b.n	80036f0 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	68d2      	ldr	r2, [r2, #12]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	3304      	adds	r3, #4
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d103      	bne.n	8003600 <xTaskIncrementTick+0xd8>
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2200      	movs	r2, #0
 8003604:	615a      	str	r2, [r3, #20]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1e5a      	subs	r2, r3, #1
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01e      	beq.n	8003656 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	6a12      	ldr	r2, [r2, #32]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	69d2      	ldr	r2, [r2, #28]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3318      	adds	r3, #24
 800363a:	429a      	cmp	r2, r3
 800363c:	d103      	bne.n	8003646 <xTaskIncrementTick+0x11e>
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2200      	movs	r2, #0
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	1e5a      	subs	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <xTaskIncrementTick+0x220>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d903      	bls.n	800366a <xTaskIncrementTick+0x142>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	4a38      	ldr	r2, [pc, #224]	; (8003748 <xTaskIncrementTick+0x220>)
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366e:	4937      	ldr	r1, [pc, #220]	; (800374c <xTaskIncrementTick+0x224>)
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3304      	adds	r3, #4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	3204      	adds	r2, #4
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4a27      	ldr	r2, [pc, #156]	; (800374c <xTaskIncrementTick+0x224>)
 80036ae:	441a      	add	r2, r3
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	615a      	str	r2, [r3, #20]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4924      	ldr	r1, [pc, #144]	; (800374c <xTaskIncrementTick+0x224>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036ca:	1c59      	adds	r1, r3, #1
 80036cc:	481f      	ldr	r0, [pc, #124]	; (800374c <xTaskIncrementTick+0x224>)
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4403      	add	r3, r0
 80036d8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036de:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <xTaskIncrementTick+0x228>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f67f af5a 	bls.w	800359e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80036ea:	2301      	movs	r3, #1
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ee:	e756      	b.n	800359e <xTaskIncrementTick+0x76>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <xTaskIncrementTick+0x228>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	4915      	ldr	r1, [pc, #84]	; (800374c <xTaskIncrementTick+0x224>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d901      	bls.n	800370c <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <xTaskIncrementTick+0x22c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
 8003718:	e004      	b.n	8003724 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <xTaskIncrementTick+0x230>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3301      	adds	r3, #1
 8003720:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <xTaskIncrementTick+0x230>)
 8003722:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003726:	4618      	mov	r0, r3
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200006f4 	.word	0x200006f4
 8003734:	200006d0 	.word	0x200006d0
 8003738:	20000684 	.word	0x20000684
 800373c:	20000688 	.word	0x20000688
 8003740:	200006e4 	.word	0x200006e4
 8003744:	200006ec 	.word	0x200006ec
 8003748:	200006d4 	.word	0x200006d4
 800374c:	200001fc 	.word	0x200001fc
 8003750:	200001f8 	.word	0x200001f8
 8003754:	200006e0 	.word	0x200006e0
 8003758:	200006dc 	.word	0x200006dc

0800375c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003762:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <vTaskSwitchContext+0xb4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800376a:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <vTaskSwitchContext+0xb8>)
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003770:	e047      	b.n	8003802 <vTaskSwitchContext+0xa6>
            xYieldPendings[ 0 ] = pdFALSE;
 8003772:	4b28      	ldr	r3, [pc, #160]	; (8003814 <vTaskSwitchContext+0xb8>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003778:	4b27      	ldr	r3, [pc, #156]	; (8003818 <vTaskSwitchContext+0xbc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e010      	b.n	80037a2 <vTaskSwitchContext+0x46>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <vTaskSwitchContext+0x40>
    __asm volatile
 8003786:	f04f 0310 	mov.w	r3, #16
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	607b      	str	r3, [r7, #4]
}
 8003798:	bf00      	nop
 800379a:	e7fe      	b.n	800379a <vTaskSwitchContext+0x3e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3b01      	subs	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	491e      	ldr	r1, [pc, #120]	; (800381c <vTaskSwitchContext+0xc0>)
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0e4      	beq.n	8003780 <vTaskSwitchContext+0x24>
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a16      	ldr	r2, [pc, #88]	; (800381c <vTaskSwitchContext+0xc0>)
 80037c2:	4413      	add	r3, r2
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	3308      	adds	r3, #8
 80037d8:	429a      	cmp	r2, r3
 80037da:	d103      	bne.n	80037e4 <vTaskSwitchContext+0x88>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <vTaskSwitchContext+0xc4>)
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <vTaskSwitchContext+0xbc>)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <vTaskSwitchContext+0xc4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
                configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <vTaskSwitchContext+0xc4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3354      	adds	r3, #84	; 0x54
 80037fe:	4a09      	ldr	r2, [pc, #36]	; (8003824 <vTaskSwitchContext+0xc8>)
 8003800:	6013      	str	r3, [r2, #0]
    }
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	200006f4 	.word	0x200006f4
 8003814:	200006e0 	.word	0x200006e0
 8003818:	200006d4 	.word	0x200006d4
 800381c:	200001fc 	.word	0x200001fc
 8003820:	200001f8 	.word	0x200001f8
 8003824:	20000014 	.word	0x20000014

08003828 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <vTaskPlaceOnEventList+0x26>
    __asm volatile
 8003838:	f04f 0310 	mov.w	r3, #16
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	60fb      	str	r3, [r7, #12]
}
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <vTaskPlaceOnEventList+0x44>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3318      	adds	r3, #24
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fc fec1 	bl	80005de <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800385c:	2101      	movs	r1, #1
 800385e:	6838      	ldr	r0, [r7, #0]
 8003860:	f001 fc9c 	bl	800519c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200001f8 	.word	0x200001f8

08003870 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <vTaskPlaceOnUnorderedEventList+0x28>
    __asm volatile
 8003882:	f04f 0310 	mov.w	r3, #16
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	61bb      	str	r3, [r7, #24]
}
 8003894:	bf00      	nop
 8003896:	e7fe      	b.n	8003896 <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8003898:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <vTaskPlaceOnUnorderedEventList+0xa4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <vTaskPlaceOnUnorderedEventList+0x46>
    __asm volatile
 80038a0:	f04f 0310 	mov.w	r3, #16
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	617b      	str	r3, [r7, #20]
}
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <vTaskPlaceOnUnorderedEventList+0x44>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80038b6:	4b18      	ldr	r3, [pc, #96]	; (8003918 <vTaskPlaceOnUnorderedEventList+0xa8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80038c0:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <vTaskPlaceOnUnorderedEventList+0xa8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	61da      	str	r2, [r3, #28]
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <vTaskPlaceOnUnorderedEventList+0xa8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	6892      	ldr	r2, [r2, #8]
 80038d8:	621a      	str	r2, [r3, #32]
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <vTaskPlaceOnUnorderedEventList+0xa8>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	3218      	adds	r2, #24
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <vTaskPlaceOnUnorderedEventList+0xa8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f103 0218 	add.w	r2, r3, #24
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <vTaskPlaceOnUnorderedEventList+0xa8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	629a      	str	r2, [r3, #40]	; 0x28
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003904:	2101      	movs	r1, #1
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f001 fc48 	bl	800519c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 800390c:	bf00      	nop
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	200006f4 	.word	0x200006f4
 8003918:	200001f8 	.word	0x200001f8

0800391c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <vTaskPlaceOnEventListRestricted+0x28>
    __asm volatile
 800392e:	f04f 0310 	mov.w	r3, #16
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	613b      	str	r3, [r7, #16]
}
 8003940:	bf00      	nop
 8003942:	e7fe      	b.n	8003942 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <vTaskPlaceOnEventListRestricted+0x88>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	61da      	str	r2, [r3, #28]
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	6892      	ldr	r2, [r2, #8]
 800395a:	621a      	str	r2, [r3, #32]
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <vTaskPlaceOnEventListRestricted+0x88>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	3218      	adds	r2, #24
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <vTaskPlaceOnEventListRestricted+0x88>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f103 0218 	add.w	r2, r3, #24
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800398c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003990:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	68b8      	ldr	r0, [r7, #8]
 8003996:	f001 fc01 	bl	800519c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200001f8 	.word	0x200001f8

080039a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b08b      	sub	sp, #44	; 0x2c
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <xTaskRemoveFromEventList+0x2c>
    __asm volatile
 80039be:	f04f 0310 	mov.w	r3, #16
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	60fb      	str	r3, [r7, #12]
}
 80039d0:	bf00      	nop
 80039d2:	e7fe      	b.n	80039d2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	6a3a      	ldr	r2, [r7, #32]
 80039e0:	6a12      	ldr	r2, [r2, #32]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	6a3a      	ldr	r2, [r7, #32]
 80039ea:	69d2      	ldr	r2, [r2, #28]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	3318      	adds	r3, #24
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d103      	bne.n	8003a02 <xTaskRemoveFromEventList+0x5a>
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	6a1a      	ldr	r2, [r3, #32]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2200      	movs	r2, #0
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	1e5a      	subs	r2, r3, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003a12:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <xTaskRemoveFromEventList+0x19c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d161      	bne.n	8003ade <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	68d2      	ldr	r2, [r2, #12]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	6a3a      	ldr	r2, [r7, #32]
 8003a30:	6892      	ldr	r2, [r2, #8]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d103      	bne.n	8003a48 <xTaskRemoveFromEventList+0xa0>
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	615a      	str	r2, [r3, #20]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1e5a      	subs	r2, r3, #1
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	4b3a      	ldr	r3, [pc, #232]	; (8003b48 <xTaskRemoveFromEventList+0x1a0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d903      	bls.n	8003a6c <xTaskRemoveFromEventList+0xc4>
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	4a37      	ldr	r2, [pc, #220]	; (8003b48 <xTaskRemoveFromEventList+0x1a0>)
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	4936      	ldr	r1, [pc, #216]	; (8003b4c <xTaskRemoveFromEventList+0x1a4>)
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	3204      	adds	r2, #4
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	1d1a      	adds	r2, r3, #4
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <xTaskRemoveFromEventList+0x1a4>)
 8003ab0:	441a      	add	r2, r3
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	615a      	str	r2, [r3, #20]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	4924      	ldr	r1, [pc, #144]	; (8003b4c <xTaskRemoveFromEventList+0x1a4>)
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	481f      	ldr	r0, [pc, #124]	; (8003b4c <xTaskRemoveFromEventList+0x1a4>)
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4403      	add	r3, r0
 8003ada:	6019      	str	r1, [r3, #0]
 8003adc:	e01b      	b.n	8003b16 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <xTaskRemoveFromEventList+0x1a8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	61da      	str	r2, [r3, #28]
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	621a      	str	r2, [r3, #32]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	3218      	adds	r2, #24
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f103 0218 	add.w	r2, r3, #24
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <xTaskRemoveFromEventList+0x1a8>)
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b0c:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <xTaskRemoveFromEventList+0x1a8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <xTaskRemoveFromEventList+0x1a8>)
 8003b14:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <xTaskRemoveFromEventList+0x1ac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d905      	bls.n	8003b30 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <xTaskRemoveFromEventList+0x1b0>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e001      	b.n	8003b34 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	372c      	adds	r7, #44	; 0x2c
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	200006f4 	.word	0x200006f4
 8003b48:	200006d4 	.word	0x200006d4
 8003b4c:	200001fc 	.word	0x200001fc
 8003b50:	2000068c 	.word	0x2000068c
 8003b54:	200001f8 	.word	0x200001f8
 8003b58:	200006e0 	.word	0x200006e0

08003b5c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	; 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8003b66:	4b5a      	ldr	r3, [pc, #360]	; (8003cd0 <vTaskRemoveFromUnorderedEventList+0x174>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <vTaskRemoveFromUnorderedEventList+0x28>
    __asm volatile
 8003b6e:	f04f 0310 	mov.w	r3, #16
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60fb      	str	r3, [r7, #12]
}
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <vTaskRemoveFromUnorderedEventList+0x54>
    __asm volatile
 8003b9a:	f04f 0310 	mov.w	r3, #16
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	60bb      	str	r3, [r7, #8]
}
 8003bac:	bf00      	nop
 8003bae:	e7fe      	b.n	8003bae <vTaskRemoveFromUnorderedEventList+0x52>
    listREMOVE_ITEM( pxEventListItem );
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6892      	ldr	r2, [r2, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6852      	ldr	r2, [r2, #4]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d103      	bne.n	8003bdc <vTaskRemoveFromUnorderedEventList+0x80>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1e5a      	subs	r2, r3, #1
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	68d2      	ldr	r2, [r2, #12]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	6892      	ldr	r2, [r2, #8]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d103      	bne.n	8003c1a <vTaskRemoveFromUnorderedEventList+0xbe>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	615a      	str	r2, [r3, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1e5a      	subs	r2, r3, #1
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <vTaskRemoveFromUnorderedEventList+0x178>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d903      	bls.n	8003c3e <vTaskRemoveFromUnorderedEventList+0xe2>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <vTaskRemoveFromUnorderedEventList+0x178>)
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	4925      	ldr	r1, [pc, #148]	; (8003cd8 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3304      	adds	r3, #4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	3204      	adds	r2, #4
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	1d1a      	adds	r2, r3, #4
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8003c82:	441a      	add	r2, r3
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	615a      	str	r2, [r3, #20]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8c:	4912      	ldr	r1, [pc, #72]	; (8003cd8 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c9e:	1c59      	adds	r1, r3, #1
 8003ca0:	480d      	ldr	r0, [pc, #52]	; (8003cd8 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4403      	add	r3, r0
 8003cac:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <vTaskRemoveFromUnorderedEventList+0x180>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d902      	bls.n	8003cc2 <vTaskRemoveFromUnorderedEventList+0x166>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8003cbc:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <vTaskRemoveFromUnorderedEventList+0x184>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8003cc2:	bf00      	nop
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	200006f4 	.word	0x200006f4
 8003cd4:	200006d4 	.word	0x200006d4
 8003cd8:	200001fc 	.word	0x200001fc
 8003cdc:	200001f8 	.word	0x200001f8
 8003ce0:	200006e0 	.word	0x200006e0

08003ce4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <vTaskSetTimeOutState+0x24>
    __asm volatile
 8003cf2:	f04f 0310 	mov.w	r3, #16
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	60fb      	str	r3, [r7, #12]
}
 8003d04:	bf00      	nop
 8003d06:	e7fe      	b.n	8003d06 <vTaskSetTimeOutState+0x22>
    taskENTER_CRITICAL();
 8003d08:	f002 faa2 	bl	8006250 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <vTaskSetTimeOutState+0x44>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <vTaskSetTimeOutState+0x48>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8003d1c:	f002 fac8 	bl	80062b0 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	200006e4 	.word	0x200006e4
 8003d2c:	200006d0 	.word	0x200006d0

08003d30 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <vTaskInternalSetTimeOutState+0x24>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <vTaskInternalSetTimeOutState+0x28>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	200006e4 	.word	0x200006e4
 8003d58:	200006d0 	.word	0x200006d0

08003d5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <xTaskCheckForTimeOut+0x26>
    __asm volatile
 8003d6c:	f04f 0310 	mov.w	r3, #16
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	613b      	str	r3, [r7, #16]
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <xTaskCheckForTimeOut+0x42>
    __asm volatile
 8003d88:	f04f 0310 	mov.w	r3, #16
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	60fb      	str	r3, [r7, #12]
}
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003d9e:	f002 fa57 	bl	8006250 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <xTaskCheckForTimeOut+0xc4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dba:	d102      	bne.n	8003dc2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e026      	b.n	8003e10 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <xTaskCheckForTimeOut+0xc8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d00a      	beq.n	8003de4 <xTaskCheckForTimeOut+0x88>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d305      	bcc.n	8003de4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e015      	b.n	8003e10 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d20b      	bcs.n	8003e06 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	1ad2      	subs	r2, r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ff98 	bl	8003d30 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e004      	b.n	8003e10 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e10:	f002 fa4e 	bl	80062b0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8003e14:	69fb      	ldr	r3, [r7, #28]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200006d0 	.word	0x200006d0
 8003e24:	200006e4 	.word	0x200006e4

08003e28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <vTaskMissedYield+0x14>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	200006e0 	.word	0x200006e0

08003e40 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        traceENTER_uxTaskGetTaskNumber( xTask );

        if( xTask != NULL )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e001      	b.n	8003e5e <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
        }

        traceRETURN_uxTaskGetTaskNumber( uxReturn );

        return uxReturn;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
    }
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        traceENTER_vTaskSetTaskNumber( xTask, uxHandle );

        if( xTask != NULL )
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	649a      	str	r2, [r3, #72]	; 0x48
        }

        traceRETURN_vTaskSetTaskNumber();
    }
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e9a:	f000 f851 	bl	8003f40 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <prvIdleTask+0x26>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d9f9      	bls.n	8003e9a <prvIdleTask+0x8>
            {
                taskYIELD();
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <prvIdleTask+0x2a>)
 8003ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003eb6:	e7f0      	b.n	8003e9a <prvIdleTask+0x8>
 8003eb8:	200001fc 	.word	0x200001fc
 8003ebc:	e000ed04 	.word	0xe000ed04

08003ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	e00c      	b.n	8003ee6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <prvInitialiseTaskLists+0x60>)
 8003ed8:	4413      	add	r3, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fb2e 	bl	800053c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b37      	cmp	r3, #55	; 0x37
 8003eea:	d9ef      	bls.n	8003ecc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003eec:	480d      	ldr	r0, [pc, #52]	; (8003f24 <prvInitialiseTaskLists+0x64>)
 8003eee:	f7fc fb25 	bl	800053c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ef2:	480d      	ldr	r0, [pc, #52]	; (8003f28 <prvInitialiseTaskLists+0x68>)
 8003ef4:	f7fc fb22 	bl	800053c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ef8:	480c      	ldr	r0, [pc, #48]	; (8003f2c <prvInitialiseTaskLists+0x6c>)
 8003efa:	f7fc fb1f 	bl	800053c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003efe:	480c      	ldr	r0, [pc, #48]	; (8003f30 <prvInitialiseTaskLists+0x70>)
 8003f00:	f7fc fb1c 	bl	800053c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003f04:	480b      	ldr	r0, [pc, #44]	; (8003f34 <prvInitialiseTaskLists+0x74>)
 8003f06:	f7fc fb19 	bl	800053c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <prvInitialiseTaskLists+0x78>)
 8003f0c:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <prvInitialiseTaskLists+0x64>)
 8003f0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <prvInitialiseTaskLists+0x7c>)
 8003f12:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <prvInitialiseTaskLists+0x68>)
 8003f14:	601a      	str	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	200001fc 	.word	0x200001fc
 8003f24:	2000065c 	.word	0x2000065c
 8003f28:	20000670 	.word	0x20000670
 8003f2c:	2000068c 	.word	0x2000068c
 8003f30:	200006a0 	.word	0x200006a0
 8003f34:	200006b8 	.word	0x200006b8
 8003f38:	20000684 	.word	0x20000684
 8003f3c:	20000688 	.word	0x20000688

08003f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f46:	e019      	b.n	8003f7c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003f48:	f002 f982 	bl	8006250 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <prvCheckTasksWaitingTermination+0x50>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc fb79 	bl	8000650 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <prvCheckTasksWaitingTermination+0x54>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	4a0b      	ldr	r2, [pc, #44]	; (8003f94 <prvCheckTasksWaitingTermination+0x54>)
 8003f66:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <prvCheckTasksWaitingTermination+0x58>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <prvCheckTasksWaitingTermination+0x58>)
 8003f70:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003f72:	f002 f99d 	bl	80062b0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f91e 	bl	80041b8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <prvCheckTasksWaitingTermination+0x58>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e1      	bne.n	8003f48 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200006a0 	.word	0x200006a0
 8003f94:	200006cc 	.word	0x200006cc
 8003f98:	200006b4 	.word	0x200006b4

08003f9c <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <vTaskGetInfo+0x1a>
 8003fb0:	4b43      	ldr	r3, [pc, #268]	; (80040c0 <vTaskGetInfo+0x124>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	e000      	b.n	8003fb8 <vTaskGetInfo+0x1c>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	61bb      	str	r3, [r7, #24]
        configASSERT( pxTCB != NULL );
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <vTaskGetInfo+0x3a>
    __asm volatile
 8003fc0:	f04f 0310 	mov.w	r3, #16
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	617b      	str	r3, [r7, #20]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <vTaskGetInfo+0x38>

        pxTaskStatus->xHandle = pxTCB;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	615a      	str	r2, [r3, #20]
        {
            pxTaskStatus->ulRunTimeCounter = ulTaskGetRunTimeCounter( xTask );
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	2b05      	cmp	r3, #5
 8004010:	d03c      	beq.n	800408c <vTaskGetInfo+0xf0>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8004012:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <vTaskGetInfo+0x124>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	429a      	cmp	r2, r3
 800401a:	d103      	bne.n	8004024 <vTaskGetInfo+0x88>
            {
                pxTaskStatus->eCurrentState = eRunning;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2200      	movs	r2, #0
 8004020:	731a      	strb	r2, [r3, #12]
 8004022:	e03a      	b.n	800409a <vTaskGetInfo+0xfe>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d120      	bne.n	8004072 <vTaskGetInfo+0xd6>
                    {
                        vTaskSuspendAll();
 8004030:	f7fe fff6 	bl	8003020 <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <vTaskGetInfo+0xa8>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2202      	movs	r2, #2
 8004040:	731a      	strb	r2, [r3, #12]
 8004042:	e014      	b.n	800406e <vTaskGetInfo+0xd2>
                                    /* The task does not appear on the event list item of
                                     * and of the RTOS objects, but could still be in the
                                     * blocked state if it is waiting on its notification
                                     * rather than waiting on an object.  If not, is
                                     * suspended. */
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004044:	2300      	movs	r3, #0
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	e00e      	b.n	8004068 <vTaskGetInfo+0xcc>
                                    {
                                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	33b8      	adds	r3, #184	; 0xb8
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	d103      	bne.n	8004062 <vTaskGetInfo+0xc6>
                                        {
                                            pxTaskStatus->eCurrentState = eBlocked;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2202      	movs	r2, #2
 800405e:	731a      	strb	r2, [r3, #12]
                                            break;
 8004060:	e005      	b.n	800406e <vTaskGetInfo+0xd2>
                                    for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3301      	adds	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	dded      	ble.n	800404a <vTaskGetInfo+0xae>
                                    }
                                }
                                #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                            }
                        }
                        ( void ) xTaskResumeAll();
 800406e:	f7fe ffe5 	bl	800303c <xTaskResumeAll>
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 8004072:	f002 f8ed 	bl	8006250 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <vTaskGetInfo+0x128>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d102      	bne.n	8004086 <vTaskGetInfo+0xea>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2201      	movs	r2, #1
 8004084:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 8004086:	f002 f913 	bl	80062b0 <vPortExitCritical>
 800408a:	e006      	b.n	800409a <vTaskGetInfo+0xfe>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800408c:	69b8      	ldr	r0, [r7, #24]
 800408e:	f7fe faab 	bl	80025e8 <eTaskGetState>
 8004092:	4603      	mov	r3, r0
 8004094:	461a      	mov	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <vTaskGetInfo+0x116>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f844 	bl	8004132 <prvTaskCheckFreeStackSpace>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	621a      	str	r2, [r3, #32]
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 80040b0:	e002      	b.n	80040b8 <vTaskGetInfo+0x11c>
            pxTaskStatus->usStackHighWaterMark = 0;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2200      	movs	r2, #0
 80040b6:	621a      	str	r2, [r3, #32]
    }
 80040b8:	bf00      	nop
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	200001f8 	.word	0x200001f8
 80040c4:	2000068c 	.word	0x2000068c

080040c8 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3308      	adds	r3, #8
 80040de:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01d      	beq.n	8004128 <prvListTasksWithinSingleList+0x60>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	e015      	b.n	8004120 <prvListTasksWithinSingleList+0x58>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	461a      	mov	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1899      	adds	r1, r3, r2
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	2201      	movs	r2, #1
 800410e:	6938      	ldr	r0, [r7, #16]
 8004110:	f7ff ff44 	bl	8003f9c <vTaskGetInfo>
                uxTask++;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	3301      	adds	r3, #1
 8004118:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	429a      	cmp	r2, r3
 8004126:	d1e5      	bne.n	80040f4 <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 8004128:	69fb      	ldr	r3, [r7, #28]
    }
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800413e:	e005      	b.n	800414c <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3301      	adds	r3, #1
 8004144:	607b      	str	r3, [r7, #4]
            uxCount++;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3301      	adds	r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2ba5      	cmp	r3, #165	; 0xa5
 8004152:	d0f5      	beq.n	8004140 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	60fb      	str	r3, [r7, #12]

        return uxCount;
 800415a:	68fb      	ldr	r3, [r7, #12]
    }
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        traceENTER_uxTaskGetStackHighWaterMark( xTask );

        pxTCB = prvGetTCBFromHandle( xTask );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <uxTaskGetStackHighWaterMark+0x14>
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <uxTaskGetStackHighWaterMark+0x4c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	e000      	b.n	800417e <uxTaskGetStackHighWaterMark+0x16>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	617b      	str	r3, [r7, #20]
        configASSERT( pxTCB != NULL );
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <uxTaskGetStackHighWaterMark+0x34>
    __asm volatile
 8004186:	f04f 0310 	mov.w	r3, #16
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60bb      	str	r3, [r7, #8]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <uxTaskGetStackHighWaterMark+0x32>

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80041a2:	6938      	ldr	r0, [r7, #16]
 80041a4:	f7ff ffc5 	bl	8004132 <prvTaskCheckFreeStackSpace>
 80041a8:	60f8      	str	r0, [r7, #12]

        traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );

        return uxReturn;
 80041aa:	68fb      	ldr	r3, [r7, #12]
    }
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	200001f8 	.word	0x200001f8

080041b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxTCB->xTLSBlock );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3354      	adds	r3, #84	; 0x54
 80041c4:	4618      	mov	r0, r3
 80041c6:	f002 fe39 	bl	8006e3c <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d108      	bne.n	80041e6 <prvDeleteTCB+0x2e>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	4618      	mov	r0, r3
 80041da:	f002 fa43 	bl	8006664 <vPortFree>
                vPortFree( pxTCB );
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f002 fa40 	bl	8006664 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80041e4:	e018      	b.n	8004218 <prvDeleteTCB+0x60>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d103      	bne.n	80041f8 <prvDeleteTCB+0x40>
                vPortFree( pxTCB );
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f002 fa37 	bl	8006664 <vPortFree>
    }
 80041f6:	e00f      	b.n	8004218 <prvDeleteTCB+0x60>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d00a      	beq.n	8004218 <prvDeleteTCB+0x60>
    __asm volatile
 8004202:	f04f 0310 	mov.w	r3, #16
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	60fb      	str	r3, [r7, #12]
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <prvDeleteTCB+0x5e>
    }
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <prvResetNextTaskUnblockTime+0x30>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <prvResetNextTaskUnblockTime+0x34>)
 8004230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004234:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004236:	e005      	b.n	8004244 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <prvResetNextTaskUnblockTime+0x30>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <prvResetNextTaskUnblockTime+0x34>)
 8004242:	6013      	str	r3, [r2, #0]
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000684 	.word	0x20000684
 8004254:	200006ec 	.word	0x200006ec

08004258 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_RECURSIVE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <xTaskGetCurrentTaskHandle+0x1c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8004264:	687b      	ldr	r3, [r7, #4]
        }
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	200001f8 	.word	0x200001f8

08004278 <xTaskGetCurrentTaskHandleForCore>:
            return xReturn;
        }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    TaskHandle_t xTaskGetCurrentTaskHandleForCore( BaseType_t xCoreID )
    {
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
        TaskHandle_t xReturn = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]

        traceENTER_xTaskGetCurrentTaskHandleForCore( xCoreID );

        if( taskVALID_CORE_ID( xCoreID ) != pdFALSE )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db05      	blt.n	8004296 <xTaskGetCurrentTaskHandleForCore+0x1e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	dc02      	bgt.n	8004296 <xTaskGetCurrentTaskHandleForCore+0x1e>
        {
            #if ( configNUMBER_OF_CORES == 1 )
                xReturn = pxCurrentTCB;
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <xTaskGetCurrentTaskHandleForCore+0x2c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
            #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
        }

        traceRETURN_xTaskGetCurrentTaskHandleForCore( xReturn );

        return xReturn;
 8004296:	68fb      	ldr	r3, [r7, #12]
    }
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	200001f8 	.word	0x200001f8

080042a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <xTaskGetSchedulerState+0x34>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80042b6:	2301      	movs	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	e008      	b.n	80042ce <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <xTaskGetSchedulerState+0x38>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80042c4:	2302      	movs	r3, #2
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	e001      	b.n	80042ce <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80042ce:	687b      	ldr	r3, [r7, #4]
    }
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	200006d8 	.word	0x200006d8
 80042e0:	200006f4 	.word	0x200006f4

080042e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d07b      	beq.n	80043f2 <xTaskPriorityInherit+0x10e>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	4b3f      	ldr	r3, [pc, #252]	; (80043fc <xTaskPriorityInherit+0x118>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d26b      	bcs.n	80043e0 <xTaskPriorityInherit+0xfc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	db06      	blt.n	800431e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8004310:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <xTaskPriorityInherit+0x118>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6959      	ldr	r1, [r3, #20]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4a34      	ldr	r2, [pc, #208]	; (8004400 <xTaskPriorityInherit+0x11c>)
 8004330:	4413      	add	r3, r2
 8004332:	4299      	cmp	r1, r3
 8004334:	d14c      	bne.n	80043d0 <xTaskPriorityInherit+0xec>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	3304      	adds	r3, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc f988 	bl	8000650 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <xTaskPriorityInherit+0x118>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <xTaskPriorityInherit+0x120>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d903      	bls.n	800435e <xTaskPriorityInherit+0x7a>
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <xTaskPriorityInherit+0x120>)
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4927      	ldr	r1, [pc, #156]	; (8004400 <xTaskPriorityInherit+0x11c>)
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	3304      	adds	r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	609a      	str	r2, [r3, #8]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	3204      	adds	r2, #4
 800438a:	605a      	str	r2, [r3, #4]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4a17      	ldr	r2, [pc, #92]	; (8004400 <xTaskPriorityInherit+0x11c>)
 80043a2:	441a      	add	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	615a      	str	r2, [r3, #20]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4914      	ldr	r1, [pc, #80]	; (8004400 <xTaskPriorityInherit+0x11c>)
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	480f      	ldr	r0, [pc, #60]	; (8004400 <xTaskPriorityInherit+0x11c>)
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4403      	add	r3, r0
 80043cc:	6019      	str	r1, [r3, #0]
 80043ce:	e004      	b.n	80043da <xTaskPriorityInherit+0xf6>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <xTaskPriorityInherit+0x118>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80043da:	2301      	movs	r3, #1
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e008      	b.n	80043f2 <xTaskPriorityInherit+0x10e>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <xTaskPriorityInherit+0x118>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d201      	bcs.n	80043f2 <xTaskPriorityInherit+0x10e>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80043ee:	2301      	movs	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80043f2:	697b      	ldr	r3, [r7, #20]
    }
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	200001f8 	.word	0x200001f8
 8004400:	200001fc 	.word	0x200001fc
 8004404:	200006d4 	.word	0x200006d4

08004408 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8081 	beq.w	8004522 <xTaskPriorityDisinherit+0x11a>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004420:	4b42      	ldr	r3, [pc, #264]	; (800452c <xTaskPriorityDisinherit+0x124>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	429a      	cmp	r2, r3
 8004428:	d00a      	beq.n	8004440 <xTaskPriorityDisinherit+0x38>
    __asm volatile
 800442a:	f04f 0310 	mov.w	r3, #16
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	613b      	str	r3, [r7, #16]
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <xTaskPriorityDisinherit+0x56>
    __asm volatile
 8004448:	f04f 0310 	mov.w	r3, #16
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004462:	1e5a      	subs	r2, r3, #1
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004470:	429a      	cmp	r2, r3
 8004472:	d056      	beq.n	8004522 <xTaskPriorityDisinherit+0x11a>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004478:	2b00      	cmp	r3, #0
 800447a:	d152      	bne.n	8004522 <xTaskPriorityDisinherit+0x11a>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fc f8e5 	bl	8000650 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <xTaskPriorityDisinherit+0x128>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d903      	bls.n	80044ae <xTaskPriorityDisinherit+0xa6>
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4a21      	ldr	r2, [pc, #132]	; (8004530 <xTaskPriorityDisinherit+0x128>)
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b2:	4920      	ldr	r1, [pc, #128]	; (8004534 <xTaskPriorityDisinherit+0x12c>)
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	3304      	adds	r3, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	609a      	str	r2, [r3, #8]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	3204      	adds	r2, #4
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4a10      	ldr	r2, [pc, #64]	; (8004534 <xTaskPriorityDisinherit+0x12c>)
 80044f2:	441a      	add	r2, r3
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	615a      	str	r2, [r3, #20]
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	490d      	ldr	r1, [pc, #52]	; (8004534 <xTaskPriorityDisinherit+0x12c>)
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800450e:	1c59      	adds	r1, r3, #1
 8004510:	4808      	ldr	r0, [pc, #32]	; (8004534 <xTaskPriorityDisinherit+0x12c>)
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4403      	add	r3, r0
 800451c:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800451e:	2301      	movs	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8004522:	69fb      	ldr	r3, [r7, #28]
    }
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200001f8 	.word	0x200001f8
 8004530:	200006d4 	.word	0x200006d4
 8004534:	200001fc 	.word	0x200001fc

08004538 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004546:	2301      	movs	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8095 	beq.w	800467c <vTaskPriorityDisinheritAfterTimeout+0x144>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10a      	bne.n	8004570 <vTaskPriorityDisinheritAfterTimeout+0x38>
    __asm volatile
 800455a:	f04f 0310 	mov.w	r3, #16
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	613b      	str	r3, [r7, #16]
}
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d902      	bls.n	8004580 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
 800457e:	e002      	b.n	8004586 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	429a      	cmp	r2, r3
 800458e:	d075      	beq.n	800467c <vTaskPriorityDisinheritAfterTimeout+0x144>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	429a      	cmp	r2, r3
 8004598:	d170      	bne.n	800467c <vTaskPriorityDisinheritAfterTimeout+0x144>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800459a:	4b3a      	ldr	r3, [pc, #232]	; (8004684 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6a3a      	ldr	r2, [r7, #32]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d10a      	bne.n	80045ba <vTaskPriorityDisinheritAfterTimeout+0x82>
    __asm volatile
 80045a4:	f04f 0310 	mov.w	r3, #16
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	60fb      	str	r3, [r7, #12]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	db04      	blt.n	80045d8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	6959      	ldr	r1, [r3, #20]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4a28      	ldr	r2, [pc, #160]	; (8004688 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 80045e8:	4413      	add	r3, r2
 80045ea:	4299      	cmp	r1, r3
 80045ec:	d146      	bne.n	800467c <vTaskPriorityDisinheritAfterTimeout+0x144>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fc f82c 	bl	8000650 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	4b23      	ldr	r3, [pc, #140]	; (800468c <vTaskPriorityDisinheritAfterTimeout+0x154>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d903      	bls.n	800460c <vTaskPriorityDisinheritAfterTimeout+0xd4>
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	4a20      	ldr	r2, [pc, #128]	; (800468c <vTaskPriorityDisinheritAfterTimeout+0x154>)
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	491d      	ldr	r1, [pc, #116]	; (8004688 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	3304      	adds	r3, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	3204      	adds	r2, #4
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	1d1a      	adds	r2, r3, #4
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	609a      	str	r2, [r3, #8]
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004650:	441a      	add	r2, r3
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	615a      	str	r2, [r3, #20]
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	490b      	ldr	r1, [pc, #44]	; (8004688 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6a3a      	ldr	r2, [r7, #32]
 800466a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	4806      	ldr	r0, [pc, #24]	; (8004688 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4403      	add	r3, r0
 800467a:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800467c:	bf00      	nop
 800467e:	3728      	adds	r7, #40	; 0x28
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	200001f8 	.word	0x200001f8
 8004688:	200001fc 	.word	0x200001fc
 800468c:	200006d4 	.word	0x200006d4

08004690 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <uxTaskResetEventItemValue+0x2c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 800469e:	4b07      	ldr	r3, [pc, #28]	; (80046bc <uxTaskResetEventItemValue+0x2c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <uxTaskResetEventItemValue+0x2c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80046ac:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 80046ae:	687b      	ldr	r3, [r7, #4]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	200001f8 	.word	0x200001f8

080046c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <pvTaskIncrementMutexHeldCount+0x2c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	651a      	str	r2, [r3, #80]	; 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 80046dc:	687b      	ldr	r3, [r7, #4]
    }
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	200001f8 	.word	0x200001f8

080046f0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <ulTaskGenericNotifyTake+0x2c>
    __asm volatile
 8004706:	f04f 0310 	mov.w	r3, #16
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	613b      	str	r3, [r7, #16]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <ulTaskGenericNotifyTake+0x2a>

        /* If the notification count is zero, and if we are willing to wait for a
         * notification, then block the task and wait. */
        if( ( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U ) && ( xTicksToWait > ( TickType_t ) 0 ) )
 800471c:	4b35      	ldr	r3, [pc, #212]	; (80047f4 <ulTaskGenericNotifyTake+0x104>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	332c      	adds	r3, #44	; 0x2c
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d132      	bne.n	8004794 <ulTaskGenericNotifyTake+0xa4>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d02f      	beq.n	8004794 <ulTaskGenericNotifyTake+0xa4>
        {
            /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
             * non-deterministic operation. */
            vTaskSuspendAll();
 8004734:	f7fe fc74 	bl	8003020 <vTaskSuspendAll>
            {
                /* We MUST enter a critical section to atomically check if a notification
                 * has occurred and set the flag to indicate that we are waiting for
                 * a notification. If we do not do so, a notification sent from an ISR
                 * will get lost. */
                taskENTER_CRITICAL();
 8004738:	f001 fd8a 	bl	8006250 <vPortEnterCritical>
                {
                    /* Only block if the notification count is not already non-zero. */
                    if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 800473c:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <ulTaskGenericNotifyTake+0x104>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	332c      	adds	r3, #44	; 0x2c
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d108      	bne.n	8004760 <ulTaskGenericNotifyTake+0x70>
                    {
                        /* Mark this task as waiting for a notification. */
                        pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800474e:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <ulTaskGenericNotifyTake+0x104>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	33b8      	adds	r3, #184	; 0xb8
 8004758:	2201      	movs	r2, #1
 800475a:	701a      	strb	r2, [r3, #0]

                        /* Arrange to wait for a notification. */
                        xShouldBlock = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
 8004760:	f001 fda6 	bl	80062b0 <vPortExitCritical>

                /* We are now out of the critical section but the scheduler is still
                 * suspended, so we are safe to do non-deterministic operations such
                 * as prvAddCurrentTaskToDelayedList. */
                if( xShouldBlock == pdTRUE )
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d103      	bne.n	8004772 <ulTaskGenericNotifyTake+0x82>
                {
                    traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800476a:	2101      	movs	r1, #1
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fd15 	bl	800519c <prvAddCurrentTaskToDelayedList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            xAlreadyYielded = xTaskResumeAll();
 8004772:	f7fe fc63 	bl	800303c <xTaskResumeAll>
 8004776:	61b8      	str	r0, [r7, #24]

            /* Force a reschedule if xTaskResumeAll has not already done so. */
            if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d10a      	bne.n	8004794 <ulTaskGenericNotifyTake+0xa4>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <ulTaskGenericNotifyTake+0xa4>
            {
                taskYIELD_WITHIN_API();
 8004784:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <ulTaskGenericNotifyTake+0x108>)
 8004786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	f3bf 8f6f 	isb	sy
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        taskENTER_CRITICAL();
 8004794:	f001 fd5c 	bl	8006250 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8004798:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <ulTaskGenericNotifyTake+0x104>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	332c      	adds	r3, #44	; 0x2c
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d014      	beq.n	80047d8 <ulTaskGenericNotifyTake+0xe8>
            {
                if( xClearCountOnExit != pdFALSE )
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <ulTaskGenericNotifyTake+0xd6>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 80047b4:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <ulTaskGenericNotifyTake+0x104>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	332c      	adds	r3, #44	; 0x2c
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]
 80047c4:	e008      	b.n	80047d8 <ulTaskGenericNotifyTake+0xe8>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <ulTaskGenericNotifyTake+0x104>)
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	1e5a      	subs	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	332c      	adds	r3, #44	; 0x2c
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <ulTaskGenericNotifyTake+0x104>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	33b8      	adds	r3, #184	; 0xb8
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80047e6:	f001 fd63 	bl	80062b0 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 80047ea:	697b      	ldr	r3, [r7, #20]
    }
 80047ec:	4618      	mov	r0, r3
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	200001f8 	.word	0x200001f8
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <xTaskGenericNotifyWait+0x2e>
    __asm volatile
 8004814:	f04f 0310 	mov.w	r3, #16
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	613b      	str	r3, [r7, #16]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xTaskGenericNotifyWait+0x2c>

        /* If the task hasn't received a notification, and if we are willing to wait
         * for it, then block the task and wait. */
        if( ( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED ) && ( xTicksToWait > ( TickType_t ) 0 ) )
 800482a:	4b42      	ldr	r3, [pc, #264]	; (8004934 <xTaskGenericNotifyWait+0x138>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	33b8      	adds	r3, #184	; 0xb8
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d041      	beq.n	80048c0 <xTaskGenericNotifyWait+0xc4>
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03e      	beq.n	80048c0 <xTaskGenericNotifyWait+0xc4>
        {
            /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
             * non-deterministic operation. */
            vTaskSuspendAll();
 8004842:	f7fe fbed 	bl	8003020 <vTaskSuspendAll>
            {
                /* We MUST enter a critical section to atomically check and update the
                 * task notification value. If we do not do so, a notification from
                 * an ISR will get lost. */
                taskENTER_CRITICAL();
 8004846:	f001 fd03 	bl	8006250 <vPortEnterCritical>
                {
                    /* Only block if a notification is not already pending. */
                    if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800484a:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <xTaskGenericNotifyWait+0x138>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	33b8      	adds	r3, #184	; 0xb8
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d017      	beq.n	800488c <xTaskGenericNotifyWait+0x90>
                    {
                        /* Clear bits in the task's notification value as bits may get
                         * set by the notifying task or interrupt. This can be used
                         * to clear the value to zero. */
                        pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <xTaskGenericNotifyWait+0x138>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	332c      	adds	r3, #44	; 0x2c
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	6859      	ldr	r1, [r3, #4]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	43db      	mvns	r3, r3
 800486e:	4019      	ands	r1, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	332c      	adds	r3, #44	; 0x2c
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	6059      	str	r1, [r3, #4]

                        /* Mark this task as waiting for a notification. */
                        pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800487a:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <xTaskGenericNotifyWait+0x138>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4413      	add	r3, r2
 8004882:	33b8      	adds	r3, #184	; 0xb8
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]

                        /* Arrange to wait for a notification. */
                        xShouldBlock = pdTRUE;
 8004888:	2301      	movs	r3, #1
 800488a:	61bb      	str	r3, [r7, #24]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
 800488c:	f001 fd10 	bl	80062b0 <vPortExitCritical>

                /* We are now out of the critical section but the scheduler is still
                 * suspended, so we are safe to do non-deterministic operations such
                 * as prvAddCurrentTaskToDelayedList. */
                if( xShouldBlock == pdTRUE )
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d103      	bne.n	800489e <xTaskGenericNotifyWait+0xa2>
                {
                    traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004896:	2101      	movs	r1, #1
 8004898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800489a:	f000 fc7f 	bl	800519c <prvAddCurrentTaskToDelayedList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            xAlreadyYielded = xTaskResumeAll();
 800489e:	f7fe fbcd 	bl	800303c <xTaskResumeAll>
 80048a2:	6178      	str	r0, [r7, #20]

            /* Force a reschedule if xTaskResumeAll has not already done so. */
            if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d10a      	bne.n	80048c0 <xTaskGenericNotifyWait+0xc4>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d107      	bne.n	80048c0 <xTaskGenericNotifyWait+0xc4>
            {
                taskYIELD_WITHIN_API();
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <xTaskGenericNotifyWait+0x13c>)
 80048b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        taskENTER_CRITICAL();
 80048c0:	f001 fcc6 	bl	8006250 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <xTaskGenericNotifyWait+0xe0>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 80048ca:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <xTaskGenericNotifyWait+0x138>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	332c      	adds	r3, #44	; 0x2c
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80048dc:	4b15      	ldr	r3, [pc, #84]	; (8004934 <xTaskGenericNotifyWait+0x138>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	33b8      	adds	r3, #184	; 0xb8
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d002      	beq.n	80048f4 <xTaskGenericNotifyWait+0xf8>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e010      	b.n	8004916 <xTaskGenericNotifyWait+0x11a>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <xTaskGenericNotifyWait+0x138>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	332c      	adds	r3, #44	; 0x2c
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	43db      	mvns	r3, r3
 8004906:	4019      	ands	r1, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	332c      	adds	r3, #44	; 0x2c
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8004916:	4b07      	ldr	r3, [pc, #28]	; (8004934 <xTaskGenericNotifyWait+0x138>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	33b8      	adds	r3, #184	; 0xb8
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004924:	f001 fcc4 	bl	80062b0 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8004928:	69fb      	ldr	r3, [r7, #28]
    }
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	200001f8 	.word	0x200001f8
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800493c:	b580      	push	{r7, lr}
 800493e:	b08e      	sub	sp, #56	; 0x38
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800494a:	2301      	movs	r3, #1
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <xTaskGenericNotify+0x2e>
    __asm volatile
 8004954:	f04f 0310 	mov.w	r3, #16
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	623b      	str	r3, [r7, #32]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <xTaskGenericNotify+0x4a>
    __asm volatile
 8004970:	f04f 0310 	mov.w	r3, #16
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	61fb      	str	r3, [r7, #28]
}
 8004982:	bf00      	nop
 8004984:	e7fe      	b.n	8004984 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800498a:	f001 fc61 	bl	8006250 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800498e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	332c      	adds	r3, #44	; 0x2c
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a2:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80049a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4413      	add	r3, r2
 80049aa:	33b8      	adds	r3, #184	; 0xb8
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80049b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4413      	add	r3, r2
 80049b8:	33b8      	adds	r3, #184	; 0xb8
 80049ba:	2202      	movs	r2, #2
 80049bc:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d841      	bhi.n	8004a48 <xTaskGenericNotify+0x10c>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <xTaskGenericNotify+0x90>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a67 	.word	0x08004a67
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	080049ff 	.word	0x080049ff
 80049d8:	08004a1b 	.word	0x08004a1b
 80049dc:	08004a2b 	.word	0x08004a2b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80049e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	332c      	adds	r3, #44	; 0x2c
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	332c      	adds	r3, #44	; 0x2c
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	605a      	str	r2, [r3, #4]
                    break;
 80049fc:	e036      	b.n	8004a6c <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80049fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	332c      	adds	r3, #44	; 0x2c
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	332c      	adds	r3, #44	; 0x2c
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	605a      	str	r2, [r3, #4]
                    break;
 8004a18:	e028      	b.n	8004a6c <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	332c      	adds	r3, #44	; 0x2c
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]
                    break;
 8004a28:	e020      	b.n	8004a6c <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d007      	beq.n	8004a42 <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	332c      	adds	r3, #44	; 0x2c
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004a40:	e014      	b.n	8004a6c <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8004a46:	e011      	b.n	8004a6c <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004a48:	4b4d      	ldr	r3, [pc, #308]	; (8004b80 <xTaskGenericNotify+0x244>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <xTaskGenericNotify+0x12e>
    __asm volatile
 8004a50:	f04f 0310 	mov.w	r3, #16
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	61bb      	str	r3, [r7, #24]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xTaskGenericNotify+0x128>
                    break;
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <xTaskGenericNotify+0x130>

                    break;
 8004a6a:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d17e      	bne.n	8004b72 <xTaskGenericNotify+0x236>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a80:	68d2      	ldr	r2, [r2, #12]
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8a:	6892      	ldr	r2, [r2, #8]
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	3304      	adds	r3, #4
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d103      	bne.n	8004aa2 <xTaskGenericNotify+0x166>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	615a      	str	r2, [r3, #20]
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	4b33      	ldr	r3, [pc, #204]	; (8004b84 <xTaskGenericNotify+0x248>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d903      	bls.n	8004ac6 <xTaskGenericNotify+0x18a>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a30      	ldr	r2, [pc, #192]	; (8004b84 <xTaskGenericNotify+0x248>)
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	492f      	ldr	r1, [pc, #188]	; (8004b88 <xTaskGenericNotify+0x24c>)
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae0:	609a      	str	r2, [r3, #8]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af0:	3204      	adds	r2, #4
 8004af2:	605a      	str	r2, [r3, #4]
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	1d1a      	adds	r2, r3, #4
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <xTaskGenericNotify+0x24c>)
 8004b0a:	441a      	add	r2, r3
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	615a      	str	r2, [r3, #20]
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b14:	491c      	ldr	r1, [pc, #112]	; (8004b88 <xTaskGenericNotify+0x24c>)
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b26:	1c59      	adds	r1, r3, #1
 8004b28:	4817      	ldr	r0, [pc, #92]	; (8004b88 <xTaskGenericNotify+0x24c>)
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4403      	add	r3, r0
 8004b34:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <xTaskGenericNotify+0x218>
    __asm volatile
 8004b3e:	f04f 0310 	mov.w	r3, #16
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	617b      	str	r3, [r7, #20]
}
 8004b50:	bf00      	nop
 8004b52:	e7fe      	b.n	8004b52 <xTaskGenericNotify+0x216>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <xTaskGenericNotify+0x250>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d207      	bcs.n	8004b72 <xTaskGenericNotify+0x236>
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <xTaskGenericNotify+0x254>)
 8004b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b72:	f001 fb9d 	bl	80062b0 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3738      	adds	r7, #56	; 0x38
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	200006d0 	.word	0x200006d0
 8004b84:	200006d4 	.word	0x200006d4
 8004b88:	200001fc 	.word	0x200001fc
 8004b8c:	200001f8 	.word	0x200001f8
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b092      	sub	sp, #72	; 0x48
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xTaskGenericNotifyFromISR+0x2e>
    __asm volatile
 8004bac:	f04f 0310 	mov.w	r3, #16
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <xTaskGenericNotifyFromISR+0x4a>
    __asm volatile
 8004bc8:	f04f 0310 	mov.w	r3, #16
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bde:	f001 fc14 	bl	800640a <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	643b      	str	r3, [r7, #64]	; 0x40
    __asm volatile
 8004be6:	f3ef 8211 	mrs	r2, BASEPRI
 8004bea:	f04f 0310 	mov.w	r3, #16
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	623a      	str	r2, [r7, #32]
 8004bfc:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 8004bfe:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8004c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	332c      	adds	r3, #44	; 0x2c
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c16:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	33b8      	adds	r3, #184	; 0xb8
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004c26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	33b8      	adds	r3, #184	; 0xb8
 8004c2e:	2202      	movs	r2, #2
 8004c30:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d841      	bhi.n	8004cbc <xTaskGenericNotifyFromISR+0x128>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <xTaskGenericNotifyFromISR+0xac>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004cdb 	.word	0x08004cdb
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004c73 	.word	0x08004c73
 8004c4c:	08004c8f 	.word	0x08004c8f
 8004c50:	08004c9f 	.word	0x08004c9f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004c54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	332c      	adds	r3, #44	; 0x2c
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	332c      	adds	r3, #44	; 0x2c
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	605a      	str	r2, [r3, #4]
                    break;
 8004c70:	e036      	b.n	8004ce0 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	332c      	adds	r3, #44	; 0x2c
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	332c      	adds	r3, #44	; 0x2c
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	605a      	str	r2, [r3, #4]
                    break;
 8004c8c:	e028      	b.n	8004ce0 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004c8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	332c      	adds	r3, #44	; 0x2c
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	605a      	str	r2, [r3, #4]
                    break;
 8004c9c:	e020      	b.n	8004ce0 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004c9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d007      	beq.n	8004cb6 <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	332c      	adds	r3, #44	; 0x2c
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004cb4:	e014      	b.n	8004ce0 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8004cba:	e011      	b.n	8004ce0 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004cbc:	4b61      	ldr	r3, [pc, #388]	; (8004e44 <xTaskGenericNotifyFromISR+0x2b0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00c      	beq.n	8004cde <xTaskGenericNotifyFromISR+0x14a>
    __asm volatile
 8004cc4:	f04f 0310 	mov.w	r3, #16
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	61bb      	str	r3, [r7, #24]
}
 8004cd6:	bf00      	nop
 8004cd8:	e7fe      	b.n	8004cd8 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8004cda:	bf00      	nop
 8004cdc:	e000      	b.n	8004ce0 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 8004cde:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004ce0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	f040 80a1 	bne.w	8004e2c <xTaskGenericNotifyFromISR+0x298>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <xTaskGenericNotifyFromISR+0x174>
    __asm volatile
 8004cf2:	f04f 0310 	mov.w	r3, #16
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	617b      	str	r3, [r7, #20]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <xTaskGenericNotifyFromISR+0x172>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004d08:	4b4f      	ldr	r3, [pc, #316]	; (8004e48 <xTaskGenericNotifyFromISR+0x2b4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d161      	bne.n	8004dd4 <xTaskGenericNotifyFromISR+0x240>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	633b      	str	r3, [r7, #48]	; 0x30
 8004d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d1c:	68d2      	ldr	r2, [r2, #12]
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d26:	6892      	ldr	r2, [r2, #8]
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d30:	3304      	adds	r3, #4
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d103      	bne.n	8004d3e <xTaskGenericNotifyFromISR+0x1aa>
 8004d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d40:	2200      	movs	r2, #0
 8004d42:	615a      	str	r2, [r3, #20]
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	1e5a      	subs	r2, r3, #1
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <xTaskGenericNotifyFromISR+0x2b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d903      	bls.n	8004d62 <xTaskGenericNotifyFromISR+0x1ce>
 8004d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <xTaskGenericNotifyFromISR+0x2b8>)
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d66:	493a      	ldr	r1, [pc, #232]	; (8004e50 <xTaskGenericNotifyFromISR+0x2bc>)
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	3304      	adds	r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d8c:	3204      	adds	r2, #4
 8004d8e:	605a      	str	r2, [r3, #4]
 8004d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d92:	1d1a      	adds	r2, r3, #4
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	609a      	str	r2, [r3, #8]
 8004d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4a2a      	ldr	r2, [pc, #168]	; (8004e50 <xTaskGenericNotifyFromISR+0x2bc>)
 8004da6:	441a      	add	r2, r3
 8004da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004daa:	615a      	str	r2, [r3, #20]
 8004dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db0:	4927      	ldr	r1, [pc, #156]	; (8004e50 <xTaskGenericNotifyFromISR+0x2bc>)
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	4822      	ldr	r0, [pc, #136]	; (8004e50 <xTaskGenericNotifyFromISR+0x2bc>)
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4403      	add	r3, r0
 8004dd0:	6019      	str	r1, [r3, #0]
 8004dd2:	e01b      	b.n	8004e0c <xTaskGenericNotifyFromISR+0x278>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <xTaskGenericNotifyFromISR+0x2c0>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dde:	61da      	str	r2, [r3, #28]
 8004de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de6:	621a      	str	r2, [r3, #32]
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dee:	3218      	adds	r2, #24
 8004df0:	605a      	str	r2, [r3, #4]
 8004df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df4:	f103 0218 	add.w	r2, r3, #24
 8004df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfe:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <xTaskGenericNotifyFromISR+0x2c0>)
 8004e00:	629a      	str	r2, [r3, #40]	; 0x28
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <xTaskGenericNotifyFromISR+0x2c0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3301      	adds	r3, #1
 8004e08:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <xTaskGenericNotifyFromISR+0x2c0>)
 8004e0a:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <xTaskGenericNotifyFromISR+0x2c4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d908      	bls.n	8004e2c <xTaskGenericNotifyFromISR+0x298>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <xTaskGenericNotifyFromISR+0x292>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <xTaskGenericNotifyFromISR+0x2c8>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2e:	613b      	str	r3, [r7, #16]
    __asm volatile
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f383 8811 	msr	BASEPRI, r3
}
 8004e36:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8004e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3748      	adds	r7, #72	; 0x48
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200006d0 	.word	0x200006d0
 8004e48:	200006f4 	.word	0x200006f4
 8004e4c:	200006d4 	.word	0x200006d4
 8004e50:	200001fc 	.word	0x200001fc
 8004e54:	2000068c 	.word	0x2000068c
 8004e58:	200001f8 	.word	0x200001f8
 8004e5c:	200006e0 	.word	0x200006e0

08004e60 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b090      	sub	sp, #64	; 0x40
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <vTaskGenericNotifyGiveFromISR+0x28>
    __asm volatile
 8004e72:	f04f 0310 	mov.w	r3, #16
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <vTaskGenericNotifyGiveFromISR+0x44>
    __asm volatile
 8004e8e:	f04f 0310 	mov.w	r3, #16
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	623b      	str	r3, [r7, #32]
}
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <vTaskGenericNotifyGiveFromISR+0x42>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ea4:	f001 fab1 	bl	800640a <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm volatile
 8004eac:	f3ef 8211 	mrs	r2, BASEPRI
 8004eb0:	f04f 0310 	mov.w	r3, #16
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	61fa      	str	r2, [r7, #28]
 8004ec2:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8004ec4:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004ec6:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4413      	add	r3, r2
 8004ece:	33b8      	adds	r3, #184	; 0xb8
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004ed6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4413      	add	r3, r2
 8004edc:	33b8      	adds	r3, #184	; 0xb8
 8004ede:	2202      	movs	r2, #2
 8004ee0:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	332c      	adds	r3, #44	; 0x2c
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	332c      	adds	r3, #44	; 0x2c
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	f040 80a1 	bne.w	8005048 <vTaskGenericNotifyGiveFromISR+0x1e8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <vTaskGenericNotifyGiveFromISR+0xc4>
    __asm volatile
 8004f0e:	f04f 0310 	mov.w	r3, #16
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	617b      	str	r3, [r7, #20]
}
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <vTaskGenericNotifyGiveFromISR+0xc2>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004f24:	4b4d      	ldr	r3, [pc, #308]	; (800505c <vTaskGenericNotifyGiveFromISR+0x1fc>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d161      	bne.n	8004ff0 <vTaskGenericNotifyGiveFromISR+0x190>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f38:	68d2      	ldr	r2, [r2, #12]
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f42:	6892      	ldr	r2, [r2, #8]
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d103      	bne.n	8004f5a <vTaskGenericNotifyGiveFromISR+0xfa>
 8004f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	615a      	str	r2, [r3, #20]
 8004f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	1e5a      	subs	r2, r3, #1
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6e:	4b3c      	ldr	r3, [pc, #240]	; (8005060 <vTaskGenericNotifyGiveFromISR+0x200>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d903      	bls.n	8004f7e <vTaskGenericNotifyGiveFromISR+0x11e>
 8004f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	4a39      	ldr	r2, [pc, #228]	; (8005060 <vTaskGenericNotifyGiveFromISR+0x200>)
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f82:	4938      	ldr	r1, [pc, #224]	; (8005064 <vTaskGenericNotifyGiveFromISR+0x204>)
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3304      	adds	r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	609a      	str	r2, [r3, #8]
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa0:	60da      	str	r2, [r3, #12]
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fa8:	3204      	adds	r2, #4
 8004faa:	605a      	str	r2, [r3, #4]
 8004fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4a28      	ldr	r2, [pc, #160]	; (8005064 <vTaskGenericNotifyGiveFromISR+0x204>)
 8004fc2:	441a      	add	r2, r3
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc6:	615a      	str	r2, [r3, #20]
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	4925      	ldr	r1, [pc, #148]	; (8005064 <vTaskGenericNotifyGiveFromISR+0x204>)
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fde:	1c59      	adds	r1, r3, #1
 8004fe0:	4820      	ldr	r0, [pc, #128]	; (8005064 <vTaskGenericNotifyGiveFromISR+0x204>)
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4403      	add	r3, r0
 8004fec:	6019      	str	r1, [r3, #0]
 8004fee:	e01b      	b.n	8005028 <vTaskGenericNotifyGiveFromISR+0x1c8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004ff0:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <vTaskGenericNotifyGiveFromISR+0x208>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffa:	61da      	str	r2, [r3, #28]
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005002:	621a      	str	r2, [r3, #32]
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800500a:	3218      	adds	r2, #24
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005010:	f103 0218 	add.w	r2, r3, #24
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <vTaskGenericNotifyGiveFromISR+0x208>)
 800501c:	629a      	str	r2, [r3, #40]	; 0x28
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <vTaskGenericNotifyGiveFromISR+0x208>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3301      	adds	r3, #1
 8005024:	4a10      	ldr	r2, [pc, #64]	; (8005068 <vTaskGenericNotifyGiveFromISR+0x208>)
 8005026:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <vTaskGenericNotifyGiveFromISR+0x20c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	429a      	cmp	r2, r3
 8005034:	d908      	bls.n	8005048 <vTaskGenericNotifyGiveFromISR+0x1e8>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <vTaskGenericNotifyGiveFromISR+0x1e2>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <vTaskGenericNotifyGiveFromISR+0x210>)
 8005044:	2201      	movs	r2, #1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	613b      	str	r3, [r7, #16]
    __asm volatile
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f383 8811 	msr	BASEPRI, r3
}
 8005052:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8005054:	bf00      	nop
 8005056:	3740      	adds	r7, #64	; 0x40
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200006f4 	.word	0x200006f4
 8005060:	200006d4 	.word	0x200006d4
 8005064:	200001fc 	.word	0x200001fc
 8005068:	2000068c 	.word	0x2000068c
 800506c:	200001f8 	.word	0x200001f8
 8005070:	200006e0 	.word	0x200006e0

08005074 <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        traceENTER_xTaskGenericNotifyStateClear( xTask, uxIndexToClear );

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <xTaskGenericNotifyStateClear+0x26>
    __asm volatile
 8005084:	f04f 0310 	mov.w	r3, #16
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	60fb      	str	r3, [r7, #12]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d102      	bne.n	80050a6 <xTaskGenericNotifyStateClear+0x32>
 80050a0:	4b17      	ldr	r3, [pc, #92]	; (8005100 <xTaskGenericNotifyStateClear+0x8c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	e000      	b.n	80050a8 <xTaskGenericNotifyStateClear+0x34>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	613b      	str	r3, [r7, #16]
        configASSERT( pxTCB != NULL );
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <xTaskGenericNotifyStateClear+0x52>
    __asm volatile
 80050b0:	f04f 0310 	mov.w	r3, #16
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60bb      	str	r3, [r7, #8]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xTaskGenericNotifyStateClear+0x50>

        taskENTER_CRITICAL();
 80050c6:	f001 f8c3 	bl	8006250 <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	4413      	add	r3, r2
 80050d0:	33b8      	adds	r3, #184	; 0xb8
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d108      	bne.n	80050ec <xTaskGenericNotifyStateClear+0x78>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	4413      	add	r3, r2
 80050e0:	33b8      	adds	r3, #184	; 0xb8
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 80050e6:	2301      	movs	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	e001      	b.n	80050f0 <xTaskGenericNotifyStateClear+0x7c>
            }
            else
            {
                xReturn = pdFAIL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80050f0:	f001 f8de 	bl	80062b0 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyStateClear( xReturn );

        return xReturn;
 80050f4:	697b      	ldr	r3, [r7, #20]
    }
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200001f8 	.word	0x200001f8

08005104 <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint32_t ulReturn;

        traceENTER_ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <ulTaskGenericNotifyValueClear+0x28>
    __asm volatile
 8005116:	f04f 0310 	mov.w	r3, #16
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	617b      	str	r3, [r7, #20]
}
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <ulTaskGenericNotifyValueClear+0x26>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <ulTaskGenericNotifyValueClear+0x34>
 8005132:	4b19      	ldr	r3, [pc, #100]	; (8005198 <ulTaskGenericNotifyValueClear+0x94>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	e000      	b.n	800513a <ulTaskGenericNotifyValueClear+0x36>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	61fb      	str	r3, [r7, #28]
        configASSERT( pxTCB != NULL );
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <ulTaskGenericNotifyValueClear+0x54>
    __asm volatile
 8005142:	f04f 0310 	mov.w	r3, #16
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	613b      	str	r3, [r7, #16]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <ulTaskGenericNotifyValueClear+0x52>

        taskENTER_CRITICAL();
 8005158:	f001 f87a 	bl	8006250 <vPortEnterCritical>
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	332c      	adds	r3, #44	; 0x2c
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	61bb      	str	r3, [r7, #24]
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	332c      	adds	r3, #44	; 0x2c
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	43db      	mvns	r3, r3
 800517a:	401a      	ands	r2, r3
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	332c      	adds	r3, #44	; 0x2c
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	605a      	str	r2, [r3, #4]
        }
        taskEXIT_CRITICAL();
 8005188:	f001 f892 	bl	80062b0 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyValueClear( ulReturn );

        return ulReturn;
 800518c:	69bb      	ldr	r3, [r7, #24]
    }
 800518e:	4618      	mov	r0, r3
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	200001f8 	.word	0x200001f8

0800519c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80051a6:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80051ac:	4b2e      	ldr	r3, [pc, #184]	; (8005268 <prvAddCurrentTaskToDelayedList+0xcc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80051b2:	4b2e      	ldr	r3, [pc, #184]	; (800526c <prvAddCurrentTaskToDelayedList+0xd0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051b8:	4b2d      	ldr	r3, [pc, #180]	; (8005270 <prvAddCurrentTaskToDelayedList+0xd4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3304      	adds	r3, #4
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fb fa46 	bl	8000650 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ca:	d124      	bne.n	8005216 <prvAddCurrentTaskToDelayedList+0x7a>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d021      	beq.n	8005216 <prvAddCurrentTaskToDelayedList+0x7a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051d2:	4b28      	ldr	r3, [pc, #160]	; (8005274 <prvAddCurrentTaskToDelayedList+0xd8>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	4b25      	ldr	r3, [pc, #148]	; (8005270 <prvAddCurrentTaskToDelayedList+0xd4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	609a      	str	r2, [r3, #8]
 80051e0:	4b23      	ldr	r3, [pc, #140]	; (8005270 <prvAddCurrentTaskToDelayedList+0xd4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	6892      	ldr	r2, [r2, #8]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	4b21      	ldr	r3, [pc, #132]	; (8005270 <prvAddCurrentTaskToDelayedList+0xd4>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	3204      	adds	r2, #4
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <prvAddCurrentTaskToDelayedList+0xd4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1d1a      	adds	r2, r3, #4
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005206:	615a      	str	r2, [r3, #20]
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <prvAddCurrentTaskToDelayedList+0xd8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	4a19      	ldr	r2, [pc, #100]	; (8005274 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005214:	e022      	b.n	800525c <prvAddCurrentTaskToDelayedList+0xc0>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4413      	add	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	429a      	cmp	r2, r3
 800522c:	d207      	bcs.n	800523e <prvAddCurrentTaskToDelayedList+0xa2>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	6978      	ldr	r0, [r7, #20]
 8005238:	f7fb f9d1 	bl	80005de <vListInsert>
}
 800523c:	e00e      	b.n	800525c <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3304      	adds	r3, #4
 8005244:	4619      	mov	r1, r3
 8005246:	69b8      	ldr	r0, [r7, #24]
 8005248:	f7fb f9c9 	bl	80005de <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <prvAddCurrentTaskToDelayedList+0xdc>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	429a      	cmp	r2, r3
 8005254:	d202      	bcs.n	800525c <prvAddCurrentTaskToDelayedList+0xc0>
                    xNextTaskUnblockTime = xTimeToWake;
 8005256:	4a08      	ldr	r2, [pc, #32]	; (8005278 <prvAddCurrentTaskToDelayedList+0xdc>)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6013      	str	r3, [r2, #0]
}
 800525c:	bf00      	nop
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	200006d0 	.word	0x200006d0
 8005268:	20000684 	.word	0x20000684
 800526c:	20000688 	.word	0x20000688
 8005270:	200001f8 	.word	0x200001f8
 8005274:	200006b8 	.word	0x200006b8
 8005278:	200006ec 	.word	0x200006ec

0800527c <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800528c:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4a06      	ldr	r2, [pc, #24]	; (80052ac <vApplicationGetIdleTaskMemory+0x30>)
 8005292:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529a:	601a      	str	r2, [r3, #0]
    }
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	200006f8 	.word	0x200006f8
 80052ac:	200007b4 	.word	0x200007b4

080052b0 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a07      	ldr	r2, [pc, #28]	; (80052dc <vApplicationGetTimerTaskMemory+0x2c>)
 80052c0:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4a06      	ldr	r2, [pc, #24]	; (80052e0 <vApplicationGetTimerTaskMemory+0x30>)
 80052c6:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052ce:	601a      	str	r2, [r3, #0]
    }
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	20000fb4 	.word	0x20000fb4
 80052e0:	20001070 	.word	0x20001070

080052e4 <vTaskResetState>:
 * Reset the state in this file. This state is normally initialized at start up.
 * This function must be called by the application before restarting the
 * scheduler.
 */
void vTaskResetState( void )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
    BaseType_t xCoreID;

    /* Task control block. */
    #if ( configNUMBER_OF_CORES == 1 )
    {
        pxCurrentTCB = NULL;
 80052ea:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <vTaskResetState+0x70>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 80052f0:	4b19      	ldr	r3, [pc, #100]	; (8005358 <vTaskResetState+0x74>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
        FreeRTOS_errno = 0;
    }
    #endif /* #if ( configUSE_POSIX_ERRNO == 1 ) */

    /* Other file private variables. */
    uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 80052f6:	4b19      	ldr	r3, [pc, #100]	; (800535c <vTaskResetState+0x78>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
    xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052fc:	4b18      	ldr	r3, [pc, #96]	; (8005360 <vTaskResetState+0x7c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
    uxTopReadyPriority = tskIDLE_PRIORITY;
 8005302:	4b18      	ldr	r3, [pc, #96]	; (8005364 <vTaskResetState+0x80>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
    xSchedulerRunning = pdFALSE;
 8005308:	4b17      	ldr	r3, [pc, #92]	; (8005368 <vTaskResetState+0x84>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
    xPendedTicks = ( TickType_t ) 0U;
 800530e:	4b17      	ldr	r3, [pc, #92]	; (800536c <vTaskResetState+0x88>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

    for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
 8005314:	2300      	movs	r3, #0
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	e007      	b.n	800532a <vTaskResetState+0x46>
    {
        xYieldPendings[ xCoreID ] = pdFALSE;
 800531a:	4a15      	ldr	r2, [pc, #84]	; (8005370 <vTaskResetState+0x8c>)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2100      	movs	r1, #0
 8005320:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3301      	adds	r3, #1
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	ddf4      	ble.n	800531a <vTaskResetState+0x36>
    }

    xNumOfOverflows = ( BaseType_t ) 0;
 8005330:	4b10      	ldr	r3, [pc, #64]	; (8005374 <vTaskResetState+0x90>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
    uxTaskNumber = ( UBaseType_t ) 0U;
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <vTaskResetState+0x94>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
    xNextTaskUnblockTime = ( TickType_t ) 0U;
 800533c:	4b0f      	ldr	r3, [pc, #60]	; (800537c <vTaskResetState+0x98>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

    uxSchedulerSuspended = ( UBaseType_t ) 0U;
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <vTaskResetState+0x9c>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
            ulTaskSwitchedInTime[ xCoreID ] = 0U;
            ulTotalRunTime[ xCoreID ] = 0U;
        }
    }
    #endif /* #if ( configGENERATE_RUN_TIME_STATS == 1 ) */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	200001f8 	.word	0x200001f8
 8005358:	200006b4 	.word	0x200006b4
 800535c:	200006cc 	.word	0x200006cc
 8005360:	200006d0 	.word	0x200006d0
 8005364:	200006d4 	.word	0x200006d4
 8005368:	200006d8 	.word	0x200006d8
 800536c:	200006dc 	.word	0x200006dc
 8005370:	200006e0 	.word	0x200006e0
 8005374:	200006e4 	.word	0x200006e4
 8005378:	200006e8 	.word	0x200006e8
 800537c:	200006ec 	.word	0x200006ec
 8005380:	200006f4 	.word	0x200006f4

08005384 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800538e:	f000 fcaf 	bl	8005cf0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <xTimerCreateTimerTask+0x80>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d021      	beq.n	80053de <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80053a2:	1d3a      	adds	r2, r7, #4
 80053a4:	f107 0108 	add.w	r1, r7, #8
 80053a8:	f107 030c 	add.w	r3, r7, #12
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff ff7f 	bl	80052b0 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	9202      	str	r2, [sp, #8]
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	2302      	movs	r3, #2
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2300      	movs	r3, #0
 80053c2:	460a      	mov	r2, r1
 80053c4:	4910      	ldr	r1, [pc, #64]	; (8005408 <xTimerCreateTimerTask+0x84>)
 80053c6:	4811      	ldr	r0, [pc, #68]	; (800540c <xTimerCreateTimerTask+0x88>)
 80053c8:	f7fc fe04 	bl	8001fd4 <xTaskCreateStatic>
 80053cc:	4603      	mov	r3, r0
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <xTimerCreateTimerTask+0x8c>)
 80053d0:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80053d2:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <xTimerCreateTimerTask+0x8c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 80053da:	2301      	movs	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <xTimerCreateTimerTask+0x76>
    __asm volatile
 80053e4:	f04f 0310 	mov.w	r3, #16
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	613b      	str	r3, [r7, #16]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80053fa:	697b      	ldr	r3, [r7, #20]
    }
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200014a0 	.word	0x200014a0
 8005408:	08006fdc 	.word	0x08006fdc
 800540c:	08005919 	.word	0x08005919
 8005410:	200014a4 	.word	0x200014a4

08005414 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005422:	202c      	movs	r0, #44	; 0x2c
 8005424:	f001 f830 	bl	8006488 <pvPortMalloc>
 8005428:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00d      	beq.n	800544c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f843 	bl	80054d2 <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 800544c:	697b      	ldr	r3, [r7, #20]
        }
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 8005456:	b580      	push	{r7, lr}
 8005458:	b08a      	sub	sp, #40	; 0x28
 800545a:	af02      	add	r7, sp, #8
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTimer_t equals the size of the real timer
                 * structure. */
                volatile size_t xSize = sizeof( StaticTimer_t );
 8005464:	232c      	movs	r3, #44	; 0x2c
 8005466:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Timer_t ) );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b2c      	cmp	r3, #44	; 0x2c
 800546c:	d00a      	beq.n	8005484 <xTimerCreateStatic+0x2e>
    __asm volatile
 800546e:	f04f 0310 	mov.w	r3, #16
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	61bb      	str	r3, [r7, #24]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <xTimerCreateStatic+0x2c>
                ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not defined. */
 8005484:	693b      	ldr	r3, [r7, #16]
            }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 8005486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <xTimerCreateStatic+0x4c>
    __asm volatile
 800548c:	f04f 0310 	mov.w	r3, #16
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	617b      	str	r3, [r7, #20]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <xTimerCreateStatic+0x4a>
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTimer = ( Timer_t * ) pxTimerBuffer;
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	61fb      	str	r3, [r7, #28]

            if( pxNewTimer != NULL )
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00d      	beq.n	80054c8 <xTimerCreateStatic+0x72>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = ( uint8_t ) tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f805 	bl	80054d2 <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreateStatic( pxNewTimer );

            return pxNewTimer;
 80054c8:	69fb      	ldr	r3, [r7, #28]
        }
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <prvInitialiseNewTimer+0x2a>
    __asm volatile
 80054e6:	f04f 0310 	mov.w	r3, #16
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	617b      	str	r3, [r7, #20]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80054fc:	f000 fbf8 	bl	8005cf0 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7fb f82d 	bl	800057c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800552e:	f043 0304 	orr.w	r3, r3, #4
 8005532:	b2da      	uxtb	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800553a:	bf00      	nop
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 8005542:	b580      	push	{r7, lr}
 8005544:	b08c      	sub	sp, #48	; 0x30
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005550:	2300      	movs	r3, #0
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10a      	bne.n	8005570 <xTimerGenericCommandFromTask+0x2e>
    __asm volatile
 800555a:	f04f 0310 	mov.w	r3, #16
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800556c:	bf00      	nop
 800556e:	e7fe      	b.n	800556e <xTimerGenericCommandFromTask+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005570:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <xTimerGenericCommandFromTask+0x9e>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02e      	beq.n	80055d6 <xTimerGenericCommandFromTask+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	61fb      	str	r3, [r7, #28]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b05      	cmp	r3, #5
 8005588:	dd0a      	ble.n	80055a0 <xTimerGenericCommandFromTask+0x5e>
    __asm volatile
 800558a:	f04f 0310 	mov.w	r3, #16
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <xTimerGenericCommandFromTask+0x5c>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	dc17      	bgt.n	80055d6 <xTimerGenericCommandFromTask+0x94>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055a6:	f7fe fe7f 	bl	80042a8 <xTaskGetSchedulerState>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d109      	bne.n	80055c4 <xTimerGenericCommandFromTask+0x82>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <xTimerGenericCommandFromTask+0x9e>)
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	f107 0114 	add.w	r1, r7, #20
 80055b8:	2300      	movs	r3, #0
 80055ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055bc:	f7fb fb75 	bl	8000caa <xQueueGenericSend>
 80055c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80055c2:	e008      	b.n	80055d6 <xTimerGenericCommandFromTask+0x94>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <xTimerGenericCommandFromTask+0x9e>)
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	f107 0114 	add.w	r1, r7, #20
 80055cc:	2300      	movs	r3, #0
 80055ce:	2200      	movs	r2, #0
 80055d0:	f7fb fb6b 	bl	8000caa <xQueueGenericSend>
 80055d4:	62f8      	str	r0, [r7, #44]	; 0x2c
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80055d8:	4618      	mov	r0, r3
 80055da:	3730      	adds	r7, #48	; 0x30
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200014a0 	.word	0x200014a0

080055e4 <xTimerGenericCommandFromISR>:
    BaseType_t xTimerGenericCommandFromISR( TimerHandle_t xTimer,
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08c      	sub	sp, #48	; 0x30
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	62fb      	str	r3, [r7, #44]	; 0x2c

        ( void ) xTicksToWait;

        traceENTER_xTimerGenericCommandFromISR( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <xTimerGenericCommandFromISR+0x2e>
    __asm volatile
 80055fc:	f04f 0310 	mov.w	r3, #16
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <xTimerGenericCommandFromISR+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005612:	4b14      	ldr	r3, [pc, #80]	; (8005664 <xTimerGenericCommandFromISR+0x80>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01f      	beq.n	800565a <xTimerGenericCommandFromISR+0x76>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	61fb      	str	r3, [r7, #28]

            configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b05      	cmp	r3, #5
 800562a:	dc0a      	bgt.n	8005642 <xTimerGenericCommandFromISR+0x5e>
    __asm volatile
 800562c:	f04f 0310 	mov.w	r3, #16
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xTimerGenericCommandFromISR+0x5c>

            if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b05      	cmp	r3, #5
 8005646:	dd08      	ble.n	800565a <xTimerGenericCommandFromISR+0x76>
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <xTimerGenericCommandFromISR+0x80>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	f107 0114 	add.w	r1, r7, #20
 8005650:	2300      	movs	r3, #0
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	f7fb fc28 	bl	8000ea8 <xQueueGenericSendFromISR>
 8005658:	62f8      	str	r0, [r7, #44]	; 0x2c
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800565c:	4618      	mov	r0, r3
 800565e:	3730      	adds	r7, #48	; 0x30
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	200014a0 	.word	0x200014a0

08005668 <xTimerGetTimerDaemonTaskHandle>:
/*-----------------------------------------------------------*/

    TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
    {
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
        traceENTER_xTimerGetTimerDaemonTaskHandle();

        /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
         * started, then xTimerTaskHandle will be NULL. */
        configASSERT( ( xTimerTaskHandle != NULL ) );
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <xTimerGetTimerDaemonTaskHandle+0x34>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <xTimerGetTimerDaemonTaskHandle+0x24>
    __asm volatile
 8005676:	f04f 0310 	mov.w	r3, #16
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	607b      	str	r3, [r7, #4]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <xTimerGetTimerDaemonTaskHandle+0x22>

        traceRETURN_xTimerGetTimerDaemonTaskHandle( xTimerTaskHandle );

        return xTimerTaskHandle;
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <xTimerGetTimerDaemonTaskHandle+0x34>)
 800568e:	681b      	ldr	r3, [r3, #0]
    }
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	200014a4 	.word	0x200014a4

080056a0 <xTimerGetPeriod>:
/*-----------------------------------------------------------*/

    TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
    {
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

        traceENTER_xTimerGetPeriod( xTimer );

        configASSERT( xTimer );
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <xTimerGetPeriod+0x28>
    __asm volatile
 80056b2:	f04f 0310 	mov.w	r3, #16
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	60bb      	str	r3, [r7, #8]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <xTimerGetPeriod+0x26>

        traceRETURN_xTimerGetPeriod( pxTimer->xTimerPeriodInTicks );

        return pxTimer->xTimerPeriodInTicks;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	699b      	ldr	r3, [r3, #24]
    }
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

    void vTimerSetReloadMode( TimerHandle_t xTimer,
                              const BaseType_t xAutoReload )
    {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
        Timer_t * pxTimer = xTimer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]

        traceENTER_vTimerSetReloadMode( xTimer, xAutoReload );

        configASSERT( xTimer );
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <vTimerSetReloadMode+0x2a>
    __asm volatile
 80056ec:	f04f 0310 	mov.w	r3, #16
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	60bb      	str	r3, [r7, #8]
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <vTimerSetReloadMode+0x28>
        taskENTER_CRITICAL();
 8005702:	f000 fda5 	bl	8006250 <vPortEnterCritical>
        {
            if( xAutoReload != pdFALSE )
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <vTimerSetReloadMode+0x48>
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005712:	f043 0304 	orr.w	r3, r3, #4
 8005716:	b2da      	uxtb	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800571e:	e008      	b.n	8005732 <vTimerSetReloadMode+0x5a>
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005726:	f023 0304 	bic.w	r3, r3, #4
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }
        }
        taskEXIT_CRITICAL();
 8005732:	f000 fdbd 	bl	80062b0 <vPortExitCritical>

        traceRETURN_vTimerSetReloadMode();
    }
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <xTimerGetReloadMode>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerGetReloadMode( TimerHandle_t xTimer )
    {
 800573e:	b580      	push	{r7, lr}
 8005740:	b086      	sub	sp, #24
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn;

        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <xTimerGetReloadMode+0x28>
    __asm volatile
 8005750:	f04f 0310 	mov.w	r3, #16
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60fb      	str	r3, [r7, #12]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xTimerGetReloadMode+0x26>
        portBASE_TYPE_ENTER_CRITICAL();
 8005766:	f000 fd73 	bl	8006250 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0U )
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <xTimerGetReloadMode+0x40>
            {
                /* Not an auto-reload timer. */
                xReturn = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e001      	b.n	8005782 <xTimerGetReloadMode+0x44>
            }
            else
            {
                /* Is an auto-reload timer. */
                xReturn = pdTRUE;
 800577e:	2301      	movs	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
            }
        }
        portBASE_TYPE_EXIT_CRITICAL();
 8005782:	f000 fd95 	bl	80062b0 <vPortExitCritical>

        traceRETURN_xTimerGetReloadMode( xReturn );

        return xReturn;
 8005786:	697b      	ldr	r3, [r7, #20]
    }
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <uxTimerGetReloadMode>:

    UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
    {
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;

        traceENTER_uxTimerGetReloadMode( xTimer );

        uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff ffd0 	bl	800573e <xTimerGetReloadMode>
 800579e:	4603      	mov	r3, r0
 80057a0:	60fb      	str	r3, [r7, #12]

        traceRETURN_uxTimerGetReloadMode( uxReturn );

        return uxReturn;
 80057a2:	68fb      	ldr	r3, [r7, #12]
    }
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <xTimerGetExpiryTime>:
/*-----------------------------------------------------------*/

    TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
    {
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	617b      	str	r3, [r7, #20]
        TickType_t xReturn;

        traceENTER_xTimerGetExpiryTime( xTimer );

        configASSERT( xTimer );
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <xTimerGetExpiryTime+0x28>
    __asm volatile
 80057be:	f04f 0310 	mov.w	r3, #16
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	60fb      	str	r3, [r7, #12]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <xTimerGetExpiryTime+0x26>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]

        traceRETURN_xTimerGetExpiryTime( xReturn );

        return xReturn;
 80057da:	693b      	ldr	r3, [r7, #16]
    }
 80057dc:	4618      	mov	r0, r3
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <xTimerGetStaticBuffer>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        BaseType_t xTimerGetStaticBuffer( TimerHandle_t xTimer,
                                          StaticTimer_t ** ppxTimerBuffer )
        {
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
            BaseType_t xReturn;
            Timer_t * pxTimer = xTimer;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	613b      	str	r3, [r7, #16]

            traceENTER_xTimerGetStaticBuffer( xTimer, ppxTimerBuffer );

            configASSERT( ppxTimerBuffer != NULL );
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <xTimerGetStaticBuffer+0x2a>
    __asm volatile
 80057fc:	f04f 0310 	mov.w	r3, #16
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	60fb      	str	r3, [r7, #12]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xTimerGetStaticBuffer+0x28>

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) != 0U )
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <xTimerGetStaticBuffer+0x44>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                *ppxTimerBuffer = ( StaticTimer_t * ) pxTimer;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	601a      	str	r2, [r3, #0]
                xReturn = pdTRUE;
 8005826:	2301      	movs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e001      	b.n	8005830 <xTimerGetStaticBuffer+0x48>
            }
            else
            {
                xReturn = pdFALSE;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
            }

            traceRETURN_xTimerGetStaticBuffer( xReturn );

            return xReturn;
 8005830:	697b      	ldr	r3, [r7, #20]
        }
 8005832:	4618      	mov	r0, r3
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <pcTimerGetName>:
    #endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

    const char * pcTimerGetName( TimerHandle_t xTimer )
    {
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]

        traceENTER_pcTimerGetName( xTimer );

        configASSERT( xTimer );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <pcTimerGetName+0x28>
    __asm volatile
 8005850:	f04f 0310 	mov.w	r3, #16
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60bb      	str	r3, [r7, #8]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <pcTimerGetName+0x26>

        traceRETURN_pcTimerGetName( pxTimer->pcTimerName );

        return pxTimer->pcTimerName;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
    }
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005882:	e008      	b.n	8005896 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	4413      	add	r3, r2
 800588c:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	18d1      	adds	r1, r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f8dc 	bl	8005a60 <prvInsertTimerInActiveList>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1ea      	bne.n	8005884 <prvReloadTimer+0xe>
        }
    }
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058c2:	4b14      	ldr	r3, [pc, #80]	; (8005914 <prvProcessExpiredTimer+0x5c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fa febd 	bl	8000650 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff ffc4 	bl	8005876 <prvReloadTimer>
 80058ee:	e008      	b.n	8005902 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	4798      	blx	r3
    }
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20001498 	.word	0x20001498

08005918 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005920:	f107 0308 	add.w	r3, r7, #8
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f857 	bl	80059d8 <prvGetNextExpireTime>
 800592a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4619      	mov	r1, r3
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f803 	bl	800593c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005936:	f000 f8d5 	bl	8005ae4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800593a:	e7f1      	b.n	8005920 <prvTimerTask+0x8>

0800593c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005946:	f7fd fb6b 	bl	8003020 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800594a:	f107 0308 	add.w	r3, r7, #8
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f866 	bl	8005a20 <prvSampleTimeNow>
 8005954:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d130      	bne.n	80059be <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <prvProcessTimerOrBlockTask+0x3c>
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	429a      	cmp	r2, r3
 8005968:	d806      	bhi.n	8005978 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800596a:	f7fd fb67 	bl	800303c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800596e:	68f9      	ldr	r1, [r7, #12]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff ffa1 	bl	80058b8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005976:	e024      	b.n	80059c2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d008      	beq.n	8005990 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <prvProcessTimerOrBlockTask+0x90>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <prvProcessTimerOrBlockTask+0x50>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <prvProcessTimerOrBlockTask+0x52>
 800598c:	2300      	movs	r3, #0
 800598e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <prvProcessTimerOrBlockTask+0x94>)
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	4619      	mov	r1, r3
 800599e:	f7fc fa87 	bl	8001eb0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80059a2:	f7fd fb4b 	bl	800303c <xTaskResumeAll>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80059ac:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <prvProcessTimerOrBlockTask+0x98>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	f3bf 8f6f 	isb	sy
    }
 80059bc:	e001      	b.n	80059c2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80059be:	f7fd fb3d 	bl	800303c <xTaskResumeAll>
    }
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	2000149c 	.word	0x2000149c
 80059d0:	200014a0 	.word	0x200014a0
 80059d4:	e000ed04 	.word	0xe000ed04

080059d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059e0:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <prvGetNextExpireTime+0x44>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <prvGetNextExpireTime+0x16>
 80059ea:	2201      	movs	r2, #1
 80059ec:	e000      	b.n	80059f0 <prvGetNextExpireTime+0x18>
 80059ee:	2200      	movs	r2, #0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <prvGetNextExpireTime+0x44>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	e001      	b.n	8005a0c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
    }
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20001498 	.word	0x20001498

08005a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8005a28:	f7fd fc10 	bl	800324c <xTaskGetTickCount>
 8005a2c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <prvSampleTimeNow+0x3c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d205      	bcs.n	8005a44 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005a38:	f000 f934 	bl	8005ca4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e002      	b.n	8005a4a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005a4a:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <prvSampleTimeNow+0x3c>)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005a50:	68fb      	ldr	r3, [r7, #12]
    }
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	200014a8 	.word	0x200014a8

08005a60 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d812      	bhi.n	8005aac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d302      	bcc.n	8005a9a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e01b      	b.n	8005ad2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <prvInsertTimerInActiveList+0x7c>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7fa fd9a 	bl	80005de <vListInsert>
 8005aaa:	e012      	b.n	8005ad2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d206      	bcs.n	8005ac2 <prvInsertTimerInActiveList+0x62>
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e007      	b.n	8005ad2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ac2:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <prvInsertTimerInActiveList+0x80>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f7fa fd86 	bl	80005de <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005ad2:	697b      	ldr	r3, [r7, #20]
    }
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	2000149c 	.word	0x2000149c
 8005ae0:	20001498 	.word	0x20001498

08005ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8005aea:	1d3b      	adds	r3, r7, #4
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	609a      	str	r2, [r3, #8]
 8005af4:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8005af6:	e0c2      	b.n	8005c7e <prvProcessReceivedCommands+0x19a>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da18      	bge.n	8005b30 <prvProcessReceivedCommands+0x4c>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005afe:	1d3b      	adds	r3, r7, #4
 8005b00:	3304      	adds	r3, #4
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <prvProcessReceivedCommands+0x3c>
    __asm volatile
 8005b0a:	f04f 0310 	mov.w	r3, #16
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	61bb      	str	r3, [r7, #24]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b26:	6850      	ldr	r0, [r2, #4]
 8005b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2a:	6892      	ldr	r2, [r2, #8]
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f2c0 80a2 	blt.w	8005c7c <prvProcessReceivedCommands+0x198>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d004      	beq.n	8005b4e <prvProcessReceivedCommands+0x6a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fa fd81 	bl	8000650 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b4e:	463b      	mov	r3, r7
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff ff65 	bl	8005a20 <prvSampleTimeNow>
 8005b56:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	f200 808e 	bhi.w	8005c7e <prvProcessReceivedCommands+0x19a>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <prvProcessReceivedCommands+0x84>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b8d 	.word	0x08005b8d
 8005b6c:	08005b8d 	.word	0x08005b8d
 8005b70:	08005bf5 	.word	0x08005bf5
 8005b74:	08005c09 	.word	0x08005c09
 8005b78:	08005c53 	.word	0x08005c53
 8005b7c:	08005b8d 	.word	0x08005b8d
 8005b80:	08005b8d 	.word	0x08005b8d
 8005b84:	08005bf5 	.word	0x08005bf5
 8005b88:	08005c09 	.word	0x08005c09
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	18d1      	adds	r1, r2, r3
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	6a38      	ldr	r0, [r7, #32]
 8005bac:	f7ff ff58 	bl	8005a60 <prvInsertTimerInActiveList>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d063      	beq.n	8005c7e <prvProcessReceivedCommands+0x19a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <prvProcessReceivedCommands+0xf4>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	4413      	add	r3, r2
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6a38      	ldr	r0, [r7, #32]
 8005bd2:	f7ff fe50 	bl	8005876 <prvReloadTimer>
 8005bd6:	e008      	b.n	8005bea <prvProcessReceivedCommands+0x106>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	6a38      	ldr	r0, [r7, #32]
 8005bf0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005bf2:	e044      	b.n	8005c7e <prvProcessReceivedCommands+0x19a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005c06:	e03a      	b.n	8005c7e <prvProcessReceivedCommands+0x19a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <prvProcessReceivedCommands+0x15a>
    __asm volatile
 8005c28:	f04f 0310 	mov.w	r3, #16
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	617b      	str	r3, [r7, #20]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <prvProcessReceivedCommands+0x158>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	18d1      	adds	r1, r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	6a38      	ldr	r0, [r7, #32]
 8005c4c:	f7ff ff08 	bl	8005a60 <prvInsertTimerInActiveList>
                        break;
 8005c50:	e015      	b.n	8005c7e <prvProcessReceivedCommands+0x19a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d103      	bne.n	8005c68 <prvProcessReceivedCommands+0x184>
                            {
                                vPortFree( pxTimer );
 8005c60:	6a38      	ldr	r0, [r7, #32]
 8005c62:	f000 fcff 	bl	8006664 <vPortFree>
 8005c66:	e00a      	b.n	8005c7e <prvProcessReceivedCommands+0x19a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005c7a:	e000      	b.n	8005c7e <prvProcessReceivedCommands+0x19a>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005c7c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <prvProcessReceivedCommands+0x1bc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	1d39      	adds	r1, r7, #4
 8005c84:	2200      	movs	r2, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fb fa64 	bl	8001154 <xQueueReceive>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f47f af32 	bne.w	8005af8 <prvProcessReceivedCommands+0x14>
        }
    }
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3728      	adds	r7, #40	; 0x28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	200014a0 	.word	0x200014a0

08005ca4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005caa:	e009      	b.n	8005cc0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cac:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <prvSwitchTimerLists+0x44>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005cb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cba:	6838      	ldr	r0, [r7, #0]
 8005cbc:	f7ff fdfc 	bl	80058b8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <prvSwitchTimerLists+0x44>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1f0      	bne.n	8005cac <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005cca:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <prvSwitchTimerLists+0x44>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <prvSwitchTimerLists+0x48>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <prvSwitchTimerLists+0x44>)
 8005cd6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005cd8:	4a04      	ldr	r2, [pc, #16]	; (8005cec <prvSwitchTimerLists+0x48>)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6013      	str	r3, [r2, #0]
    }
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20001498 	.word	0x20001498
 8005cec:	2000149c 	.word	0x2000149c

08005cf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005cf6:	f000 faab 	bl	8006250 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005cfa:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <prvCheckForValidListAndQueue+0x60>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d120      	bne.n	8005d44 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8005d02:	4814      	ldr	r0, [pc, #80]	; (8005d54 <prvCheckForValidListAndQueue+0x64>)
 8005d04:	f7fa fc1a 	bl	800053c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005d08:	4813      	ldr	r0, [pc, #76]	; (8005d58 <prvCheckForValidListAndQueue+0x68>)
 8005d0a:	f7fa fc17 	bl	800053c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005d0e:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <prvCheckForValidListAndQueue+0x6c>)
 8005d10:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <prvCheckForValidListAndQueue+0x64>)
 8005d12:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005d14:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <prvCheckForValidListAndQueue+0x70>)
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <prvCheckForValidListAndQueue+0x68>)
 8005d18:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <prvCheckForValidListAndQueue+0x74>)
 8005d20:	4a11      	ldr	r2, [pc, #68]	; (8005d68 <prvCheckForValidListAndQueue+0x78>)
 8005d22:	2110      	movs	r1, #16
 8005d24:	200a      	movs	r0, #10
 8005d26:	f7fa fd4d 	bl	80007c4 <xQueueGenericCreateStatic>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <prvCheckForValidListAndQueue+0x60>)
 8005d2e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <prvCheckForValidListAndQueue+0x60>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <prvCheckForValidListAndQueue+0x60>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	490b      	ldr	r1, [pc, #44]	; (8005d6c <prvCheckForValidListAndQueue+0x7c>)
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fb fffb 	bl	8001d3a <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005d44:	f000 fab4 	bl	80062b0 <vPortExitCritical>
    }
 8005d48:	bf00      	nop
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200014a0 	.word	0x200014a0
 8005d54:	20001470 	.word	0x20001470
 8005d58:	20001484 	.word	0x20001484
 8005d5c:	20001498 	.word	0x20001498
 8005d60:	2000149c 	.word	0x2000149c
 8005d64:	2000154c 	.word	0x2000154c
 8005d68:	200014ac 	.word	0x200014ac
 8005d6c:	08006fe4 	.word	0x08006fe4

08005d70 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	613b      	str	r3, [r7, #16]

        traceENTER_xTimerIsTimerActive( xTimer );

        configASSERT( xTimer );
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10a      	bne.n	8005d98 <xTimerIsTimerActive+0x28>
    __asm volatile
 8005d82:	f04f 0310 	mov.w	r3, #16
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60fb      	str	r3, [r7, #12]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        portBASE_TYPE_ENTER_CRITICAL();
 8005d98:	f000 fa5a 	bl	8006250 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0U )
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d102      	bne.n	8005db0 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	e001      	b.n	8005db4 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	617b      	str	r3, [r7, #20]
            }
        }
        portBASE_TYPE_EXIT_CRITICAL();
 8005db4:	f000 fa7c 	bl	80062b0 <vPortExitCritical>

        traceRETURN_xTimerIsTimerActive( xReturn );

        return xReturn;
 8005db8:	697b      	ldr	r3, [r7, #20]
    }
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b086      	sub	sp, #24
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <pvTimerGetTimerID+0x28>
    __asm volatile
 8005dd4:	f04f 0310 	mov.w	r3, #16
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60fb      	str	r3, [r7, #12]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8005dea:	f000 fa31 	bl	8006250 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8005df4:	f000 fa5c 	bl	80062b0 <vPortExitCritical>

        traceRETURN_pvTimerGetTimerID( pvReturn );

        return pvReturn;
 8005df8:	693b      	ldr	r3, [r7, #16]
    }
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = xTimer;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTimerSetTimerID( xTimer, pvNewID );

        configASSERT( xTimer );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <vTimerSetTimerID+0x2a>
    __asm volatile
 8005e16:	f04f 0310 	mov.w	r3, #16
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60bb      	str	r3, [r7, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <vTimerSetTimerID+0x28>

        taskENTER_CRITICAL();
 8005e2c:	f000 fa10 	bl	8006250 <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	61da      	str	r2, [r3, #28]
        }
        taskEXIT_CRITICAL();
 8005e36:	f000 fa3b 	bl	80062b0 <vPortExitCritical>

        traceRETURN_vTimerSetTimerID();
    }
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b08a      	sub	sp, #40	; 0x28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	607a      	str	r2, [r7, #4]
 8005e4e:	603b      	str	r3, [r7, #0]

            traceENTER_xTimerPendFunctionCallFromISR( xFunctionToPend, pvParameter1, ulParameter2, pxHigherPriorityTaskWoken );

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005e50:	f06f 0301 	mvn.w	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <xTimerPendFunctionCallFromISR+0x3e>)
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	f107 0114 	add.w	r1, r7, #20
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	f7fb f81b 	bl	8000ea8 <xQueueGenericSendFromISR>
 8005e72:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
            traceRETURN_xTimerPendFunctionCallFromISR( xReturn );

            return xReturn;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 8005e76:	4618      	mov	r0, r3
 8005e78:	3728      	adds	r7, #40	; 0x28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200014a0 	.word	0x200014a0

08005e84 <xTimerPendFunctionCall>:

        BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait )
        {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08a      	sub	sp, #40	; 0x28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerPendFunctionCall( xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait );

            /* This function can only be called after a timer has been created or
             * after the scheduler has been started because, until then, the timer
             * queue does not exist. */
            configASSERT( xTimerQueue );
 8005e92:	4b13      	ldr	r3, [pc, #76]	; (8005ee0 <xTimerPendFunctionCall+0x5c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <xTimerPendFunctionCall+0x2c>
    __asm volatile
 8005e9a:	f04f 0310 	mov.w	r3, #16
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	623b      	str	r3, [r7, #32]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xTimerPendFunctionCall+0x2a>

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb4:	613b      	str	r3, [r7, #16]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	61fb      	str	r3, [r7, #28]

            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <xTimerPendFunctionCall+0x5c>)
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	f107 0110 	add.w	r1, r7, #16
 8005eca:	2300      	movs	r3, #0
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	f7fa feec 	bl	8000caa <xQueueGenericSend>
 8005ed2:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
            traceRETURN_xTimerPendFunctionCall( xReturn );

            return xReturn;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3728      	adds	r7, #40	; 0x28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	200014a0 	.word	0x200014a0

08005ee4 <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

    #if ( configUSE_TRACE_FACILITY == 1 )

        UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
        {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
            traceENTER_uxTimerGetTimerNumber( xTimer );

            traceRETURN_uxTimerGetTimerNumber( ( ( Timer_t * ) xTimer )->uxTimerNumber );

            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <vTimerSetTimerNumber>:

    #if ( configUSE_TRACE_FACILITY == 1 )

        void vTimerSetTimerNumber( TimerHandle_t xTimer,
                                   UBaseType_t uxTimerNumber )
        {
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
            traceENTER_vTimerSetTimerNumber( xTimer, uxTimerNumber );

            ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24

            traceRETURN_vTimerSetTimerNumber();
        }
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <vTimerResetState>:
 * Reset the state in this file. This state is normally initialized at start up.
 * This function must be called by the application before restarting the
 * scheduler.
 */
    void vTimerResetState( void )
    {
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
        xTimerQueue = NULL;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <vTimerResetState+0x1c>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
        xTimerTaskHandle = NULL;
 8005f22:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <vTimerResetState+0x20>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
    }
 8005f28:	bf00      	nop
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	200014a0 	.word	0x200014a0
 8005f38:	200014a4 	.word	0x200014a4

08005f3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3b04      	subs	r3, #4
 8005f4c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 0201 	bic.w	r2, r3, #1
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3b04      	subs	r3, #4
 8005f6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005f6c:	4a0c      	ldr	r2, [pc, #48]	; (8005fa0 <pxPortInitialiseStack+0x64>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3b14      	subs	r3, #20
 8005f76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3b04      	subs	r3, #4
 8005f82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f06f 0202 	mvn.w	r2, #2
 8005f8a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3b20      	subs	r3, #32
 8005f90:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005f92:	68fb      	ldr	r3, [r7, #12]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	08005fa5 	.word	0x08005fa5

08005fa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <prvTaskExitError+0x54>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fb6:	d00a      	beq.n	8005fce <prvTaskExitError+0x2a>
    __asm volatile
 8005fb8:	f04f 0310 	mov.w	r3, #16
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	60fb      	str	r3, [r7, #12]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <prvTaskExitError+0x28>
    __asm volatile
 8005fce:	f04f 0310 	mov.w	r3, #16
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	60bb      	str	r3, [r7, #8]
}
 8005fe0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005fe2:	bf00      	nop
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0fc      	beq.n	8005fe4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	2000000c 	.word	0x2000000c

08005ffc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <SVC_Handler+0x1c>)
 8005ffe:	6819      	ldr	r1, [r3, #0]
 8006000:	6808      	ldr	r0, [r1, #0]
 8006002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006006:	f380 8809 	msr	PSP, r0
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f04f 0000 	mov.w	r0, #0
 8006012:	f380 8811 	msr	BASEPRI, r0
 8006016:	4770      	bx	lr
 8006018:	200001f8 	.word	0x200001f8
        "   msr basepri, r0                 \n"
        "   bx r14                          \n"
        "                                   \n"
        "   .ltorg                          \n"
        );
}
 800601c:	bf00      	nop

0800601e <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800601e:	4808      	ldr	r0, [pc, #32]	; (8006040 <prvPortStartFirstTask+0x22>)
 8006020:	6800      	ldr	r0, [r0, #0]
 8006022:	6800      	ldr	r0, [r0, #0]
 8006024:	f380 8808 	msr	MSP, r0
 8006028:	f04f 0000 	mov.w	r0, #0
 800602c:	f380 8814 	msr	CONTROL, r0
 8006030:	b662      	cpsie	i
 8006032:	b661      	cpsie	f
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	df00      	svc	0
 800603e:	bf00      	nop
 8006040:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8006044:	bf00      	nop

08006046 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b08c      	sub	sp, #48	; 0x30
 800604a:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800604c:	4b65      	ldr	r3, [pc, #404]	; (80061e4 <xPortStartScheduler+0x19e>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a65      	ldr	r2, [pc, #404]	; (80061e8 <xPortStartScheduler+0x1a2>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d10a      	bne.n	800606c <xPortStartScheduler+0x26>
    __asm volatile
 8006056:	f04f 0310 	mov.w	r3, #16
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800606c:	4b5d      	ldr	r3, [pc, #372]	; (80061e4 <xPortStartScheduler+0x19e>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a5e      	ldr	r2, [pc, #376]	; (80061ec <xPortStartScheduler+0x1a6>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d10a      	bne.n	800608c <xPortStartScheduler+0x46>
    __asm volatile
 8006076:	f04f 0310 	mov.w	r3, #16
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	623b      	str	r3, [r7, #32]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <xPortStartScheduler+0x44>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800608c:	4b58      	ldr	r3, [pc, #352]	; (80061f0 <xPortStartScheduler+0x1aa>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
         * https://www.freertos.org/Why-FreeRTOS/FAQs.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	332c      	adds	r3, #44	; 0x2c
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a56      	ldr	r2, [pc, #344]	; (80061f4 <xPortStartScheduler+0x1ae>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00a      	beq.n	80060b4 <xPortStartScheduler+0x6e>
    __asm volatile
 800609e:	f04f 0310 	mov.w	r3, #16
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	61fb      	str	r3, [r7, #28]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <xPortStartScheduler+0x6c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	3338      	adds	r3, #56	; 0x38
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a4f      	ldr	r2, [pc, #316]	; (80061f8 <xPortStartScheduler+0x1b2>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00a      	beq.n	80060d6 <xPortStartScheduler+0x90>
    __asm volatile
 80060c0:	f04f 0310 	mov.w	r3, #16
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61bb      	str	r3, [r7, #24]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xPortStartScheduler+0x8e>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060da:	4b48      	ldr	r3, [pc, #288]	; (80061fc <xPortStartScheduler+0x1b6>)
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	22ff      	movs	r2, #255	; 0xff
 80060ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	4b40      	ldr	r3, [pc, #256]	; (8006200 <xPortStartScheduler+0x1ba>)
 8006100:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006102:	4b3f      	ldr	r3, [pc, #252]	; (8006200 <xPortStartScheduler+0x1ba>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <xPortStartScheduler+0xda>
    __asm volatile
 800610a:	f04f 0310 	mov.w	r3, #16
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	617b      	str	r3, [r7, #20]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <xPortStartScheduler+0xd8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8006120:	79fb      	ldrb	r3, [r7, #7]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	d012      	beq.n	8006154 <xPortStartScheduler+0x10e>
    __asm volatile
 800612e:	f04f 0310 	mov.w	r3, #16
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	613b      	str	r3, [r7, #16]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <xPortStartScheduler+0xfc>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	3301      	adds	r3, #1
 8006148:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	b2db      	uxtb	r3, r3
 8006152:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615c:	2b80      	cmp	r3, #128	; 0x80
 800615e:	d0f1      	beq.n	8006144 <xPortStartScheduler+0xfe>
        }

        if( ulImplementedPrioBits == 8 )
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b08      	cmp	r3, #8
 8006164:	d103      	bne.n	800616e <xPortStartScheduler+0x128>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8006166:	4b27      	ldr	r3, [pc, #156]	; (8006204 <xPortStartScheduler+0x1be>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e004      	b.n	8006178 <xPortStartScheduler+0x132>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f1c3 0307 	rsb	r3, r3, #7
 8006174:	4a23      	ldr	r2, [pc, #140]	; (8006204 <xPortStartScheduler+0x1be>)
 8006176:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006178:	4b22      	ldr	r3, [pc, #136]	; (8006204 <xPortStartScheduler+0x1be>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	4a21      	ldr	r2, [pc, #132]	; (8006204 <xPortStartScheduler+0x1be>)
 8006180:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006182:	4b20      	ldr	r3, [pc, #128]	; (8006204 <xPortStartScheduler+0x1be>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800618a:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <xPortStartScheduler+0x1be>)
 800618c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006196:	4b1c      	ldr	r3, [pc, #112]	; (8006208 <xPortStartScheduler+0x1c2>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1b      	ldr	r2, [pc, #108]	; (8006208 <xPortStartScheduler+0x1c2>)
 800619c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80061a2:	4b19      	ldr	r3, [pc, #100]	; (8006208 <xPortStartScheduler+0x1c2>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <xPortStartScheduler+0x1c2>)
 80061a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ac:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80061ae:	4b17      	ldr	r3, [pc, #92]	; (800620c <xPortStartScheduler+0x1c6>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80061b4:	f000 f8fa 	bl	80063ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80061b8:	4b15      	ldr	r3, [pc, #84]	; (8006210 <xPortStartScheduler+0x1ca>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80061be:	f000 f919 	bl	80063f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061c2:	4b14      	ldr	r3, [pc, #80]	; (8006214 <xPortStartScheduler+0x1ce>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a13      	ldr	r2, [pc, #76]	; (8006214 <xPortStartScheduler+0x1ce>)
 80061c8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061cc:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80061ce:	f7ff ff26 	bl	800601e <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80061d2:	f7fd fac3 	bl	800375c <vTaskSwitchContext>
    prvTaskExitError();
 80061d6:	f7ff fee5 	bl	8005fa4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3730      	adds	r7, #48	; 0x30
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	e000ed00 	.word	0xe000ed00
 80061e8:	410fc271 	.word	0x410fc271
 80061ec:	410fc270 	.word	0x410fc270
 80061f0:	e000ed08 	.word	0xe000ed08
 80061f4:	08005ffd 	.word	0x08005ffd
 80061f8:	08006305 	.word	0x08006305
 80061fc:	e000e400 	.word	0xe000e400
 8006200:	2000159c 	.word	0x2000159c
 8006204:	200015a0 	.word	0x200015a0
 8006208:	e000ed20 	.word	0xe000ed20
 800620c:	e000ed1c 	.word	0xe000ed1c
 8006210:	2000000c 	.word	0x2000000c
 8006214:	e000ef34 	.word	0xe000ef34

08006218 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
    /* Not implemented in ports where there is nothing to return to.
     * Artificially force an assert. */
    configASSERT( uxCriticalNesting == 1000UL );
 800621e:	4b0b      	ldr	r3, [pc, #44]	; (800624c <vPortEndScheduler+0x34>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006226:	d00a      	beq.n	800623e <vPortEndScheduler+0x26>
    __asm volatile
 8006228:	f04f 0310 	mov.w	r3, #16
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	607b      	str	r3, [r7, #4]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <vPortEndScheduler+0x24>
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	2000000c 	.word	0x2000000c

08006250 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
    __asm volatile
 8006256:	f04f 0310 	mov.w	r3, #16
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	607b      	str	r3, [r7, #4]
}
 8006268:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800626a:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <vPortEnterCritical+0x58>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3301      	adds	r3, #1
 8006270:	4a0d      	ldr	r2, [pc, #52]	; (80062a8 <vPortEnterCritical+0x58>)
 8006272:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <vPortEnterCritical+0x58>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d10f      	bne.n	800629c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <vPortEnterCritical+0x5c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <vPortEnterCritical+0x4c>
    __asm volatile
 8006286:	f04f 0310 	mov.w	r3, #16
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	603b      	str	r3, [r7, #0]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <vPortEnterCritical+0x4a>
    }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	2000000c 	.word	0x2000000c
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <vPortExitCritical+0x50>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <vPortExitCritical+0x24>
    __asm volatile
 80062be:	f04f 0310 	mov.w	r3, #16
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <vPortExitCritical+0x50>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3b01      	subs	r3, #1
 80062da:	4a09      	ldr	r2, [pc, #36]	; (8006300 <vPortExitCritical+0x50>)
 80062dc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <vPortExitCritical+0x50>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d105      	bne.n	80062f2 <vPortExitCritical+0x42>
 80062e6:	2300      	movs	r3, #0
 80062e8:	603b      	str	r3, [r7, #0]
    __asm volatile
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	f383 8811 	msr	BASEPRI, r3
}
 80062f0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	2000000c 	.word	0x2000000c

08006304 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006304:	f3ef 8009 	mrs	r0, PSP
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	4b14      	ldr	r3, [pc, #80]	; (8006360 <PendSV_Handler+0x5c>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	f01e 0f10 	tst.w	lr, #16
 8006314:	bf08      	it	eq
 8006316:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800631a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631e:	6010      	str	r0, [r2, #0]
 8006320:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006324:	f04f 0010 	mov.w	r0, #16
 8006328:	f380 8811 	msr	BASEPRI, r0
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f7fd fa12 	bl	800375c <vTaskSwitchContext>
 8006338:	f04f 0000 	mov.w	r0, #0
 800633c:	f380 8811 	msr	BASEPRI, r0
 8006340:	bc09      	pop	{r0, r3}
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6808      	ldr	r0, [r1, #0]
 8006346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	f01e 0f10 	tst.w	lr, #16
 800634e:	bf08      	it	eq
 8006350:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006354:	f380 8809 	msr	PSP, r0
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	4770      	bx	lr
 800635e:	0000      	.short	0x0000
 8006360:	200001f8 	.word	0x200001f8
        "   bx r14                              \n"
        "                                       \n"
        "   .ltorg                              \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006364:	bf00      	nop

08006366 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
    __asm volatile
 800636c:	f04f 0310 	mov.w	r3, #16
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	607b      	str	r3, [r7, #4]
}
 800637e:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006380:	f7fd f8d2 	bl	8003528 <xTaskIncrementTick>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800638a:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <xPortSysTickHandler+0x42>)
 800638c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	2300      	movs	r3, #0
 8006394:	603b      	str	r3, [r7, #0]
    __asm volatile
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	f383 8811 	msr	BASEPRI, r3
}
 800639c:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <vPortSetupTimerInterrupt+0x34>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <vPortSetupTimerInterrupt+0x38>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <vPortSetupTimerInterrupt+0x3c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a0a      	ldr	r2, [pc, #40]	; (80063ec <vPortSetupTimerInterrupt+0x40>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	0a5b      	lsrs	r3, r3, #9
 80063c8:	4a09      	ldr	r2, [pc, #36]	; (80063f0 <vPortSetupTimerInterrupt+0x44>)
 80063ca:	3b01      	subs	r3, #1
 80063cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ce:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <vPortSetupTimerInterrupt+0x34>)
 80063d0:	2207      	movs	r2, #7
 80063d2:	601a      	str	r2, [r3, #0]
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	e000e010 	.word	0xe000e010
 80063e4:	e000e018 	.word	0xe000e018
 80063e8:	20000000 	.word	0x20000000
 80063ec:	10624dd3 	.word	0x10624dd3
 80063f0:	e000e014 	.word	0xe000e014

080063f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80063f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006404 <vPortEnableVFP+0x10>
 80063f8:	6801      	ldr	r1, [r0, #0]
 80063fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063fe:	6001      	str	r1, [r0, #0]
 8006400:	4770      	bx	lr
 8006402:	0000      	.short	0x0000
 8006404:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8006408:	bf00      	nop

0800640a <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006410:	f3ef 8305 	mrs	r3, IPSR
 8006414:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b0f      	cmp	r3, #15
 800641a:	d914      	bls.n	8006446 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800641c:	4a16      	ldr	r2, [pc, #88]	; (8006478 <vPortValidateInterruptPriority+0x6e>)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.freertos.org/Why-FreeRTOS/FAQs */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <vPortValidateInterruptPriority+0x72>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	7afa      	ldrb	r2, [r7, #11]
 800642c:	429a      	cmp	r2, r3
 800642e:	d20a      	bcs.n	8006446 <vPortValidateInterruptPriority+0x3c>
    __asm volatile
 8006430:	f04f 0310 	mov.w	r3, #16
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	607b      	str	r3, [r7, #4]
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006446:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <vPortValidateInterruptPriority+0x76>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800644e:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <vPortValidateInterruptPriority+0x7a>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d90a      	bls.n	800646c <vPortValidateInterruptPriority+0x62>
    __asm volatile
 8006456:	f04f 0310 	mov.w	r3, #16
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	603b      	str	r3, [r7, #0]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <vPortValidateInterruptPriority+0x60>
    }
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	e000e3f0 	.word	0xe000e3f0
 800647c:	2000159c 	.word	0x2000159c
 8006480:	e000ed0c 	.word	0xe000ed0c
 8006484:	200015a0 	.word	0x200015a0

08006488 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	; 0x30
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	623b      	str	r3, [r7, #32]

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8006498:	4b6d      	ldr	r3, [pc, #436]	; (8006650 <pvPortMalloc+0x1c8>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <pvPortMalloc+0x2e>
    __asm volatile
 80064a0:	f04f 0310 	mov.w	r3, #16
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	617b      	str	r3, [r7, #20]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <pvPortMalloc+0x2c>

    if( xWantedSize > 0 )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d022      	beq.n	8006502 <pvPortMalloc+0x7a>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80064bc:	2308      	movs	r3, #8
 80064be:	43db      	mvns	r3, r3
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d81b      	bhi.n	80064fe <pvPortMalloc+0x76>
        {
            xWantedSize += xHeapStructSize;
 80064c6:	2208      	movs	r2, #8
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4413      	add	r3, r2
 80064cc:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d014      	beq.n	8006502 <pvPortMalloc+0x7a>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	f1c3 0308 	rsb	r3, r3, #8
 80064e2:	61fb      	str	r3, [r7, #28]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	43db      	mvns	r3, r3
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d804      	bhi.n	80064f8 <pvPortMalloc+0x70>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	607b      	str	r3, [r7, #4]
 80064f6:	e004      	b.n	8006502 <pvPortMalloc+0x7a>
                }
                else
                {
                    xWantedSize = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	e001      	b.n	8006502 <pvPortMalloc+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8006502:	f7fc fd8d 	bl	8003020 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f2c0 8089 	blt.w	8006620 <pvPortMalloc+0x198>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8085 	beq.w	8006620 <pvPortMalloc+0x198>
 8006516:	4b4f      	ldr	r3, [pc, #316]	; (8006654 <pvPortMalloc+0x1cc>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d87f      	bhi.n	8006620 <pvPortMalloc+0x198>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006520:	4b4d      	ldr	r3, [pc, #308]	; (8006658 <pvPortMalloc+0x1d0>)
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8006524:	4b4c      	ldr	r3, [pc, #304]	; (8006658 <pvPortMalloc+0x1d0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800652a:	e004      	b.n	8006536 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d903      	bls.n	8006548 <pvPortMalloc+0xc0>
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f1      	bne.n	800652c <pvPortMalloc+0xa4>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006548:	4b41      	ldr	r3, [pc, #260]	; (8006650 <pvPortMalloc+0x1c8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800654e:	429a      	cmp	r2, r3
 8006550:	d066      	beq.n	8006620 <pvPortMalloc+0x198>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2208      	movs	r2, #8
 8006558:	4413      	add	r3, r2
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d90a      	bls.n	8006584 <pvPortMalloc+0xfc>
    __asm volatile
 800656e:	f04f 0310 	mov.w	r3, #16
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	613b      	str	r3, [r7, #16]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <pvPortMalloc+0xfa>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	2308      	movs	r3, #8
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	429a      	cmp	r2, r3
 8006592:	d923      	bls.n	80065dc <pvPortMalloc+0x154>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <pvPortMalloc+0x134>
    __asm volatile
 80065a6:	f04f 0310 	mov.w	r3, #16
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60fb      	str	r3, [r7, #12]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <pvPortMalloc+0x132>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065dc:	4b1d      	ldr	r3, [pc, #116]	; (8006654 <pvPortMalloc+0x1cc>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <pvPortMalloc+0x1cc>)
 80065e8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <pvPortMalloc+0x1cc>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b1b      	ldr	r3, [pc, #108]	; (800665c <pvPortMalloc+0x1d4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d203      	bcs.n	80065fe <pvPortMalloc+0x176>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065f6:	4b17      	ldr	r3, [pc, #92]	; (8006654 <pvPortMalloc+0x1cc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a18      	ldr	r2, [pc, #96]	; (800665c <pvPortMalloc+0x1d4>)
 80065fc:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	623b      	str	r3, [r7, #32]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006616:	4b12      	ldr	r3, [pc, #72]	; (8006660 <pvPortMalloc+0x1d8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3301      	adds	r3, #1
 800661c:	4a10      	ldr	r2, [pc, #64]	; (8006660 <pvPortMalloc+0x1d8>)
 800661e:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8006620:	f7fc fd0c 	bl	800303c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <pvPortMalloc+0x1bc>
    __asm volatile
 800662e:	f04f 0310 	mov.w	r3, #16
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	60bb      	str	r3, [r7, #8]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <pvPortMalloc+0x1ba>
    return pvReturn;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006646:	4618      	mov	r0, r3
 8006648:	3730      	adds	r7, #48	; 0x30
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	200015ac 	.word	0x200015ac
 8006654:	200015b0 	.word	0x200015b0
 8006658:	200015a4 	.word	0x200015a4
 800665c:	200015b4 	.word	0x200015b4
 8006660:	200015b8 	.word	0x200015b8

08006664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d049      	beq.n	800670a <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006676:	2308      	movs	r3, #8
 8006678:	425b      	negs	r3, r3
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	613b      	str	r3, [r7, #16]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	db0a      	blt.n	80066a2 <vPortFree+0x3e>
    __asm volatile
 800668c:	f04f 0310 	mov.w	r3, #16
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	60fb      	str	r3, [r7, #12]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <vPortFree+0x5c>
    __asm volatile
 80066aa:	f04f 0310 	mov.w	r3, #16
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	60bb      	str	r3, [r7, #8]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	0fdb      	lsrs	r3, r3, #31
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01c      	beq.n	800670a <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d118      	bne.n	800670a <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80066e4:	f7fc fc9c 	bl	8003020 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	4b09      	ldr	r3, [pc, #36]	; (8006714 <vPortFree+0xb0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4413      	add	r3, r2
 80066f2:	4a08      	ldr	r2, [pc, #32]	; (8006714 <vPortFree+0xb0>)
 80066f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066f6:	6938      	ldr	r0, [r7, #16]
 80066f8:	f000 f868 	bl	80067cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <vPortFree+0xb4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	4a05      	ldr	r2, [pc, #20]	; (8006718 <vPortFree+0xb4>)
 8006704:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006706:	f7fc fc99 	bl	800303c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800670a:	bf00      	nop
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	200015b0 	.word	0x200015b0
 8006718:	200015bc 	.word	0x200015bc

0800671c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006720:	4b03      	ldr	r3, [pc, #12]	; (8006730 <xPortGetFreeHeapSize+0x14>)
 8006722:	681b      	ldr	r3, [r3, #0]
}
 8006724:	4618      	mov	r0, r3
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	200015b0 	.word	0x200015b0

08006734 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8006738:	4b03      	ldr	r3, [pc, #12]	; (8006748 <xPortGetMinimumEverFreeHeapSize+0x14>)
 800673a:	681b      	ldr	r3, [r3, #0]
}
 800673c:	4618      	mov	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	200015b4 	.word	0x200015b4

0800674c <xPortResetHeapMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

void xPortResetHeapMinimumEverFreeHeapSize( void )
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
    xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006750:	4b04      	ldr	r3, [pc, #16]	; (8006764 <xPortResetHeapMinimumEverFreeHeapSize+0x18>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a04      	ldr	r2, [pc, #16]	; (8006768 <xPortResetHeapMinimumEverFreeHeapSize+0x1c>)
 8006756:	6013      	str	r3, [r2, #0]
}
 8006758:	bf00      	nop
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	200015b0 	.word	0x200015b0
 8006768:	200015b4 	.word	0x200015b4

0800676c <pvPortCalloc>:
/*-----------------------------------------------------------*/

void * pvPortCalloc( size_t xNum,
                     size_t xSize )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
    void * pv = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]

    if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <pvPortCalloc+0x28>
 8006780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	fbb2 f3f3 	udiv	r3, r2, r3
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d901      	bls.n	8006794 <pvPortCalloc+0x28>
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <pvPortCalloc+0x2a>
 8006794:	2300      	movs	r3, #0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d113      	bne.n	80067c2 <pvPortCalloc+0x56>
    {
        pv = pvPortMalloc( xNum * xSize );
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fe70 	bl	8006488 <pvPortMalloc>
 80067a8:	60f8      	str	r0, [r7, #12]

        if( pv != NULL )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <pvPortCalloc+0x56>
        {
            ( void ) memset( pv, 0, xNum * xSize );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	2100      	movs	r1, #0
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fb27 	bl	8006e10 <memset>
        }
    }

    return pv;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80067d4:	4b28      	ldr	r3, [pc, #160]	; (8006878 <prvInsertBlockIntoFreeList+0xac>)
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e002      	b.n	80067e0 <prvInsertBlockIntoFreeList+0x14>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d8f7      	bhi.n	80067da <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	4413      	add	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d108      	bne.n	800680e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	441a      	add	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	441a      	add	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d118      	bne.n	8006854 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <prvInsertBlockIntoFreeList+0xb0>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d00d      	beq.n	800684a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	441a      	add	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e008      	b.n	800685c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800684a:	4b0c      	ldr	r3, [pc, #48]	; (800687c <prvInsertBlockIntoFreeList+0xb0>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e003      	b.n	800685c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d002      	beq.n	800686a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	200015a4 	.word	0x200015a4
 800687c:	200015ac 	.word	0x200015ac

08006880 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006880:	b480      	push	{r7}
 8006882:	b08f      	sub	sp, #60	; 0x3c
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	623b      	str	r3, [r7, #32]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	633b      	str	r3, [r7, #48]	; 0x30
    BaseType_t xDefinedRegions = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006894:	4b58      	ldr	r3, [pc, #352]	; (80069f8 <vPortDefineHeapRegions+0x178>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <vPortDefineHeapRegions+0x32>
    __asm volatile
 800689c:	f04f 0310 	mov.w	r3, #16
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	617b      	str	r3, [r7, #20]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <vPortDefineHeapRegions+0x30>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24

    while( pxHeapRegion->xSizeInBytes > 0 )
 80068bc:	e07d      	b.n	80069ba <vPortDefineHeapRegions+0x13a>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00e      	beq.n	80068f2 <vPortDefineHeapRegions+0x72>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	3307      	adds	r3, #7
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	f023 0307 	bic.w	r3, r3, #7
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ee:	4413      	add	r3, r2
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        xAlignedHeap = xAddress;
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	61fb      	str	r3, [r7, #28]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <vPortDefineHeapRegions+0x8a>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	4a3f      	ldr	r2, [pc, #252]	; (80069fc <vPortDefineHeapRegions+0x17c>)
 8006900:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 8006902:	4b3e      	ldr	r3, [pc, #248]	; (80069fc <vPortDefineHeapRegions+0x17c>)
 8006904:	2200      	movs	r2, #0
 8006906:	605a      	str	r2, [r3, #4]
 8006908:	e01f      	b.n	800694a <vPortDefineHeapRegions+0xca>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 800690a:	4b3b      	ldr	r3, [pc, #236]	; (80069f8 <vPortDefineHeapRegions+0x178>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <vPortDefineHeapRegions+0xa8>
    __asm volatile
 8006912:	f04f 0310 	mov.w	r3, #16
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	613b      	str	r3, [r7, #16]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <vPortDefineHeapRegions+0xa6>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8006928:	4b33      	ldr	r3, [pc, #204]	; (80069f8 <vPortDefineHeapRegions+0x178>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	4293      	cmp	r3, r2
 8006932:	d80a      	bhi.n	800694a <vPortDefineHeapRegions+0xca>
    __asm volatile
 8006934:	f04f 0310 	mov.w	r3, #16
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	60fb      	str	r3, [r7, #12]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <vPortDefineHeapRegions+0xc8>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 800694a:	4b2b      	ldr	r3, [pc, #172]	; (80069f8 <vPortDefineHeapRegions+0x178>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	61bb      	str	r3, [r7, #24]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006954:	4413      	add	r3, r2
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006958:	2208      	movs	r2, #8
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	1a9b      	subs	r3, r3, r2
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	f023 0307 	bic.w	r3, r3, #7
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
        pxEnd = ( BlockLink_t * ) xAddress;
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	4a23      	ldr	r2, [pc, #140]	; (80069f8 <vPortDefineHeapRegions+0x178>)
 800696c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 800696e:	4b22      	ldr	r3, [pc, #136]	; (80069f8 <vPortDefineHeapRegions+0x178>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006976:	4b20      	ldr	r3, [pc, #128]	; (80069f8 <vPortDefineHeapRegions+0x178>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	623b      	str	r3, [r7, #32]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006986:	1ad2      	subs	r2, r2, r3
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800698c:	4b1a      	ldr	r3, [pc, #104]	; (80069f8 <vPortDefineHeapRegions+0x178>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <vPortDefineHeapRegions+0x120>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	6a3a      	ldr	r2, [r7, #32]
 800699e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a6:	4413      	add	r3, r2
 80069a8:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	3301      	adds	r3, #1
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	4413      	add	r3, r2
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
    while( pxHeapRegion->xSizeInBytes > 0 )
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f47f af7d 	bne.w	80068be <vPortDefineHeapRegions+0x3e>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 80069c4:	4a0e      	ldr	r2, [pc, #56]	; (8006a00 <vPortDefineHeapRegions+0x180>)
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 80069ca:	4a0e      	ldr	r2, [pc, #56]	; (8006a04 <vPortDefineHeapRegions+0x184>)
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <vPortDefineHeapRegions+0x16c>
    __asm volatile
 80069d6:	f04f 0310 	mov.w	r3, #16
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	60bb      	str	r3, [r7, #8]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <vPortDefineHeapRegions+0x16a>
}
 80069ec:	bf00      	nop
 80069ee:	373c      	adds	r7, #60	; 0x3c
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	200015ac 	.word	0x200015ac
 80069fc:	200015a4 	.word	0x200015a4
 8006a00:	200015b4 	.word	0x200015b4
 8006a04:	200015b0 	.word	0x200015b0

08006a08 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t * pxHeapStats )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8006a10:	2300      	movs	r3, #0
 8006a12:	613b      	str	r3, [r7, #16]
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a1c:	60bb      	str	r3, [r7, #8]

    vTaskSuspendAll();
 8006a1e:	f7fc faff 	bl	8003020 <vTaskSuspendAll>
    {
        pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <vPortGetHeapStats+0xac>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	617b      	str	r3, [r7, #20]

        /* pxBlock will be NULL if the heap has not been initialised.  The heap
         * is initialised automatically when the first allocation is made. */
        if( pxBlock != NULL )
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01f      	beq.n	8006a6e <vPortGetHeapStats+0x66>
        {
            while( pxBlock != pxEnd )
 8006a2e:	e019      	b.n	8006a64 <vPortGetHeapStats+0x5c>
            {
                /* Increment the number of blocks and record the largest block seen
                 * so far. */
                xBlocks++;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	3301      	adds	r3, #1
 8006a34:	613b      	str	r3, [r7, #16]

                if( pxBlock->xBlockSize > xMaxSize )
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d202      	bcs.n	8006a46 <vPortGetHeapStats+0x3e>
                {
                    xMaxSize = pxBlock->xBlockSize;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	60fb      	str	r3, [r7, #12]
                }

                /* Heap five will have a zero sized block at the end of each
                 * each region - the block is only used to link to the next
                 * heap region so it not a real block. */
                if( pxBlock->xBlockSize != 0 )
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <vPortGetHeapStats+0x56>
                {
                    if( pxBlock->xBlockSize < xMinSize )
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d902      	bls.n	8006a5e <vPortGetHeapStats+0x56>
                    {
                        xMinSize = pxBlock->xBlockSize;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	60bb      	str	r3, [r7, #8]
                    }
                }

                /* Move to the next block in the chain until the last block is
                 * reached. */
                pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	617b      	str	r3, [r7, #20]
            while( pxBlock != pxEnd )
 8006a64:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <vPortGetHeapStats+0xb0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d1e0      	bne.n	8006a30 <vPortGetHeapStats+0x28>
            }
        }
    }
    ( void ) xTaskResumeAll();
 8006a6e:	f7fc fae5 	bl	800303c <xTaskResumeAll>

    pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	605a      	str	r2, [r3, #4]
    pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	609a      	str	r2, [r3, #8]
    pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	60da      	str	r2, [r3, #12]

    taskENTER_CRITICAL();
 8006a84:	f7ff fbe4 	bl	8006250 <vPortEnterCritical>
    {
        pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <vPortGetHeapStats+0xb4>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	601a      	str	r2, [r3, #0]
        pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <vPortGetHeapStats+0xb8>)
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	615a      	str	r2, [r3, #20]
        pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <vPortGetHeapStats+0xbc>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	619a      	str	r2, [r3, #24]
        pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 8006aa0:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <vPortGetHeapStats+0xc0>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	611a      	str	r2, [r3, #16]
    }
    taskEXIT_CRITICAL();
 8006aa8:	f7ff fc02 	bl	80062b0 <vPortExitCritical>
}
 8006aac:	bf00      	nop
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	200015a4 	.word	0x200015a4
 8006ab8:	200015ac 	.word	0x200015ac
 8006abc:	200015b0 	.word	0x200015b0
 8006ac0:	200015b8 	.word	0x200015b8
 8006ac4:	200015bc 	.word	0x200015bc
 8006ac8:	200015b4 	.word	0x200015b4

08006acc <vPortHeapResetState>:
 * Reset the state in this file. This state is normally initialized at start up.
 * This function must be called by the application before restarting the
 * scheduler.
 */
void vPortHeapResetState( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
    pxEnd = NULL;
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <vPortHeapResetState+0x2c>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]

    xFreeBytesRemaining = ( size_t ) 0U;
 8006ad6:	4b09      	ldr	r3, [pc, #36]	; (8006afc <vPortHeapResetState+0x30>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
    xMinimumEverFreeBytesRemaining = ( size_t ) 0U;
 8006adc:	4b08      	ldr	r3, [pc, #32]	; (8006b00 <vPortHeapResetState+0x34>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
    xNumberOfSuccessfulAllocations = ( size_t ) 0U;
 8006ae2:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <vPortHeapResetState+0x38>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
    xNumberOfSuccessfulFrees = ( size_t ) 0U;
 8006ae8:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <vPortHeapResetState+0x3c>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]

    #if ( configENABLE_HEAP_PROTECTOR == 1 )
        pucHeapHighAddress = NULL;
        pucHeapLowAddress = NULL;
    #endif /* #if ( configENABLE_HEAP_PROTECTOR == 1 ) */
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	200015ac 	.word	0x200015ac
 8006afc:	200015b0 	.word	0x200015b0
 8006b00:	200015b4 	.word	0x200015b4
 8006b04:	200015b8 	.word	0x200015b8
 8006b08:	200015bc 	.word	0x200015bc

08006b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <__NVIC_SetPriorityGrouping+0x44>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b3e:	4a04      	ldr	r2, [pc, #16]	; (8006b50 <__NVIC_SetPriorityGrouping+0x44>)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	60d3      	str	r3, [r2, #12]
}
 8006b44:	bf00      	nop
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	e000ed00 	.word	0xe000ed00

08006b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	6039      	str	r1, [r7, #0]
 8006b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	db0a      	blt.n	8006b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	490c      	ldr	r1, [pc, #48]	; (8006ba0 <__NVIC_SetPriority+0x4c>)
 8006b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b72:	0112      	lsls	r2, r2, #4
 8006b74:	b2d2      	uxtb	r2, r2
 8006b76:	440b      	add	r3, r1
 8006b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b7c:	e00a      	b.n	8006b94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	4908      	ldr	r1, [pc, #32]	; (8006ba4 <__NVIC_SetPriority+0x50>)
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	3b04      	subs	r3, #4
 8006b8c:	0112      	lsls	r2, r2, #4
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	440b      	add	r3, r1
 8006b92:	761a      	strb	r2, [r3, #24]
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	e000e100 	.word	0xe000e100
 8006ba4:	e000ed00 	.word	0xe000ed00

08006ba8 <systick_cb>:

type_irq_desc * local_desc;


void systick_cb(void * des)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]

}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <task_1>:

static void exampleTask( void * parameters ) __attribute__( ( noreturn ) );


void task_1(void * arg)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
    int * ptr = arg;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]

    while(1)
 8006bc8:	e7fe      	b.n	8006bc8 <task_1+0xc>

08006bca <task_2>:

    }
}

void task_2(void * arg)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
    int * ptr = arg;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]

    while(1)
 8006bd6:	e7fe      	b.n	8006bd6 <task_2+0xc>

08006bd8 <main>:

type_thread_struct thread_1,thread_2;


int main(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af02      	add	r7, sp, #8
    /*
     Initialize services 
     */
    proc_diagnostic_mgmt_init();
 8006bde:	f000 f885 	bl	8006cec <proc_diagnostic_mgmt_init>
    proc_mm_init(NULL);
 8006be2:	2000      	movs	r0, #0
 8006be4:	f000 f83e 	bl	8006c64 <proc_mm_init>
    proc_serial_mgmt_init();
 8006be8:	f000 f854 	bl	8006c94 <proc_serial_mgmt_init>
     * Initialize kernel 
     */
    /* initilize interrupts */
    

    NVIC_SetPriorityGrouping(__NVIC_PRIO_BITS);
 8006bec:	2004      	movs	r0, #4
 8006bee:	f7ff ff8d 	bl	8006b0c <__NVIC_SetPriorityGrouping>


    int id = theread_create(&task_1, &thread_1, 128, 1, "hello", &thread_1);
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <main+0x60>)
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <main+0x64>)
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	2280      	movs	r2, #128	; 0x80
 8006bfe:	490e      	ldr	r1, [pc, #56]	; (8006c38 <main+0x60>)
 8006c00:	480f      	ldr	r0, [pc, #60]	; (8006c40 <main+0x68>)
 8006c02:	f7f9 fc73 	bl	80004ec <theread_create>
 8006c06:	6078      	str	r0, [r7, #4]
    id = theread_create(&task_2, &thread_2, 128, 1, "hello1", &thread_2);
 8006c08:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <main+0x6c>)
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <main+0x70>)
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	2301      	movs	r3, #1
 8006c12:	2280      	movs	r2, #128	; 0x80
 8006c14:	490b      	ldr	r1, [pc, #44]	; (8006c44 <main+0x6c>)
 8006c16:	480d      	ldr	r0, [pc, #52]	; (8006c4c <main+0x74>)
 8006c18:	f7f9 fc68 	bl	80004ec <theread_create>
 8006c1c:	6078      	str	r0, [r7, #4]

#if (__ARM_ARCH_7A__ == 0U)
	/* Service Call interrupt might be configured before kernel start     */
	/* and when its priority is lower or equal to BASEPRI, svc intruction */
	/* causes a Hard Fault.                                               */
	NVIC_SetPriority (SVCall_IRQn, 0U);
 8006c1e:	2100      	movs	r1, #0
 8006c20:	f06f 0004 	mvn.w	r0, #4
 8006c24:	f7ff ff96 	bl	8006b54 <__NVIC_SetPriority>
#endif


    vTaskStartScheduler();
 8006c28:	f7fc f97c 	bl	8002f24 <vTaskStartScheduler>

    while(1)
    {
        a++;   
 8006c2c:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <main+0x78>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	4a07      	ldr	r2, [pc, #28]	; (8006c50 <main+0x78>)
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e7f9      	b.n	8006c2c <main+0x54>
 8006c38:	200015c4 	.word	0x200015c4
 8006c3c:	08006fec 	.word	0x08006fec
 8006c40:	08006bbd 	.word	0x08006bbd
 8006c44:	200015e0 	.word	0x200015e0
 8006c48:	08006ff4 	.word	0x08006ff4
 8006c4c:	08006bcb 	.word	0x08006bcb
 8006c50:	20000010 	.word	0x20000010

08006c54 <vApplicationDaemonTaskStartupHook>:
    return 0;
}


void vApplicationDaemonTaskStartupHook( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0

 8006c58:	bf00      	nop
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop

08006c64 <proc_mm_init>:




void proc_mm_init(void * arg)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
    /* Heap memeory initialize */
    /* Pass the array into vPortDefineHeapRegions(). */  
    vPortDefineHeapRegions( xHeapRegions );
 8006c6c:	4803      	ldr	r0, [pc, #12]	; (8006c7c <proc_mm_init+0x18>)
 8006c6e:	f7ff fe07 	bl	8006880 <vPortDefineHeapRegions>
}
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	08006ffc 	.word	0x08006ffc

08006c80 <vApplicationStackOverflowHook>:




void vApplicationStackOverflowHook( TaskHandle_t xTask, char * pcTaskName )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
    for( ; ; )
 8006c8a:	e7fe      	b.n	8006c8a <vApplicationStackOverflowHook+0xa>

08006c8c <vApplicationMallocFailedHook>:
    {
    }
}

void vApplicationMallocFailedHook( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0

    while(1)
 8006c90:	e7fe      	b.n	8006c90 <vApplicationMallocFailedHook+0x4>
 8006c92:	bf00      	nop

08006c94 <proc_serial_mgmt_init>:




Std_ReturnType proc_serial_mgmt_init(void)
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
        /* Initialize available drivers */




}
 8006c98:	bf00      	nop
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <cb_sys_hardfault>:

#include "serv_diagnostics_mgmt.h"


void cb_sys_hardfault( void * parm )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
    int a= 30;
 8006cac:	231e      	movs	r3, #30
 8006cae:	60fb      	str	r3, [r7, #12]
}
 8006cb0:	bf00      	nop
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <cb_sys_busfault>:

void cb_sys_busfault( void * parm )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
    int a= 30;
 8006cc4:	231e      	movs	r3, #30
 8006cc6:	60fb      	str	r3, [r7, #12]
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <cb_sys_usagefault>:

void cb_sys_usagefault( void * parm )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
    int a= 30;
 8006cdc:	231e      	movs	r3, #30
 8006cde:	60fb      	str	r3, [r7, #12]
}
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <proc_diagnostic_mgmt_init>:




 void proc_diagnostic_mgmt_init(void * arg)
 {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
    Std_ReturnType status = ERROR_NONE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
    type_irq_desc* temp;

    /* register callbacks  */
    temp = register_hw_cb(KERN_IRQ_SYS_HARDFAULT, cb_sys_hardfault, 3);
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	4913      	ldr	r1, [pc, #76]	; (8006d48 <proc_diagnostic_mgmt_init+0x5c>)
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	f7f9 fb83 	bl	8000408 <register_hw_cb>
 8006d02:	60b8      	str	r0, [r7, #8]

    if( temp == NULL)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <proc_diagnostic_mgmt_init+0x24>
    {
        status |= ERROR_NULL_PTR;
 8006d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d0e:	60fb      	str	r3, [r7, #12]
    }


    temp = register_hw_cb(KERN_IRQ_SYS_BUSFAULT, cb_sys_busfault, 5);
 8006d10:	2205      	movs	r2, #5
 8006d12:	490e      	ldr	r1, [pc, #56]	; (8006d4c <proc_diagnostic_mgmt_init+0x60>)
 8006d14:	2001      	movs	r0, #1
 8006d16:	f7f9 fb77 	bl	8000408 <register_hw_cb>
 8006d1a:	60b8      	str	r0, [r7, #8]

    if( temp == NULL)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d102      	bne.n	8006d28 <proc_diagnostic_mgmt_init+0x3c>
    {
        status |= ERROR_NULL_PTR;
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d26:	60fb      	str	r3, [r7, #12]
    }

    temp = register_hw_cb(KERN_IRQ_SYS_USAGEFAULT, cb_sys_usagefault, 6);
 8006d28:	2206      	movs	r2, #6
 8006d2a:	4909      	ldr	r1, [pc, #36]	; (8006d50 <proc_diagnostic_mgmt_init+0x64>)
 8006d2c:	2002      	movs	r0, #2
 8006d2e:	f7f9 fb6b 	bl	8000408 <register_hw_cb>
 8006d32:	60b8      	str	r0, [r7, #8]

    if( temp == NULL)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <proc_diagnostic_mgmt_init+0x54>
    {
        status |= ERROR_NULL_PTR;
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d3e:	60fb      	str	r3, [r7, #12]
    }

    /* Register task threads */

 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	08006ca5 	.word	0x08006ca5
 8006d4c:	08006cbd 	.word	0x08006cbd
 8006d50:	08006cd5 	.word	0x08006cd5

08006d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006d58:	f7f9 fa1c 	bl	8000194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d5c:	480c      	ldr	r0, [pc, #48]	; (8006d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006d5e:	490d      	ldr	r1, [pc, #52]	; (8006d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006d60:	4a0d      	ldr	r2, [pc, #52]	; (8006d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d64:	e002      	b.n	8006d6c <LoopCopyDataInit>

08006d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d6a:	3304      	adds	r3, #4

08006d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d70:	d3f9      	bcc.n	8006d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d72:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006d74:	4c0a      	ldr	r4, [pc, #40]	; (8006da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d78:	e001      	b.n	8006d7e <LoopFillZerobss>

08006d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d7c:	3204      	adds	r2, #4

08006d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d80:	d3fb      	bcc.n	8006d7a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8006d82:	f000 f811 	bl	8006da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d86:	f7ff ff27 	bl	8006bd8 <main>
  bx  lr    
 8006d8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006d8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d94:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8006d98:	0800706c 	.word	0x0800706c
  ldr r2, =_sbss
 8006d9c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8006da0:	20001604 	.word	0x20001604

08006da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006da4:	e7fe      	b.n	8006da4 <ADC_IRQHandler>
	...

08006da8 <__libc_init_array>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	4d0d      	ldr	r5, [pc, #52]	; (8006de0 <__libc_init_array+0x38>)
 8006dac:	4c0d      	ldr	r4, [pc, #52]	; (8006de4 <__libc_init_array+0x3c>)
 8006dae:	1b64      	subs	r4, r4, r5
 8006db0:	10a4      	asrs	r4, r4, #2
 8006db2:	2600      	movs	r6, #0
 8006db4:	42a6      	cmp	r6, r4
 8006db6:	d109      	bne.n	8006dcc <__libc_init_array+0x24>
 8006db8:	4d0b      	ldr	r5, [pc, #44]	; (8006de8 <__libc_init_array+0x40>)
 8006dba:	4c0c      	ldr	r4, [pc, #48]	; (8006dec <__libc_init_array+0x44>)
 8006dbc:	f000 f8f2 	bl	8006fa4 <_init>
 8006dc0:	1b64      	subs	r4, r4, r5
 8006dc2:	10a4      	asrs	r4, r4, #2
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	42a6      	cmp	r6, r4
 8006dc8:	d105      	bne.n	8006dd6 <__libc_init_array+0x2e>
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd0:	4798      	blx	r3
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	e7ee      	b.n	8006db4 <__libc_init_array+0xc>
 8006dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dda:	4798      	blx	r3
 8006ddc:	3601      	adds	r6, #1
 8006dde:	e7f2      	b.n	8006dc6 <__libc_init_array+0x1e>
	...

08006df0 <__retarget_lock_acquire_recursive>:
 8006df0:	4770      	bx	lr

08006df2 <__retarget_lock_release_recursive>:
 8006df2:	4770      	bx	lr

08006df4 <memcpy>:
 8006df4:	440a      	add	r2, r1
 8006df6:	4291      	cmp	r1, r2
 8006df8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006dfc:	d100      	bne.n	8006e00 <memcpy+0xc>
 8006dfe:	4770      	bx	lr
 8006e00:	b510      	push	{r4, lr}
 8006e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e0a:	4291      	cmp	r1, r2
 8006e0c:	d1f9      	bne.n	8006e02 <memcpy+0xe>
 8006e0e:	bd10      	pop	{r4, pc}

08006e10 <memset>:
 8006e10:	4402      	add	r2, r0
 8006e12:	4603      	mov	r3, r0
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d100      	bne.n	8006e1a <memset+0xa>
 8006e18:	4770      	bx	lr
 8006e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1e:	e7f9      	b.n	8006e14 <memset+0x4>

08006e20 <cleanup_glue>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	460c      	mov	r4, r1
 8006e24:	6809      	ldr	r1, [r1, #0]
 8006e26:	4605      	mov	r5, r0
 8006e28:	b109      	cbz	r1, 8006e2e <cleanup_glue+0xe>
 8006e2a:	f7ff fff9 	bl	8006e20 <cleanup_glue>
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4628      	mov	r0, r5
 8006e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e36:	f000 b869 	b.w	8006f0c <_free_r>
	...

08006e3c <_reclaim_reent>:
 8006e3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ef0 <_reclaim_reent+0xb4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4283      	cmp	r3, r0
 8006e42:	b570      	push	{r4, r5, r6, lr}
 8006e44:	4604      	mov	r4, r0
 8006e46:	d051      	beq.n	8006eec <_reclaim_reent+0xb0>
 8006e48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e4a:	b143      	cbz	r3, 8006e5e <_reclaim_reent+0x22>
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d14a      	bne.n	8006ee8 <_reclaim_reent+0xac>
 8006e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e54:	6819      	ldr	r1, [r3, #0]
 8006e56:	b111      	cbz	r1, 8006e5e <_reclaim_reent+0x22>
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 f857 	bl	8006f0c <_free_r>
 8006e5e:	6961      	ldr	r1, [r4, #20]
 8006e60:	b111      	cbz	r1, 8006e68 <_reclaim_reent+0x2c>
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f852 	bl	8006f0c <_free_r>
 8006e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e6a:	b111      	cbz	r1, 8006e72 <_reclaim_reent+0x36>
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f000 f84d 	bl	8006f0c <_free_r>
 8006e72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e74:	b111      	cbz	r1, 8006e7c <_reclaim_reent+0x40>
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 f848 	bl	8006f0c <_free_r>
 8006e7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006e7e:	b111      	cbz	r1, 8006e86 <_reclaim_reent+0x4a>
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 f843 	bl	8006f0c <_free_r>
 8006e86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e88:	b111      	cbz	r1, 8006e90 <_reclaim_reent+0x54>
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 f83e 	bl	8006f0c <_free_r>
 8006e90:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e92:	b111      	cbz	r1, 8006e9a <_reclaim_reent+0x5e>
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 f839 	bl	8006f0c <_free_r>
 8006e9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006e9c:	b111      	cbz	r1, 8006ea4 <_reclaim_reent+0x68>
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 f834 	bl	8006f0c <_free_r>
 8006ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ea6:	b111      	cbz	r1, 8006eae <_reclaim_reent+0x72>
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 f82f 	bl	8006f0c <_free_r>
 8006eae:	69a3      	ldr	r3, [r4, #24]
 8006eb0:	b1e3      	cbz	r3, 8006eec <_reclaim_reent+0xb0>
 8006eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	4798      	blx	r3
 8006eb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006eba:	b1b9      	cbz	r1, 8006eec <_reclaim_reent+0xb0>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ec2:	f7ff bfad 	b.w	8006e20 <cleanup_glue>
 8006ec6:	5949      	ldr	r1, [r1, r5]
 8006ec8:	b941      	cbnz	r1, 8006edc <_reclaim_reent+0xa0>
 8006eca:	3504      	adds	r5, #4
 8006ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ece:	2d80      	cmp	r5, #128	; 0x80
 8006ed0:	68d9      	ldr	r1, [r3, #12]
 8006ed2:	d1f8      	bne.n	8006ec6 <_reclaim_reent+0x8a>
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 f819 	bl	8006f0c <_free_r>
 8006eda:	e7ba      	b.n	8006e52 <_reclaim_reent+0x16>
 8006edc:	680e      	ldr	r6, [r1, #0]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 f814 	bl	8006f0c <_free_r>
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	e7ef      	b.n	8006ec8 <_reclaim_reent+0x8c>
 8006ee8:	2500      	movs	r5, #0
 8006eea:	e7ef      	b.n	8006ecc <_reclaim_reent+0x90>
 8006eec:	bd70      	pop	{r4, r5, r6, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000014 	.word	0x20000014

08006ef4 <__malloc_lock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__malloc_lock+0x8>)
 8006ef6:	f7ff bf7b 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 8006efa:	bf00      	nop
 8006efc:	200015fc 	.word	0x200015fc

08006f00 <__malloc_unlock>:
 8006f00:	4801      	ldr	r0, [pc, #4]	; (8006f08 <__malloc_unlock+0x8>)
 8006f02:	f7ff bf76 	b.w	8006df2 <__retarget_lock_release_recursive>
 8006f06:	bf00      	nop
 8006f08:	200015fc 	.word	0x200015fc

08006f0c <_free_r>:
 8006f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f0e:	2900      	cmp	r1, #0
 8006f10:	d044      	beq.n	8006f9c <_free_r+0x90>
 8006f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f16:	9001      	str	r0, [sp, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f1e:	bfb8      	it	lt
 8006f20:	18e4      	addlt	r4, r4, r3
 8006f22:	f7ff ffe7 	bl	8006ef4 <__malloc_lock>
 8006f26:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <_free_r+0x94>)
 8006f28:	9801      	ldr	r0, [sp, #4]
 8006f2a:	6813      	ldr	r3, [r2, #0]
 8006f2c:	b933      	cbnz	r3, 8006f3c <_free_r+0x30>
 8006f2e:	6063      	str	r3, [r4, #4]
 8006f30:	6014      	str	r4, [r2, #0]
 8006f32:	b003      	add	sp, #12
 8006f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f38:	f7ff bfe2 	b.w	8006f00 <__malloc_unlock>
 8006f3c:	42a3      	cmp	r3, r4
 8006f3e:	d908      	bls.n	8006f52 <_free_r+0x46>
 8006f40:	6825      	ldr	r5, [r4, #0]
 8006f42:	1961      	adds	r1, r4, r5
 8006f44:	428b      	cmp	r3, r1
 8006f46:	bf01      	itttt	eq
 8006f48:	6819      	ldreq	r1, [r3, #0]
 8006f4a:	685b      	ldreq	r3, [r3, #4]
 8006f4c:	1949      	addeq	r1, r1, r5
 8006f4e:	6021      	streq	r1, [r4, #0]
 8006f50:	e7ed      	b.n	8006f2e <_free_r+0x22>
 8006f52:	461a      	mov	r2, r3
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	b10b      	cbz	r3, 8006f5c <_free_r+0x50>
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	d9fa      	bls.n	8006f52 <_free_r+0x46>
 8006f5c:	6811      	ldr	r1, [r2, #0]
 8006f5e:	1855      	adds	r5, r2, r1
 8006f60:	42a5      	cmp	r5, r4
 8006f62:	d10b      	bne.n	8006f7c <_free_r+0x70>
 8006f64:	6824      	ldr	r4, [r4, #0]
 8006f66:	4421      	add	r1, r4
 8006f68:	1854      	adds	r4, r2, r1
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	6011      	str	r1, [r2, #0]
 8006f6e:	d1e0      	bne.n	8006f32 <_free_r+0x26>
 8006f70:	681c      	ldr	r4, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	6053      	str	r3, [r2, #4]
 8006f76:	4421      	add	r1, r4
 8006f78:	6011      	str	r1, [r2, #0]
 8006f7a:	e7da      	b.n	8006f32 <_free_r+0x26>
 8006f7c:	d902      	bls.n	8006f84 <_free_r+0x78>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	6003      	str	r3, [r0, #0]
 8006f82:	e7d6      	b.n	8006f32 <_free_r+0x26>
 8006f84:	6825      	ldr	r5, [r4, #0]
 8006f86:	1961      	adds	r1, r4, r5
 8006f88:	428b      	cmp	r3, r1
 8006f8a:	bf04      	itt	eq
 8006f8c:	6819      	ldreq	r1, [r3, #0]
 8006f8e:	685b      	ldreq	r3, [r3, #4]
 8006f90:	6063      	str	r3, [r4, #4]
 8006f92:	bf04      	itt	eq
 8006f94:	1949      	addeq	r1, r1, r5
 8006f96:	6021      	streq	r1, [r4, #0]
 8006f98:	6054      	str	r4, [r2, #4]
 8006f9a:	e7ca      	b.n	8006f32 <_free_r+0x26>
 8006f9c:	b003      	add	sp, #12
 8006f9e:	bd30      	pop	{r4, r5, pc}
 8006fa0:	20001600 	.word	0x20001600

08006fa4 <_init>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr

08006fb0 <_fini>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr
