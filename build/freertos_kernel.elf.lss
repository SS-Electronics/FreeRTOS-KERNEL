
./build/freertos_kernel.elf:     file format elf32-littlearm


Disassembly of section .text:

08000194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <SystemInit+0x20>)
 800019a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800019e:	4a05      	ldr	r2, [pc, #20]	; (80001b4 <SystemInit+0x20>)
 80001a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001a8:	bf00      	nop
 80001aa:	46bd      	mov	sp, r7
 80001ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	e000ed00 	.word	0xe000ed00

080001b8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b087      	sub	sp, #28
 80001bc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80001be:	2300      	movs	r3, #0
 80001c0:	613b      	str	r3, [r7, #16]
 80001c2:	2300      	movs	r3, #0
 80001c4:	617b      	str	r3, [r7, #20]
 80001c6:	2302      	movs	r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
 80001ca:	2300      	movs	r3, #0
 80001cc:	60bb      	str	r3, [r7, #8]
 80001ce:	2302      	movs	r3, #2
 80001d0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	f003 030c 	and.w	r3, r3, #12
 80001da:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	2b08      	cmp	r3, #8
 80001e0:	d011      	beq.n	8000206 <SystemCoreClockUpdate+0x4e>
 80001e2:	693b      	ldr	r3, [r7, #16]
 80001e4:	2b08      	cmp	r3, #8
 80001e6:	d844      	bhi.n	8000272 <SystemCoreClockUpdate+0xba>
 80001e8:	693b      	ldr	r3, [r7, #16]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d003      	beq.n	80001f6 <SystemCoreClockUpdate+0x3e>
 80001ee:	693b      	ldr	r3, [r7, #16]
 80001f0:	2b04      	cmp	r3, #4
 80001f2:	d004      	beq.n	80001fe <SystemCoreClockUpdate+0x46>
 80001f4:	e03d      	b.n	8000272 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80001f6:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 80001f8:	4a2c      	ldr	r2, [pc, #176]	; (80002ac <SystemCoreClockUpdate+0xf4>)
 80001fa:	601a      	str	r2, [r3, #0]
      break;
 80001fc:	e03d      	b.n	800027a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80001fe:	4b2a      	ldr	r3, [pc, #168]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 8000200:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <SystemCoreClockUpdate+0xf8>)
 8000202:	601a      	str	r2, [r3, #0]
      break;
 8000204:	e039      	b.n	800027a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000206:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	0d9b      	lsrs	r3, r3, #22
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000212:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800021a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d00c      	beq.n	800023c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000222:	4a23      	ldr	r2, [pc, #140]	; (80002b0 <SystemCoreClockUpdate+0xf8>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	fbb2 f3f3 	udiv	r3, r2, r3
 800022a:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 800022c:	6852      	ldr	r2, [r2, #4]
 800022e:	0992      	lsrs	r2, r2, #6
 8000230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000234:	fb02 f303 	mul.w	r3, r2, r3
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e00b      	b.n	8000254 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <SystemCoreClockUpdate+0xf4>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	fbb2 f3f3 	udiv	r3, r2, r3
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000246:	6852      	ldr	r2, [r2, #4]
 8000248:	0992      	lsrs	r2, r2, #6
 800024a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800024e:	fb02 f303 	mul.w	r3, r2, r3
 8000252:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	0c1b      	lsrs	r3, r3, #16
 800025a:	f003 0303 	and.w	r3, r3, #3
 800025e:	3301      	adds	r3, #1
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000264:	697a      	ldr	r2, [r7, #20]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	fbb2 f3f3 	udiv	r3, r2, r3
 800026c:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 800026e:	6013      	str	r3, [r2, #0]
      break;
 8000270:	e003      	b.n	800027a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000272:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <SystemCoreClockUpdate+0xf4>)
 8000276:	601a      	str	r2, [r3, #0]
      break;
 8000278:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <SystemCoreClockUpdate+0xec>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	091b      	lsrs	r3, r3, #4
 8000280:	f003 030f 	and.w	r3, r3, #15
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <SystemCoreClockUpdate+0xfc>)
 8000286:	5cd3      	ldrb	r3, [r2, r3]
 8000288:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	fa22 f303 	lsr.w	r3, r2, r3
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <SystemCoreClockUpdate+0xf0>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	371c      	adds	r7, #28
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40023800 	.word	0x40023800
 80002a8:	20000000 	.word	0x20000000
 80002ac:	00f42400 	.word	0x00f42400
 80002b0:	017d7840 	.word	0x017d7840
 80002b4:	08006150 	.word	0x08006150

080002b8 <dev_get_irq_cpu_handle>:




type_device_cpu_irq_handle * dev_get_irq_cpu_handle(uint32_t irq_idx)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    if(irq_idx < NO_OF_CPU_INTERRUPTS )
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d80a      	bhi.n	80002dc <dev_get_irq_cpu_handle+0x24>
    {
        /* Reset the interrupt counters upon handle call / init */
        cache_device_cpu_irq_handle[irq_idx].hw_irq_counter = 0;
 80002c6:	4a09      	ldr	r2, [pc, #36]	; (80002ec <dev_get_irq_cpu_handle+0x34>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	4413      	add	r3, r2
 80002ce:	2200      	movs	r2, #0
 80002d0:	605a      	str	r2, [r3, #4]

        return &cache_device_cpu_irq_handle[irq_idx];
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	00db      	lsls	r3, r3, #3
 80002d6:	4a05      	ldr	r2, [pc, #20]	; (80002ec <dev_get_irq_cpu_handle+0x34>)
 80002d8:	4413      	add	r3, r2
 80002da:	e000      	b.n	80002de <dev_get_irq_cpu_handle+0x26>
    }
    else
    {
        return NULL;
 80002dc:	2300      	movs	r3, #0
    }
}
 80002de:	4618      	mov	r0, r3
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000018 	.word	0x20000018

080002f0 <RTC_WKUP_IRQHandler>:


void RTC_WKUP_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[0].irq_handler != NULL)
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <RTC_WKUP_IRQHandler+0x24>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d008      	beq.n	800030e <RTC_WKUP_IRQHandler+0x1e>
    {
        (*cache_device_cpu_irq_handle[0].irq_handler)(NULL);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <RTC_WKUP_IRQHandler+0x24>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2000      	movs	r0, #0
 8000302:	4798      	blx	r3
        cache_device_cpu_irq_handle[0].hw_irq_counter++;
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <RTC_WKUP_IRQHandler+0x24>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	3301      	adds	r3, #1
 800030a:	4a02      	ldr	r2, [pc, #8]	; (8000314 <RTC_WKUP_IRQHandler+0x24>)
 800030c:	6053      	str	r3, [r2, #4]
    }
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000018 	.word	0x20000018

08000318 <RCC_IRQHandler>:

void RCC_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[1].irq_handler != NULL)
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <RCC_IRQHandler+0x24>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d008      	beq.n	8000336 <RCC_IRQHandler+0x1e>
    {
        (*cache_device_cpu_irq_handle[1].irq_handler)(NULL);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <RCC_IRQHandler+0x24>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	2000      	movs	r0, #0
 800032a:	4798      	blx	r3
        cache_device_cpu_irq_handle[1].hw_irq_counter++;
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <RCC_IRQHandler+0x24>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	3301      	adds	r3, #1
 8000332:	4a02      	ldr	r2, [pc, #8]	; (800033c <RCC_IRQHandler+0x24>)
 8000334:	60d3      	str	r3, [r2, #12]
    }
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000018 	.word	0x20000018

08000340 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    if (cache_device_cpu_irq_handle[2].irq_handler != NULL)
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <TIM2_IRQHandler+0x24>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d008      	beq.n	800035e <TIM2_IRQHandler+0x1e>
    {
        (*cache_device_cpu_irq_handle[2].irq_handler)(NULL);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <TIM2_IRQHandler+0x24>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	2000      	movs	r0, #0
 8000352:	4798      	blx	r3
        cache_device_cpu_irq_handle[2].hw_irq_counter++;
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <TIM2_IRQHandler+0x24>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	3301      	adds	r3, #1
 800035a:	4a02      	ldr	r2, [pc, #8]	; (8000364 <TIM2_IRQHandler+0x24>)
 800035c:	6153      	str	r3, [r2, #20]
    }
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000018 	.word	0x20000018

08000368 <theread_create>:
                                type_thread_struct * thread_handle,
                                uint32_t stack_depth_bytes,
                                uint32_t priority,
                                const char * const task_info_str,
                                void       * parameters)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af02      	add	r7, sp, #8
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
 8000374:	603b      	str	r3, [r7, #0]
        BaseType_t  returned =  xTaskCreate( thread_function,
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	3304      	adds	r3, #4
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	6a39      	ldr	r1, [r7, #32]
 8000386:	68f8      	ldr	r0, [r7, #12]
 8000388:	f001 fb46 	bl	8001a18 <xTaskCreate>
 800038c:	6178      	str	r0, [r7, #20]
                                task_info_str,
                                stack_depth_bytes,
                                parameters,
                                (UBaseType_t)priority,
                                &(thread_handle->thread_handle) );
        if( returned == pdPASS)
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d109      	bne.n	80003a8 <theread_create+0x40>
        {
            thread_handle->thread_id            = thread_counter++;
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <theread_create+0x4c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	1c5a      	adds	r2, r3, #1
 800039a:	4906      	ldr	r1, [pc, #24]	; (80003b4 <theread_create+0x4c>)
 800039c:	600a      	str	r2, [r1, #0]
 800039e:	68ba      	ldr	r2, [r7, #8]
 80003a0:	6013      	str	r3, [r2, #0]
            return thread_counter;
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <theread_create+0x4c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	e001      	b.n	80003ac <theread_create+0x44>
        }
        else
        {
            return THEREAD_CREATE_FAILED;
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }  
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000004 	.word	0x20000004

080003b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f103 0208 	add.w	r2, r3, #8
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003d4:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f103 0208 	add.w	r2, r3, #8
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	611a      	str	r2, [r3, #16]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f103 0208 	add.w	r2, r3, #8
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	615a      	str	r2, [r3, #20]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	68da      	ldr	r2, [r3, #12]
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	60da      	str	r2, [r3, #12]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	683a      	ldr	r2, [r7, #0]
 800043c:	609a      	str	r2, [r3, #8]
    pxIndex->pxPrevious = pxNewListItem;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	683a      	ldr	r2, [r7, #0]
 8000442:	60da      	str	r2, [r3, #12]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000460:	b480      	push	{r7}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000470:	e9c7 2302 	strd	r2, r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800047c:	bf08      	it	eq
 800047e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000482:	d103      	bne.n	800048c <vListInsert+0x2c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e010      	b.n	80004ae <vListInsert+0x4e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3308      	adds	r3, #8
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	e002      	b.n	800049a <vListInsert+0x3a>
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80004a6:	4290      	cmp	r0, r2
 80004a8:	eb71 0303 	sbcs.w	r3, r1, r3
 80004ac:	d2f2      	bcs.n	8000494 <vListInsert+0x34>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	683a      	ldr	r2, [r7, #0]
 80004bc:	60da      	str	r2, [r3, #12]
    pxNewListItem->pxPrevious = pxIterator;
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	697a      	ldr	r2, [r7, #20]
 80004c2:	60da      	str	r2, [r3, #12]
    pxIterator->pxNext = pxNewListItem;
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	615a      	str	r2, [r3, #20]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80004da:	bf00      	nop
 80004dc:	371c      	adds	r7, #28
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80004e6:	b480      	push	{r7}
 80004e8:	b085      	sub	sp, #20
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	68d2      	ldr	r2, [r2, #12]
 80004fc:	60da      	str	r2, [r3, #12]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	6892      	ldr	r2, [r2, #8]
 8000506:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d103      	bne.n	800051a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	68da      	ldr	r2, [r3, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	1e5a      	subs	r2, r3, #1
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	681b      	ldr	r3, [r3, #0]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000546:	2301      	movs	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10a      	bne.n	800056a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000554:	f04f 0310 	mov.w	r3, #16
 8000558:	f383 8811 	msr	BASEPRI, r3
 800055c:	f3bf 8f6f 	isb	sy
 8000560:	f3bf 8f4f 	dsb	sy
 8000564:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000566:	bf00      	nop
 8000568:	e7fe      	b.n	8000568 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d05d      	beq.n	800062c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    if( ( pxQueue != NULL ) &&
 8000574:	2b00      	cmp	r3, #0
 8000576:	d059      	beq.n	800062c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000580:	2100      	movs	r1, #0
 8000582:	fba3 2302 	umull	r2, r3, r3, r2
 8000586:	2b00      	cmp	r3, #0
 8000588:	d000      	beq.n	800058c <xQueueGenericReset+0x50>
 800058a:	2101      	movs	r1, #1
 800058c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800058e:	2b00      	cmp	r3, #0
 8000590:	d14c      	bne.n	800062c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000592:	f005 f879 	bl	8005688 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059e:	6939      	ldr	r1, [r7, #16]
 80005a0:	6c89      	ldr	r1, [r1, #72]	; 0x48
 80005a2:	fb01 f303 	mul.w	r3, r1, r3
 80005a6:	441a      	add	r2, r3
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	2200      	movs	r2, #0
 80005b0:	641a      	str	r2, [r3, #64]	; 0x40
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c2:	3b01      	subs	r3, #1
 80005c4:	6939      	ldr	r1, [r7, #16]
 80005c6:	6c89      	ldr	r1, [r1, #72]	; 0x48
 80005c8:	fb01 f303 	mul.w	r3, r1, r3
 80005cc:	441a      	add	r2, r3
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	22ff      	movs	r2, #255	; 0xff
 80005d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxQueue->cTxLock = queueUNLOCKED;
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	22ff      	movs	r2, #255	; 0xff
 80005de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            if( xNewQueue == pdFALSE )
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d114      	bne.n	8000612 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d01a      	beq.n	8000626 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	3310      	adds	r3, #16
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fd9f 	bl	8003138 <xTaskRemoveFromEventList>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d012      	beq.n	8000626 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <xQueueGenericReset+0x11c>)
 8000602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	f3bf 8f4f 	dsb	sy
 800060c:	f3bf 8f6f 	isb	sy
 8000610:	e009      	b.n	8000626 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	3310      	adds	r3, #16
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fece 	bl	80003b8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	3328      	adds	r3, #40	; 0x28
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fec9 	bl	80003b8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000626:	f005 f85f 	bl	80056e8 <vPortExitCritical>
 800062a:	e001      	b.n	8000630 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10a      	bne.n	800064c <xQueueGenericReset+0x110>
    __asm volatile
 8000636:	f04f 0310 	mov.w	r3, #16
 800063a:	f383 8811 	msr	BASEPRI, r3
 800063e:	f3bf 8f6f 	isb	sy
 8000642:	f3bf 8f4f 	dsb	sy
 8000646:	60bb      	str	r3, [r7, #8]
}
 8000648:	bf00      	nop
 800064a:	e7fe      	b.n	800064a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 800064c:	697b      	ldr	r3, [r7, #20]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	e000ed04 	.word	0xe000ed04

0800065c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af02      	add	r7, sp, #8
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	4613      	mov	r3, r2
 8000668:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d02e      	beq.n	80006d2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000674:	2100      	movs	r1, #0
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	fba3 2302 	umull	r2, r3, r3, r2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d000      	beq.n	8000684 <xQueueGenericCreate+0x28>
 8000682:	2101      	movs	r1, #1
 8000684:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000686:	2b00      	cmp	r3, #0
 8000688:	d123      	bne.n	80006d2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( uxQueueLength * uxItemSize ) ) )
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000692:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000696:	d81c      	bhi.n	80006d2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	fb02 f303 	mul.w	r3, r2, r3
 80006a0:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	3350      	adds	r3, #80	; 0x50
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 f90a 	bl	80058c0 <pvPortMalloc>
 80006ac:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d01c      	beq.n	80006ee <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	3350      	adds	r3, #80	; 0x50
 80006bc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	68b9      	ldr	r1, [r7, #8]
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f000 f814 	bl	80006f8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80006d0:	e00d      	b.n	80006ee <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10a      	bne.n	80006ee <xQueueGenericCreate+0x92>
    __asm volatile
 80006d8:	f04f 0310 	mov.w	r3, #16
 80006dc:	f383 8811 	msr	BASEPRI, r3
 80006e0:	f3bf 8f6f 	isb	sy
 80006e4:	f3bf 8f4f 	dsb	sy
 80006e8:	613b      	str	r3, [r7, #16]
}
 80006ea:	bf00      	nop
 80006ec:	e7fe      	b.n	80006ec <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80006ee:	69fb      	ldr	r3, [r7, #28]
    }
 80006f0:	4618      	mov	r0, r3
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d103      	bne.n	8000714 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	69ba      	ldr	r2, [r7, #24]
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	e002      	b.n	800071a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	645a      	str	r2, [r3, #68]	; 0x44
    pxNewQueue->uxItemSize = uxItemSize;
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	649a      	str	r2, [r3, #72]	; 0x48
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000726:	2101      	movs	r1, #1
 8000728:	69b8      	ldr	r0, [r7, #24]
 800072a:	f7ff ff07 	bl	800053c <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8000736:	b580      	push	{r7, lr}
 8000738:	b084      	sub	sp, #16
 800073a:	af02      	add	r7, sp, #8
 800073c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d012      	beq.n	800076a <prvInitialiseMutex+0x34>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000756:	2300      	movs	r3, #0
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	f04f 0200 	mov.w	r2, #0
 800075e:	f04f 0300 	mov.w	r3, #0
 8000762:	2100      	movs	r1, #0
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 f8ba 	bl	80008de <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800077c:	2301      	movs	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	461a      	mov	r2, r3
 8000788:	6939      	ldr	r1, [r7, #16]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff66 	bl	800065c <xQueueGenericCreate>
 8000790:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f7ff ffcf 	bl	8000736 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8000798:	68fb      	ldr	r3, [r7, #12]
    }
 800079a:	4618      	mov	r0, r3
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 80007a2:	b590      	push	{r4, r7, lr}
 80007a4:	b089      	sub	sp, #36	; 0x24
 80007a6:	af02      	add	r7, sp, #8
 80007a8:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueGiveMutexRecursive( xMutex );

        configASSERT( pxMutex );
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10a      	bne.n	80007ca <xQueueGiveMutexRecursive+0x28>
    __asm volatile
 80007b4:	f04f 0310 	mov.w	r3, #16
 80007b8:	f383 8811 	msr	BASEPRI, r3
 80007bc:	f3bf 8f6f 	isb	sy
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	60fb      	str	r3, [r7, #12]
}
 80007c6:	bf00      	nop
 80007c8:	e7fe      	b.n	80007c8 <xQueueGiveMutexRecursive+0x26>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	689c      	ldr	r4, [r3, #8]
 80007ce:	f002 ffdf 	bl	8003790 <xTaskGetCurrentTaskHandle>
 80007d2:	4603      	mov	r3, r0
 80007d4:	429c      	cmp	r4, r3
 80007d6:	d115      	bne.n	8000804 <xQueueGiveMutexRecursive+0x62>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d109      	bne.n	80007fe <xQueueGiveMutexRecursive+0x5c>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80007ea:	2300      	movs	r3, #0
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	f04f 0200 	mov.w	r2, #0
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	6938      	ldr	r0, [r7, #16]
 80007fa:	f000 f870 	bl	80008de <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 80007fe:	2301      	movs	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e001      	b.n	8000808 <xQueueGiveMutexRecursive+0x66>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        traceRETURN_xQueueGiveMutexRecursive( xReturn );

        return xReturn;
 8000808:	697b      	ldr	r3, [r7, #20]
    }
 800080a:	4618      	mov	r0, r3
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd90      	pop	{r4, r7, pc}

08000812 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 8000812:	b590      	push	{r4, r7, lr}
 8000814:	b089      	sub	sp, #36	; 0x24
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	61bb      	str	r3, [r7, #24]

        traceENTER_xQueueTakeMutexRecursive( xMutex, xTicksToWait );

        configASSERT( pxMutex );
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10a      	bne.n	800083e <xQueueTakeMutexRecursive+0x2c>
    __asm volatile
 8000828:	f04f 0310 	mov.w	r3, #16
 800082c:	f383 8811 	msr	BASEPRI, r3
 8000830:	f3bf 8f6f 	isb	sy
 8000834:	f3bf 8f4f 	dsb	sy
 8000838:	617b      	str	r3, [r7, #20]
}
 800083a:	bf00      	nop
 800083c:	e7fe      	b.n	800083c <xQueueTakeMutexRecursive+0x2a>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	689c      	ldr	r4, [r3, #8]
 8000842:	f002 ffa5 	bl	8003790 <xTaskGetCurrentTaskHandle>
 8000846:	4603      	mov	r3, r0
 8000848:	429c      	cmp	r4, r3
 800084a:	d107      	bne.n	800085c <xQueueTakeMutexRecursive+0x4a>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
 800085a:	e00d      	b.n	8000878 <xQueueTakeMutexRecursive+0x66>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800085c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000860:	69b8      	ldr	r0, [r7, #24]
 8000862:	f000 fb77 	bl	8000f54 <xQueueSemaphoreTake>
 8000866:	61f8      	str	r0, [r7, #28]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d004      	beq.n	8000878 <xQueueTakeMutexRecursive+0x66>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	60da      	str	r2, [r3, #12]
            }
        }

        traceRETURN_xQueueTakeMutexRecursive( xReturn );

        return xReturn;
 8000878:	69fb      	ldr	r3, [r7, #28]
    }
 800087a:	4618      	mov	r0, r3
 800087c:	3724      	adds	r7, #36	; 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}

08000882 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8000882:	b580      	push	{r7, lr}
 8000884:	b084      	sub	sp, #16
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d010      	beq.n	80008b8 <xQueueCreateCountingSemaphore+0x36>
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	d80c      	bhi.n	80008b8 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800089e:	2202      	movs	r2, #2
 80008a0:	2100      	movs	r1, #0
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff feda 	bl	800065c <xQueueGenericCreate>
 80008a8:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d011      	beq.n	80008d4 <xQueueCreateCountingSemaphore+0x52>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	683a      	ldr	r2, [r7, #0]
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40
            if( xHandle != NULL )
 80008b6:	e00d      	b.n	80008d4 <xQueueCreateCountingSemaphore+0x52>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10a      	bne.n	80008d4 <xQueueCreateCountingSemaphore+0x52>
    __asm volatile
 80008be:	f04f 0310 	mov.w	r3, #16
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	60bb      	str	r3, [r7, #8]
}
 80008d0:	bf00      	nop
 80008d2:	e7fe      	b.n	80008d2 <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 80008d4:	68fb      	ldr	r3, [r7, #12]
    }
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b090      	sub	sp, #64	; 0x40
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80008f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10a      	bne.n	8000910 <xQueueGenericSend+0x32>
    __asm volatile
 80008fa:	f04f 0310 	mov.w	r3, #16
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
}
 800090c:	bf00      	nop
 800090e:	e7fe      	b.n	800090e <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d103      	bne.n	800091e <xQueueGenericSend+0x40>
 8000916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <xQueueGenericSend+0x44>
 800091e:	2301      	movs	r3, #1
 8000920:	e000      	b.n	8000924 <xQueueGenericSend+0x46>
 8000922:	2300      	movs	r3, #0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10a      	bne.n	800093e <xQueueGenericSend+0x60>
    __asm volatile
 8000928:	f04f 0310 	mov.w	r3, #16
 800092c:	f383 8811 	msr	BASEPRI, r3
 8000930:	f3bf 8f6f 	isb	sy
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 800093a:	bf00      	nop
 800093c:	e7fe      	b.n	800093c <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800093e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000940:	2b02      	cmp	r3, #2
 8000942:	d103      	bne.n	800094c <xQueueGenericSend+0x6e>
 8000944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000948:	2b01      	cmp	r3, #1
 800094a:	d101      	bne.n	8000950 <xQueueGenericSend+0x72>
 800094c:	2301      	movs	r3, #1
 800094e:	e000      	b.n	8000952 <xQueueGenericSend+0x74>
 8000950:	2300      	movs	r3, #0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10a      	bne.n	800096c <xQueueGenericSend+0x8e>
    __asm volatile
 8000956:	f04f 0310 	mov.w	r3, #16
 800095a:	f383 8811 	msr	BASEPRI, r3
 800095e:	f3bf 8f6f 	isb	sy
 8000962:	f3bf 8f4f 	dsb	sy
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000968:	bf00      	nop
 800096a:	e7fe      	b.n	800096a <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800096c:	f002 ff38 	bl	80037e0 <xTaskGetSchedulerState>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d103      	bne.n	800097e <xQueueGenericSend+0xa0>
 8000976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800097a:	4313      	orrs	r3, r2
 800097c:	d101      	bne.n	8000982 <xQueueGenericSend+0xa4>
 800097e:	2301      	movs	r3, #1
 8000980:	e000      	b.n	8000984 <xQueueGenericSend+0xa6>
 8000982:	2300      	movs	r3, #0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10a      	bne.n	800099e <xQueueGenericSend+0xc0>
    __asm volatile
 8000988:	f04f 0310 	mov.w	r3, #16
 800098c:	f383 8811 	msr	BASEPRI, r3
 8000990:	f3bf 8f6f 	isb	sy
 8000994:	f3bf 8f4f 	dsb	sy
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
}
 800099a:	bf00      	nop
 800099c:	e7fe      	b.n	800099c <xQueueGenericSend+0xbe>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800099e:	f004 fe73 	bl	8005688 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d302      	bcc.n	80009b4 <xQueueGenericSend+0xd6>
 80009ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d129      	bne.n	8000a08 <xQueueGenericSend+0x12a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80009ba:	f000 fe5f 	bl	800167c <prvCopyDataToQueue>
 80009be:	6378      	str	r0, [r7, #52]	; 0x34

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d010      	beq.n	80009ea <xQueueGenericSend+0x10c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ca:	3328      	adds	r3, #40	; 0x28
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fbb3 	bl	8003138 <xTaskRemoveFromEventList>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d013      	beq.n	8000a00 <xQueueGenericSend+0x122>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009d8:	4b40      	ldr	r3, [pc, #256]	; (8000adc <xQueueGenericSend+0x1fe>)
 80009da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	f3bf 8f4f 	dsb	sy
 80009e4:	f3bf 8f6f 	isb	sy
 80009e8:	e00a      	b.n	8000a00 <xQueueGenericSend+0x122>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80009ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d007      	beq.n	8000a00 <xQueueGenericSend+0x122>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80009f0:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <xQueueGenericSend+0x1fe>)
 80009f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	f3bf 8f4f 	dsb	sy
 80009fc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a00:	f004 fe72 	bl	80056e8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e065      	b.n	8000ad4 <xQueueGenericSend+0x1f6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	d103      	bne.n	8000a18 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a10:	f004 fe6a 	bl	80056e8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	e05d      	b.n	8000ad4 <xQueueGenericSend+0x1f6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d106      	bne.n	8000a2c <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fd52 	bl	80034cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a2c:	f004 fe5c 	bl	80056e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a30:	f001 ff32 	bl	8002898 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a34:	f004 fe28 	bl	8005688 <vPortEnterCritical>
 8000a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a3a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a44:	d103      	bne.n	8000a4e <xQueueGenericSend+0x170>
 8000a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a50:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a5a:	d103      	bne.n	8000a64 <xQueueGenericSend+0x186>
 8000a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8000a64:	f004 fe40 	bl	80056e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a68:	463a      	mov	r2, r7
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fd43 	bl	80034fc <xTaskCheckForTimeOut>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d125      	bne.n	8000ac8 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000a7e:	f000 ff19 	bl	80018b4 <prvIsQueueFull>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d019      	beq.n	8000abc <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a8a:	f103 0110 	add.w	r1, r3, #16
 8000a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a92:	4608      	mov	r0, r1
 8000a94:	f002 fa86 	bl	8002fa4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000a9a:	f000 fe7f 	bl	800179c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a9e:	f001 ff09 	bl	80028b4 <xTaskResumeAll>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f47f af7a 	bne.w	800099e <xQueueGenericSend+0xc0>
                {
                    taskYIELD_WITHIN_API();
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <xQueueGenericSend+0x1fe>)
 8000aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	f3bf 8f6f 	isb	sy
 8000aba:	e770      	b.n	800099e <xQueueGenericSend+0xc0>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000abe:	f000 fe6d 	bl	800179c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ac2:	f001 fef7 	bl	80028b4 <xTaskResumeAll>
 8000ac6:	e76a      	b.n	800099e <xQueueGenericSend+0xc0>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000aca:	f000 fe67 	bl	800179c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ace:	f001 fef1 	bl	80028b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000ad2:	2300      	movs	r3, #0
        }
    }
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3740      	adds	r7, #64	; 0x40
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	e000ed04 	.word	0xe000ed04

08000ae0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b092      	sub	sp, #72	; 0x48
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	643b      	str	r3, [r7, #64]	; 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8000af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10a      	bne.n	8000b0e <xQueueGenericSendFromISR+0x2e>
    __asm volatile
 8000af8:	f04f 0310 	mov.w	r3, #16
 8000afc:	f383 8811 	msr	BASEPRI, r3
 8000b00:	f3bf 8f6f 	isb	sy
 8000b04:	f3bf 8f4f 	dsb	sy
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 8000b0a:	bf00      	nop
 8000b0c:	e7fe      	b.n	8000b0c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d103      	bne.n	8000b1c <xQueueGenericSendFromISR+0x3c>
 8000b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <xQueueGenericSendFromISR+0x40>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <xQueueGenericSendFromISR+0x42>
 8000b20:	2300      	movs	r3, #0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10a      	bne.n	8000b3c <xQueueGenericSendFromISR+0x5c>
    __asm volatile
 8000b26:	f04f 0310 	mov.w	r3, #16
 8000b2a:	f383 8811 	msr	BASEPRI, r3
 8000b2e:	f3bf 8f6f 	isb	sy
 8000b32:	f3bf 8f4f 	dsb	sy
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000b38:	bf00      	nop
 8000b3a:	e7fe      	b.n	8000b3a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d103      	bne.n	8000b4a <xQueueGenericSendFromISR+0x6a>
 8000b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d101      	bne.n	8000b4e <xQueueGenericSendFromISR+0x6e>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <xQueueGenericSendFromISR+0x70>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10a      	bne.n	8000b6a <xQueueGenericSendFromISR+0x8a>
    __asm volatile
 8000b54:	f04f 0310 	mov.w	r3, #16
 8000b58:	f383 8811 	msr	BASEPRI, r3
 8000b5c:	f3bf 8f6f 	isb	sy
 8000b60:	f3bf 8f4f 	dsb	sy
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000b66:	bf00      	nop
 8000b68:	e7fe      	b.n	8000b68 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b6a:	f004 fe6a 	bl	8005842 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000b6e:	f3ef 8211 	mrs	r2, BASEPRI
 8000b72:	f04f 0310 	mov.w	r3, #16
 8000b76:	f383 8811 	msr	BASEPRI, r3
 8000b7a:	f3bf 8f6f 	isb	sy
 8000b7e:	f3bf 8f4f 	dsb	sy
 8000b82:	623a      	str	r2, [r7, #32]
 8000b84:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000b86:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d302      	bcc.n	8000b9c <xQueueGenericSendFromISR+0xbc>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d146      	bne.n	8000c2a <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000bb2:	f000 fd63 	bl	800167c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000bb6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bbe:	d112      	bne.n	8000be6 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d02d      	beq.n	8000c24 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bca:	3328      	adds	r3, #40	; 0x28
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fab3 	bl	8003138 <xTaskRemoveFromEventList>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d025      	beq.n	8000c24 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d022      	beq.n	8000c24 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	e01e      	b.n	8000c24 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000be6:	f001 ffb9 	bl	8002b5c <uxTaskGetNumberOfTasks>
 8000bea:	6338      	str	r0, [r7, #48]	; 0x30
 8000bec:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d916      	bls.n	8000c24 <xQueueGenericSendFromISR+0x144>
 8000bf6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8000bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bfc:	d10a      	bne.n	8000c14 <xQueueGenericSendFromISR+0x134>
    __asm volatile
 8000bfe:	f04f 0310 	mov.w	r3, #16
 8000c02:	f383 8811 	msr	BASEPRI, r3
 8000c06:	f3bf 8f6f 	isb	sy
 8000c0a:	f3bf 8f4f 	dsb	sy
 8000c0e:	61bb      	str	r3, [r7, #24]
}
 8000c10:	bf00      	nop
 8000c12:	e7fe      	b.n	8000c12 <xQueueGenericSendFromISR+0x132>
 8000c14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000c18:	3301      	adds	r3, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	b25a      	sxtb	r2, r3
 8000c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            }

            xReturn = pdPASS;
 8000c24:	2301      	movs	r3, #1
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8000c28:	e001      	b.n	8000c2e <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c30:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000c38:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8000c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3748      	adds	r7, #72	; 0x48
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b090      	sub	sp, #64	; 0x40
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8000c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10a      	bne.n	8000c6e <xQueueGiveFromISR+0x2a>
    __asm volatile
 8000c58:	f04f 0310 	mov.w	r3, #16
 8000c5c:	f383 8811 	msr	BASEPRI, r3
 8000c60:	f3bf 8f6f 	isb	sy
 8000c64:	f3bf 8f4f 	dsb	sy
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000c6a:	bf00      	nop
 8000c6c:	e7fe      	b.n	8000c6c <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00a      	beq.n	8000c8c <xQueueGiveFromISR+0x48>
    __asm volatile
 8000c76:	f04f 0310 	mov.w	r3, #16
 8000c7a:	f383 8811 	msr	BASEPRI, r3
 8000c7e:	f3bf 8f6f 	isb	sy
 8000c82:	f3bf 8f4f 	dsb	sy
 8000c86:	623b      	str	r3, [r7, #32]
}
 8000c88:	bf00      	nop
 8000c8a:	e7fe      	b.n	8000c8a <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d103      	bne.n	8000c9c <xQueueGiveFromISR+0x58>
 8000c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <xQueueGiveFromISR+0x5c>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <xQueueGiveFromISR+0x5e>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10a      	bne.n	8000cbc <xQueueGiveFromISR+0x78>
    __asm volatile
 8000ca6:	f04f 0310 	mov.w	r3, #16
 8000caa:	f383 8811 	msr	BASEPRI, r3
 8000cae:	f3bf 8f6f 	isb	sy
 8000cb2:	f3bf 8f4f 	dsb	sy
 8000cb6:	61fb      	str	r3, [r7, #28]
}
 8000cb8:	bf00      	nop
 8000cba:	e7fe      	b.n	8000cba <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000cbc:	f004 fdc1 	bl	8005842 <vPortValidateInterruptPriority>
    __asm volatile
 8000cc0:	f3ef 8211 	mrs	r2, BASEPRI
 8000cc4:	f04f 0310 	mov.w	r3, #16
 8000cc8:	f383 8811 	msr	BASEPRI, r3
 8000ccc:	f3bf 8f6f 	isb	sy
 8000cd0:	f3bf 8f4f 	dsb	sy
 8000cd4:	61ba      	str	r2, [r7, #24]
 8000cd6:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 8000cd8:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d242      	bcs.n	8000d72 <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000cfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d06:	d112      	bne.n	8000d2e <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d02d      	beq.n	8000d6c <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d12:	3328      	adds	r3, #40	; 0x28
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fa0f 	bl	8003138 <xTaskRemoveFromEventList>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d025      	beq.n	8000d6c <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d022      	beq.n	8000d6c <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e01e      	b.n	8000d6c <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000d2e:	f001 ff15 	bl	8002b5c <uxTaskGetNumberOfTasks>
 8000d32:	62b8      	str	r0, [r7, #40]	; 0x28
 8000d34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d916      	bls.n	8000d6c <xQueueGiveFromISR+0x128>
 8000d3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d42:	2b7f      	cmp	r3, #127	; 0x7f
 8000d44:	d10a      	bne.n	8000d5c <xQueueGiveFromISR+0x118>
    __asm volatile
 8000d46:	f04f 0310 	mov.w	r3, #16
 8000d4a:	f383 8811 	msr	BASEPRI, r3
 8000d4e:	f3bf 8f6f 	isb	sy
 8000d52:	f3bf 8f4f 	dsb	sy
 8000d56:	613b      	str	r3, [r7, #16]
}
 8000d58:	bf00      	nop
 8000d5a:	e7fe      	b.n	8000d5a <xQueueGiveFromISR+0x116>
 8000d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d60:	3301      	adds	r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            }

            xReturn = pdPASS;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d70:	e001      	b.n	8000d76 <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d78:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f383 8811 	msr	BASEPRI, r3
}
 8000d80:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
 8000d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3740      	adds	r7, #64	; 0x40
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08e      	sub	sp, #56	; 0x38
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10a      	bne.n	8000dbe <xQueueReceive+0x32>
    __asm volatile
 8000da8:	f04f 0310 	mov.w	r3, #16
 8000dac:	f383 8811 	msr	BASEPRI, r3
 8000db0:	f3bf 8f6f 	isb	sy
 8000db4:	f3bf 8f4f 	dsb	sy
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000dba:	bf00      	nop
 8000dbc:	e7fe      	b.n	8000dbc <xQueueReceive+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d103      	bne.n	8000dcc <xQueueReceive+0x40>
 8000dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <xQueueReceive+0x44>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <xQueueReceive+0x46>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10a      	bne.n	8000dec <xQueueReceive+0x60>
    __asm volatile
 8000dd6:	f04f 0310 	mov.w	r3, #16
 8000dda:	f383 8811 	msr	BASEPRI, r3
 8000dde:	f3bf 8f6f 	isb	sy
 8000de2:	f3bf 8f4f 	dsb	sy
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000de8:	bf00      	nop
 8000dea:	e7fe      	b.n	8000dea <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dec:	f002 fcf8 	bl	80037e0 <xTaskGetSchedulerState>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <xQueueReceive+0x72>
 8000df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <xQueueReceive+0x76>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <xQueueReceive+0x78>
 8000e02:	2300      	movs	r3, #0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10a      	bne.n	8000e1e <xQueueReceive+0x92>
    __asm volatile
 8000e08:	f04f 0310 	mov.w	r3, #16
 8000e0c:	f383 8811 	msr	BASEPRI, r3
 8000e10:	f3bf 8f6f 	isb	sy
 8000e14:	f3bf 8f4f 	dsb	sy
 8000e18:	623b      	str	r3, [r7, #32]
}
 8000e1a:	bf00      	nop
 8000e1c:	e7fe      	b.n	8000e1c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000e1e:	f004 fc33 	bl	8005688 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d01f      	beq.n	8000e6e <xQueueReceive+0xe2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e32:	f000 fc8d 	bl	8001750 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00f      	beq.n	8000e66 <xQueueReceive+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e48:	3310      	adds	r3, #16
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 f974 	bl	8003138 <xTaskRemoveFromEventList>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <xQueueReceive+0xda>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000e56:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <xQueueReceive+0x1c4>)
 8000e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	f3bf 8f4f 	dsb	sy
 8000e62:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000e66:	f004 fc3f 	bl	80056e8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e06b      	b.n	8000f46 <xQueueReceive+0x1ba>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	d103      	bne.n	8000e7e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000e76:	f004 fc37 	bl	80056e8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e063      	b.n	8000f46 <xQueueReceive+0x1ba>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d106      	bne.n	8000e92 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 fb1f 	bl	80034cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e92:	f004 fc29 	bl	80056e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000e96:	f001 fcff 	bl	8002898 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000e9a:	f004 fbf5 	bl	8005688 <vPortEnterCritical>
 8000e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eaa:	d103      	bne.n	8000eb4 <xQueueReceive+0x128>
 8000eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ec0:	d103      	bne.n	8000eca <xQueueReceive+0x13e>
 8000ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8000eca:	f004 fc0d 	bl	80056e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ece:	463a      	mov	r2, r7
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fb10 	bl	80034fc <xTaskCheckForTimeOut>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d124      	bne.n	8000f2c <xQueueReceive+0x1a0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ee4:	f000 fcac 	bl	8001840 <prvIsQueueEmpty>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d018      	beq.n	8000f20 <xQueueReceive+0x194>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8000ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ef8:	4608      	mov	r0, r1
 8000efa:	f002 f853 	bl	8002fa4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f00:	f000 fc4c 	bl	800179c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000f04:	f001 fcd6 	bl	80028b4 <xTaskResumeAll>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d187      	bne.n	8000e1e <xQueueReceive+0x92>
                {
                    taskYIELD_WITHIN_API();
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <xQueueReceive+0x1c4>)
 8000f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	f3bf 8f4f 	dsb	sy
 8000f1a:	f3bf 8f6f 	isb	sy
 8000f1e:	e77e      	b.n	8000e1e <xQueueReceive+0x92>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f22:	f000 fc3b 	bl	800179c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000f26:	f001 fcc5 	bl	80028b4 <xTaskResumeAll>
 8000f2a:	e778      	b.n	8000e1e <xQueueReceive+0x92>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f2e:	f000 fc35 	bl	800179c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000f32:	f001 fcbf 	bl	80028b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f38:	f000 fc82 	bl	8001840 <prvIsQueueEmpty>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f43f af6d 	beq.w	8000e1e <xQueueReceive+0x92>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000f44:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3738      	adds	r7, #56	; 0x38
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	e000ed04 	.word	0xe000ed04

08000f54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b090      	sub	sp, #64	; 0x40
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10a      	bne.n	8000f88 <xQueueSemaphoreTake+0x34>
    __asm volatile
 8000f72:	f04f 0310 	mov.w	r3, #16
 8000f76:	f383 8811 	msr	BASEPRI, r3
 8000f7a:	f3bf 8f6f 	isb	sy
 8000f7e:	f3bf 8f4f 	dsb	sy
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000f84:	bf00      	nop
 8000f86:	e7fe      	b.n	8000f86 <xQueueSemaphoreTake+0x32>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00a      	beq.n	8000fa6 <xQueueSemaphoreTake+0x52>
    __asm volatile
 8000f90:	f04f 0310 	mov.w	r3, #16
 8000f94:	f383 8811 	msr	BASEPRI, r3
 8000f98:	f3bf 8f6f 	isb	sy
 8000f9c:	f3bf 8f4f 	dsb	sy
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000fa2:	bf00      	nop
 8000fa4:	e7fe      	b.n	8000fa4 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fa6:	f002 fc1b 	bl	80037e0 <xTaskGetSchedulerState>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d103      	bne.n	8000fb8 <xQueueSemaphoreTake+0x64>
 8000fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	d101      	bne.n	8000fbc <xQueueSemaphoreTake+0x68>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <xQueueSemaphoreTake+0x6a>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10a      	bne.n	8000fd8 <xQueueSemaphoreTake+0x84>
    __asm volatile
 8000fc2:	f04f 0310 	mov.w	r3, #16
 8000fc6:	f383 8811 	msr	BASEPRI, r3
 8000fca:	f3bf 8f6f 	isb	sy
 8000fce:	f3bf 8f4f 	dsb	sy
 8000fd2:	623b      	str	r3, [r7, #32]
}
 8000fd4:	bf00      	nop
 8000fd6:	e7fe      	b.n	8000fd6 <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000fd8:	f004 fb56 	bl	8005688 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d024      	beq.n	8001032 <xQueueSemaphoreTake+0xde>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8000fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d104      	bne.n	8001002 <xQueueSemaphoreTake+0xae>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000ff8:	f002 fe26 	bl	8003c48 <pvTaskIncrementMutexHeldCount>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00f      	beq.n	800102a <xQueueSemaphoreTake+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800100a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100c:	3310      	adds	r3, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f002 f892 	bl	8003138 <xTaskRemoveFromEventList>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <xQueueSemaphoreTake+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800101a:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <xQueueSemaphoreTake+0x200>)
 800101c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	f3bf 8f4f 	dsb	sy
 8001026:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800102a:	f004 fb5d 	bl	80056e8 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 800102e:	2301      	movs	r3, #1
 8001030:	e08b      	b.n	800114a <xQueueSemaphoreTake+0x1f6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001036:	4313      	orrs	r3, r2
 8001038:	d103      	bne.n	8001042 <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800103a:	f004 fb55 	bl	80056e8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800103e:	2300      	movs	r3, #0
 8001040:	e083      	b.n	800114a <xQueueSemaphoreTake+0x1f6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001044:	2b00      	cmp	r3, #0
 8001046:	d106      	bne.n	8001056 <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fa3d 	bl	80034cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001052:	2301      	movs	r3, #1
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001056:	f004 fb47 	bl	80056e8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800105a:	f001 fc1d 	bl	8002898 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800105e:	f004 fb13 	bl	8005688 <vPortEnterCritical>
 8001062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001064:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001068:	b25b      	sxtb	r3, r3
 800106a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800106e:	d103      	bne.n	8001078 <xQueueSemaphoreTake+0x124>
 8001070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001072:	2200      	movs	r2, #0
 8001074:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800107e:	b25b      	sxtb	r3, r3
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001084:	d103      	bne.n	800108e <xQueueSemaphoreTake+0x13a>
 8001086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001088:	2200      	movs	r2, #0
 800108a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800108e:	f004 fb2b 	bl	80056e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001092:	463a      	mov	r2, r7
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f002 fa2e 	bl	80034fc <xTaskCheckForTimeOut>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d133      	bne.n	800110e <xQueueSemaphoreTake+0x1ba>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80010a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010a8:	f000 fbca 	bl	8001840 <prvIsQueueEmpty>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d027      	beq.n	8001102 <xQueueSemaphoreTake+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80010b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d109      	bne.n	80010ce <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 80010ba:	f004 fae5 	bl	8005688 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80010be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fbaa 	bl	800381c <xTaskPriorityInherit>
 80010c8:	63b8      	str	r0, [r7, #56]	; 0x38
                        }
                        taskEXIT_CRITICAL();
 80010ca:	f004 fb0d 	bl	80056e8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80010ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80010d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010d8:	4608      	mov	r0, r1
 80010da:	f001 ff63 	bl	8002fa4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80010de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010e0:	f000 fb5c 	bl	800179c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80010e4:	f001 fbe6 	bl	80028b4 <xTaskResumeAll>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f47f af74 	bne.w	8000fd8 <xQueueSemaphoreTake+0x84>
                {
                    taskYIELD_WITHIN_API();
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <xQueueSemaphoreTake+0x200>)
 80010f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	f3bf 8f4f 	dsb	sy
 80010fc:	f3bf 8f6f 	isb	sy
 8001100:	e76a      	b.n	8000fd8 <xQueueSemaphoreTake+0x84>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001102:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001104:	f000 fb4a 	bl	800179c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001108:	f001 fbd4 	bl	80028b4 <xTaskResumeAll>
 800110c:	e764      	b.n	8000fd8 <xQueueSemaphoreTake+0x84>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800110e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001110:	f000 fb44 	bl	800179c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001114:	f001 fbce 	bl	80028b4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001118:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800111a:	f000 fb91 	bl	8001840 <prvIsQueueEmpty>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	f43f af59 	beq.w	8000fd8 <xQueueSemaphoreTake+0x84>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8001126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00d      	beq.n	8001148 <xQueueSemaphoreTake+0x1f4>
                    {
                        taskENTER_CRITICAL();
 800112c:	f004 faac 	bl	8005688 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetHighestPriorityOfWaitToReceiveList( pxQueue );
 8001130:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001132:	f000 fa89 	bl	8001648 <prvGetHighestPriorityOfWaitToReceiveList>
 8001136:	62f8      	str	r0, [r7, #44]	; 0x2c
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetHighestPriorityOfWaitToReceiveList,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fcaa 	bl	8003a98 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8001144:	f004 fad0 	bl	80056e8 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8001148:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800114a:	4618      	mov	r0, r3
 800114c:	3740      	adds	r7, #64	; 0x40
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000ed04 	.word	0xe000ed04

08001158 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b090      	sub	sp, #64	; 0x40
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	e9c7 2300 	strd	r2, r3, [r7]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001166:	2300      	movs	r3, #0
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38

    traceENTER_xQueuePeek( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10a      	bne.n	800118a <xQueuePeek+0x32>
    __asm volatile
 8001174:	f04f 0310 	mov.w	r3, #16
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 8001186:	bf00      	nop
 8001188:	e7fe      	b.n	8001188 <xQueuePeek+0x30>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <xQueuePeek+0x40>
 8001190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <xQueuePeek+0x44>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <xQueuePeek+0x46>
 800119c:	2300      	movs	r3, #0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10a      	bne.n	80011b8 <xQueuePeek+0x60>
    __asm volatile
 80011a2:	f04f 0310 	mov.w	r3, #16
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	f3bf 8f6f 	isb	sy
 80011ae:	f3bf 8f4f 	dsb	sy
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80011b4:	bf00      	nop
 80011b6:	e7fe      	b.n	80011b6 <xQueuePeek+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80011b8:	f002 fb12 	bl	80037e0 <xTaskGetSchedulerState>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <xQueuePeek+0x72>
 80011c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	d101      	bne.n	80011ce <xQueuePeek+0x76>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <xQueuePeek+0x78>
 80011ce:	2300      	movs	r3, #0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10a      	bne.n	80011ea <xQueuePeek+0x92>
    __asm volatile
 80011d4:	f04f 0310 	mov.w	r3, #16
 80011d8:	f383 8811 	msr	BASEPRI, r3
 80011dc:	f3bf 8f6f 	isb	sy
 80011e0:	f3bf 8f4f 	dsb	sy
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80011e6:	bf00      	nop
 80011e8:	e7fe      	b.n	80011e8 <xQueuePeek+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80011ea:	f004 fa4d 	bl	8005688 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d021      	beq.n	800123e <xQueuePeek+0xe6>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80011fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001204:	f000 faa4 	bl	8001750 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8001208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800120a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800120c:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00f      	beq.n	8001236 <xQueuePeek+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001218:	3328      	adds	r3, #40	; 0x28
 800121a:	4618      	mov	r0, r3
 800121c:	f001 ff8c 	bl	8003138 <xTaskRemoveFromEventList>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <xQueuePeek+0xde>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001226:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <xQueuePeek+0x1c8>)
 8001228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	f3bf 8f4f 	dsb	sy
 8001232:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001236:	f004 fa57 	bl	80056e8 <vPortExitCritical>

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
 800123a:	2301      	movs	r3, #1
 800123c:	e06b      	b.n	8001316 <xQueuePeek+0x1be>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800123e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001242:	4313      	orrs	r3, r2
 8001244:	d103      	bne.n	800124e <xQueuePeek+0xf6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001246:	f004 fa4f 	bl	80056e8 <vPortExitCritical>

                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800124a:	2300      	movs	r3, #0
 800124c:	e063      	b.n	8001316 <xQueuePeek+0x1be>
                }
                else if( xEntryTimeSet == pdFALSE )
 800124e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001250:	2b00      	cmp	r3, #0
 8001252:	d106      	bne.n	8001262 <xQueuePeek+0x10a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4618      	mov	r0, r3
 800125a:	f002 f937 	bl	80034cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800125e:	2301      	movs	r3, #1
 8001260:	63fb      	str	r3, [r7, #60]	; 0x3c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001262:	f004 fa41 	bl	80056e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 8001266:	f001 fb17 	bl	8002898 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800126a:	f004 fa0d 	bl	8005688 <vPortEnterCritical>
 800126e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001270:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001274:	b25b      	sxtb	r3, r3
 8001276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800127a:	d103      	bne.n	8001284 <xQueuePeek+0x12c>
 800127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800127e:	2200      	movs	r2, #0
 8001280:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001286:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800128a:	b25b      	sxtb	r3, r3
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001290:	d103      	bne.n	800129a <xQueuePeek+0x142>
 8001292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001294:	2200      	movs	r2, #0
 8001296:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800129a:	f004 fa25 	bl	80056e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800129e:	463a      	mov	r2, r7
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 f928 	bl	80034fc <xTaskCheckForTimeOut>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d124      	bne.n	80012fc <xQueuePeek+0x1a4>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012b4:	f000 fac4 	bl	8001840 <prvIsQueueEmpty>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d018      	beq.n	80012f0 <xQueuePeek+0x198>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80012be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80012c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012c8:	4608      	mov	r0, r1
 80012ca:	f001 fe6b 	bl	8002fa4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80012ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012d0:	f000 fa64 	bl	800179c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80012d4:	f001 faee 	bl	80028b4 <xTaskResumeAll>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d185      	bne.n	80011ea <xQueuePeek+0x92>
                {
                    taskYIELD_WITHIN_API();
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <xQueuePeek+0x1c8>)
 80012e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	f3bf 8f4f 	dsb	sy
 80012ea:	f3bf 8f6f 	isb	sy
 80012ee:	e77c      	b.n	80011ea <xQueuePeek+0x92>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 80012f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012f2:	f000 fa53 	bl	800179c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80012f6:	f001 fadd 	bl	80028b4 <xTaskResumeAll>
 80012fa:	e776      	b.n	80011ea <xQueuePeek+0x92>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 80012fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012fe:	f000 fa4d 	bl	800179c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001302:	f001 fad7 	bl	80028b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001306:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001308:	f000 fa9a 	bl	8001840 <prvIsQueueEmpty>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	f43f af6b 	beq.w	80011ea <xQueuePeek+0x92>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8001314:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001316:	4618      	mov	r0, r3
 8001318:	3740      	adds	r7, #64	; 0x40
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000ed04 	.word	0xe000ed04

08001324 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b090      	sub	sp, #64	; 0x40
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 8001334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10a      	bne.n	8001350 <xQueueReceiveFromISR+0x2c>
    __asm volatile
 800133a:	f04f 0310 	mov.w	r3, #16
 800133e:	f383 8811 	msr	BASEPRI, r3
 8001342:	f3bf 8f6f 	isb	sy
 8001346:	f3bf 8f4f 	dsb	sy
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800134c:	bf00      	nop
 800134e:	e7fe      	b.n	800134e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <xQueueReceiveFromISR+0x3a>
 8001356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <xQueueReceiveFromISR+0x3e>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <xQueueReceiveFromISR+0x40>
 8001362:	2300      	movs	r3, #0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10a      	bne.n	800137e <xQueueReceiveFromISR+0x5a>
    __asm volatile
 8001368:	f04f 0310 	mov.w	r3, #16
 800136c:	f383 8811 	msr	BASEPRI, r3
 8001370:	f3bf 8f6f 	isb	sy
 8001374:	f3bf 8f4f 	dsb	sy
 8001378:	623b      	str	r3, [r7, #32]
}
 800137a:	bf00      	nop
 800137c:	e7fe      	b.n	800137c <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800137e:	f004 fa60 	bl	8005842 <vPortValidateInterruptPriority>
    __asm volatile
 8001382:	f3ef 8211 	mrs	r2, BASEPRI
 8001386:	f04f 0310 	mov.w	r3, #16
 800138a:	f383 8811 	msr	BASEPRI, r3
 800138e:	f3bf 8f6f 	isb	sy
 8001392:	f3bf 8f4f 	dsb	sy
 8001396:	61fa      	str	r2, [r7, #28]
 8001398:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 800139a:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800139e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80013a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d046      	beq.n	8001438 <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80013aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80013b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013b8:	f000 f9ca 	bl	8001750 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80013bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013be:	1e5a      	subs	r2, r3, #1
 80013c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80013c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013cc:	d112      	bne.n	80013f4 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d02d      	beq.n	8001432 <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d8:	3310      	adds	r3, #16
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 feac 	bl	8003138 <xTaskRemoveFromEventList>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d025      	beq.n	8001432 <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d022      	beq.n	8001432 <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e01e      	b.n	8001432 <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80013f4:	f001 fbb2 	bl	8002b5c <uxTaskGetNumberOfTasks>
 80013f8:	62b8      	str	r0, [r7, #40]	; 0x28
 80013fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001400:	429a      	cmp	r2, r3
 8001402:	d916      	bls.n	8001432 <xQueueReceiveFromISR+0x10e>
 8001404:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001408:	2b7f      	cmp	r3, #127	; 0x7f
 800140a:	d10a      	bne.n	8001422 <xQueueReceiveFromISR+0xfe>
    __asm volatile
 800140c:	f04f 0310 	mov.w	r3, #16
 8001410:	f383 8811 	msr	BASEPRI, r3
 8001414:	f3bf 8f6f 	isb	sy
 8001418:	f3bf 8f4f 	dsb	sy
 800141c:	617b      	str	r3, [r7, #20]
}
 800141e:	bf00      	nop
 8001420:	e7fe      	b.n	8001420 <xQueueReceiveFromISR+0xfc>
 8001422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001426:	3301      	adds	r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	b25a      	sxtb	r2, r3
 800142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800142e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            xReturn = pdPASS;
 8001432:	2301      	movs	r3, #1
 8001434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001436:	e001      	b.n	800143c <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 8001438:	2300      	movs	r3, #0
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	613b      	str	r3, [r7, #16]
    __asm volatile
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f383 8811 	msr	BASEPRI, r3
}
 8001446:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
 8001448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800144a:	4618      	mov	r0, r3
 800144c:	3740      	adds	r7, #64	; 0x40
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b08c      	sub	sp, #48	; 0x30
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28

    traceENTER_xQueuePeekFromISR( xQueue, pvBuffer );

    configASSERT( pxQueue );
 8001460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10a      	bne.n	800147c <xQueuePeekFromISR+0x2a>
    __asm volatile
 8001466:	f04f 0310 	mov.w	r3, #16
 800146a:	f383 8811 	msr	BASEPRI, r3
 800146e:	f3bf 8f6f 	isb	sy
 8001472:	f3bf 8f4f 	dsb	sy
 8001476:	61fb      	str	r3, [r7, #28]
}
 8001478:	bf00      	nop
 800147a:	e7fe      	b.n	800147a <xQueuePeekFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d103      	bne.n	800148a <xQueuePeekFromISR+0x38>
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <xQueuePeekFromISR+0x3c>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <xQueuePeekFromISR+0x3e>
 800148e:	2300      	movs	r3, #0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10a      	bne.n	80014aa <xQueuePeekFromISR+0x58>
    __asm volatile
 8001494:	f04f 0310 	mov.w	r3, #16
 8001498:	f383 8811 	msr	BASEPRI, r3
 800149c:	f3bf 8f6f 	isb	sy
 80014a0:	f3bf 8f4f 	dsb	sy
 80014a4:	61bb      	str	r3, [r7, #24]
}
 80014a6:	bf00      	nop
 80014a8:	e7fe      	b.n	80014a8 <xQueuePeekFromISR+0x56>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10a      	bne.n	80014c8 <xQueuePeekFromISR+0x76>
    __asm volatile
 80014b2:	f04f 0310 	mov.w	r3, #16
 80014b6:	f383 8811 	msr	BASEPRI, r3
 80014ba:	f3bf 8f6f 	isb	sy
 80014be:	f3bf 8f4f 	dsb	sy
 80014c2:	617b      	str	r3, [r7, #20]
}
 80014c4:	bf00      	nop
 80014c6:	e7fe      	b.n	80014c6 <xQueuePeekFromISR+0x74>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014c8:	f004 f9bb 	bl	8005842 <vPortValidateInterruptPriority>
    __asm volatile
 80014cc:	f3ef 8211 	mrs	r2, BASEPRI
 80014d0:	f04f 0310 	mov.w	r3, #16
 80014d4:	f383 8811 	msr	BASEPRI, r3
 80014d8:	f3bf 8f6f 	isb	sy
 80014dc:	f3bf 8f4f 	dsb	sy
 80014e0:	613a      	str	r2, [r7, #16]
 80014e2:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 80014e4:	693b      	ldr	r3, [r7, #16]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00c      	beq.n	800150a <xQueuePeekFromISR+0xb8>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	623b      	str	r3, [r7, #32]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014fa:	f000 f929 	bl	8001750 <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	6a3a      	ldr	r2, [r7, #32]
 8001502:	60da      	str	r2, [r3, #12]

            xReturn = pdPASS;
 8001504:	2301      	movs	r3, #1
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001508:	e001      	b.n	800150e <xQueuePeekFromISR+0xbc>
        }
        else
        {
            xReturn = pdFAIL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	60bb      	str	r3, [r7, #8]
    __asm volatile
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f383 8811 	msr	BASEPRI, r3
}
 8001518:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueuePeekFromISR( xReturn );

    return xReturn;
 800151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800151c:	4618      	mov	r0, r3
 800151e:	3730      	adds	r7, #48	; 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10a      	bne.n	8001548 <uxQueueMessagesWaiting+0x24>
    __asm volatile
 8001532:	f04f 0310 	mov.w	r3, #16
 8001536:	f383 8811 	msr	BASEPRI, r3
 800153a:	f3bf 8f6f 	isb	sy
 800153e:	f3bf 8f4f 	dsb	sy
 8001542:	60bb      	str	r3, [r7, #8]
}
 8001544:	bf00      	nop
 8001546:	e7fe      	b.n	8001546 <uxQueueMessagesWaiting+0x22>

    portBASE_TYPE_ENTER_CRITICAL();
 8001548:	f004 f89e 	bl	8005688 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	60fb      	str	r3, [r7, #12]
    }
    portBASE_TYPE_EXIT_CRITICAL();
 8001552:	f004 f8c9 	bl	80056e8 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	617b      	str	r3, [r7, #20]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <uxQueueSpacesAvailable+0x28>
    __asm volatile
 8001572:	f04f 0310 	mov.w	r3, #16
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	60fb      	str	r3, [r7, #12]
}
 8001584:	bf00      	nop
 8001586:	e7fe      	b.n	8001586 <uxQueueSpacesAvailable+0x26>

    portBASE_TYPE_ENTER_CRITICAL();
 8001588:	f004 f87e 	bl	8005688 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	613b      	str	r3, [r7, #16]
    }
    portBASE_TYPE_EXIT_CRITICAL();
 8001598:	f004 f8a6 	bl	80056e8 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 800159c:	693b      	ldr	r3, [r7, #16]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80015a6:	b480      	push	{r7}
 80015a8:	b087      	sub	sp, #28
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	617b      	str	r3, [r7, #20]

    traceENTER_uxQueueMessagesWaitingFromISR( xQueue );

    configASSERT( pxQueue );
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10a      	bne.n	80015ce <uxQueueMessagesWaitingFromISR+0x28>
    __asm volatile
 80015b8:	f04f 0310 	mov.w	r3, #16
 80015bc:	f383 8811 	msr	BASEPRI, r3
 80015c0:	f3bf 8f6f 	isb	sy
 80015c4:	f3bf 8f4f 	dsb	sy
 80015c8:	60fb      	str	r3, [r7, #12]
}
 80015ca:	bf00      	nop
 80015cc:	e7fe      	b.n	80015cc <uxQueueMessagesWaitingFromISR+0x26>
    uxReturn = pxQueue->uxMessagesWaiting;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	613b      	str	r3, [r7, #16]

    traceRETURN_uxQueueMessagesWaitingFromISR( uxReturn );

    return uxReturn;
 80015d4:	693b      	ldr	r3, [r7, #16]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10a      	bne.n	800160a <vQueueDelete+0x28>
    __asm volatile
 80015f4:	f04f 0310 	mov.w	r3, #16
 80015f8:	f383 8811 	msr	BASEPRI, r3
 80015fc:	f3bf 8f6f 	isb	sy
 8001600:	f3bf 8f4f 	dsb	sy
 8001604:	60bb      	str	r3, [r7, #8]
}
 8001606:	bf00      	nop
 8001608:	e7fe      	b.n	8001608 <vQueueDelete+0x26>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f004 fa4a 	bl	8005aa4 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <uxQueueGetQueueItemSize>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueGetQueueItemSize( QueueHandle_t xQueue ) /* PRIVILEGED_FUNCTION */
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    traceENTER_uxQueueGetQueueItemSize( xQueue );

    traceRETURN_uxQueueGetQueueItemSize( ( ( Queue_t * ) xQueue )->uxItemSize );

    return ( ( Queue_t * ) xQueue )->uxItemSize;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <uxQueueGetQueueLength>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueGetQueueLength( QueueHandle_t xQueue ) /* PRIVILEGED_FUNCTION */
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
    traceENTER_uxQueueGetQueueLength( xQueue );

    traceRETURN_uxQueueGetQueueLength( ( ( Queue_t * ) xQueue )->uxLength );

    return ( ( Queue_t * ) xQueue )->uxLength;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <prvGetHighestPriorityOfWaitToReceiveList>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetHighestPriorityOfWaitToReceiveList( const Queue_t * const pxQueue )
    {
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <prvGetHighestPriorityOfWaitToReceiveList+0x22>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	4613      	mov	r3, r2
 8001662:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e001      	b.n	800166e <prvGetHighestPriorityOfWaitToReceiveList+0x26>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800166e:	68fb      	ldr	r3, [r7, #12]
    }
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d14d      	bne.n	800173e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 f954 	bl	8003954 <xTaskPriorityDisinherit>
 80016ac:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	e043      	b.n	800173e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d119      	bne.n	80016f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6858      	ldr	r0, [r3, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c4:	461a      	mov	r2, r3
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	f004 fd20 	bl	800610c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d4:	441a      	add	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d32b      	bcc.n	800173e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	e026      	b.n	800173e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	68d8      	ldr	r0, [r3, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f8:	461a      	mov	r2, r3
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	f004 fd06 	bl	800610c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001708:	425b      	negs	r3, r3
 800170a:	441a      	add	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001724:	425b      	negs	r3, r3
 8001726:	441a      	add	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d105      	bne.n	800173e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	3b01      	subs	r3, #1
 800173c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40

    return xReturn;
 8001746:	697b      	ldr	r3, [r7, #20]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175e:	2b00      	cmp	r3, #0
 8001760:	d018      	beq.n	8001794 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176a:	441a      	add	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	429a      	cmp	r2, r3
 800177a:	d303      	bcc.n	8001784 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68d9      	ldr	r1, [r3, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178c:	461a      	mov	r2, r3
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f004 fcbc 	bl	800610c <memcpy>
    }
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80017a4:	f003 ff70 	bl	8005688 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80017ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80017b0:	e011      	b.n	80017d6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d012      	beq.n	80017e0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3328      	adds	r3, #40	; 0x28
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fcba 	bl	8003138 <xTaskRemoveFromEventList>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80017ca:	f001 ff1f 	bl	800360c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	dce9      	bgt.n	80017b2 <prvUnlockQueue+0x16>
 80017de:	e000      	b.n	80017e2 <prvUnlockQueue+0x46>
                    break;
 80017e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	22ff      	movs	r2, #255	; 0xff
 80017e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    }
    taskEXIT_CRITICAL();
 80017ea:	f003 ff7d 	bl	80056e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80017ee:	f003 ff4b 	bl	8005688 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80017f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80017fa:	e011      	b.n	8001820 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d012      	beq.n	800182a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3310      	adds	r3, #16
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fc95 	bl	8003138 <xTaskRemoveFromEventList>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001814:	f001 fefa 	bl	800360c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	3b01      	subs	r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001824:	2b00      	cmp	r3, #0
 8001826:	dce9      	bgt.n	80017fc <prvUnlockQueue+0x60>
 8001828:	e000      	b.n	800182c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800182a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	22ff      	movs	r2, #255	; 0xff
 8001830:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    taskEXIT_CRITICAL();
 8001834:	f003 ff58 	bl	80056e8 <vPortExitCritical>
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001848:	f003 ff1e 	bl	8005688 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001854:	2301      	movs	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e001      	b.n	800185e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800185e:	f003 ff43 	bl	80056e8 <vPortExitCritical>

    return xReturn;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueIsQueueEmptyFromISR( xQueue );

    configASSERT( pxQueue );
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10a      	bne.n	8001894 <xQueueIsQueueEmptyFromISR+0x28>
    __asm volatile
 800187e:	f04f 0310 	mov.w	r3, #16
 8001882:	f383 8811 	msr	BASEPRI, r3
 8001886:	f3bf 8f6f 	isb	sy
 800188a:	f3bf 8f4f 	dsb	sy
 800188e:	60fb      	str	r3, [r7, #12]
}
 8001890:	bf00      	nop
 8001892:	e7fe      	b.n	8001892 <xQueueIsQueueEmptyFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <xQueueIsQueueEmptyFromISR+0x36>
    {
        xReturn = pdTRUE;
 800189c:	2301      	movs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e001      	b.n	80018a6 <xQueueIsQueueEmptyFromISR+0x3a>
    }
    else
    {
        xReturn = pdFALSE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
    }

    traceRETURN_xQueueIsQueueEmptyFromISR( xReturn );

    return xReturn;
 80018a6:	697b      	ldr	r3, [r7, #20]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80018bc:	f003 fee4 	bl	8005688 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d102      	bne.n	80018d2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e001      	b.n	80018d6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80018d6:	f003 ff07 	bl	80056e8 <vPortExitCritical>

    return xReturn;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10a      	bne.n	800190c <xQueueIsQueueFullFromISR+0x28>
    __asm volatile
 80018f6:	f04f 0310 	mov.w	r3, #16
 80018fa:	f383 8811 	msr	BASEPRI, r3
 80018fe:	f3bf 8f6f 	isb	sy
 8001902:	f3bf 8f4f 	dsb	sy
 8001906:	60fb      	str	r3, [r7, #12]
}
 8001908:	bf00      	nop
 800190a:	e7fe      	b.n	800190a <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	429a      	cmp	r2, r3
 8001916:	d102      	bne.n	800191e <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001918:	2301      	movs	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e001      	b.n	8001922 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
 8001922:	697b      	ldr	r3, [r7, #20]
}
 8001924:	4618      	mov	r0, r3
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af02      	add	r7, sp, #8
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	e9c7 2300 	strd	r2, r3, [r7]
        Queue_t * const pxQueue = xQueue;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001940:	f003 fea2 	bl	8005688 <vPortEnterCritical>
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800194a:	b25b      	sxtb	r3, r3
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001950:	d103      	bne.n	800195a <vQueueWaitForMessageRestricted+0x2a>
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001960:	b25b      	sxtb	r3, r3
 8001962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001966:	d103      	bne.n	8001970 <vQueueWaitForMessageRestricted+0x40>
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001970:	f003 feba 	bl	80056e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <vQueueWaitForMessageRestricted+0x60>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198a:	4608      	mov	r0, r1
 800198c:	f001 fb8a 	bl	80030a4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001990:	6978      	ldr	r0, [r7, #20]
 8001992:	f7ff ff03 	bl	800179c <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop

080019a0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af04      	add	r7, sp, #16
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 ff84 	bl	80058c0 <pvPortMalloc>
 80019b8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80019c0:	2060      	movs	r0, #96	; 0x60
 80019c2:	f003 ff7d 	bl	80058c0 <pvPortMalloc>
 80019c6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80019ce:	2260      	movs	r2, #96	; 0x60
 80019d0:	2100      	movs	r1, #0
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f004 fba8 	bl	8006128 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80019de:	e005      	b.n	80019ec <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80019e0:	6938      	ldr	r0, [r7, #16]
 80019e2:	f004 f85f 	bl	8005aa4 <vPortFree>
 80019e6:	e001      	b.n	80019ec <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00d      	beq.n	8001a0e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019f2:	2300      	movs	r3, #0
 80019f4:	9303      	str	r3, [sp, #12]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f828 	bl	8001a5e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001a0e:	697b      	ldr	r3, [r7, #20]
    }
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff ffb3 	bl	80019a0 <prvCreateTask>
 8001a3a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001a42:	6938      	ldr	r0, [r7, #16]
 8001a44:	f000 f8a2 	bl	8001b8c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e002      	b.n	8001a54 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a52:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001a54:	697b      	ldr	r3, [r7, #20]
    }
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001a5e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	461a      	mov	r2, r3
 8001a78:	21a5      	movs	r1, #165	; 0xa5
 8001a7a:	f004 fb55 	bl	8006128 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f023 0307 	bic.w	r3, r3, #7
 8001a96:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001aa2:	f04f 0310 	mov.w	r3, #16
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	f3bf 8f6f 	isb	sy
 8001aae:	f3bf 8f4f 	dsb	sy
 8001ab2:	617b      	str	r3, [r7, #20]
}
 8001ab4:	bf00      	nop
 8001ab6:	e7fe      	b.n	8001ab6 <prvInitialiseNewTask+0x58>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01e      	beq.n	8001afc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e012      	b.n	8001aea <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4413      	add	r3, r2
 8001aca:	7819      	ldrb	r1, [r3, #0]
 8001acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3340      	adds	r3, #64	; 0x40
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	d9e9      	bls.n	8001ac4 <prvInitialiseNewTask+0x66>
 8001af0:	e000      	b.n	8001af4 <prvInitialiseNewTask+0x96>
            {
                break;
 8001af2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001afe:	2b37      	cmp	r3, #55	; 0x37
 8001b00:	d90a      	bls.n	8001b18 <prvInitialiseNewTask+0xba>
    __asm volatile
 8001b02:	f04f 0310 	mov.w	r3, #16
 8001b06:	f383 8811 	msr	BASEPRI, r3
 8001b0a:	f3bf 8f6f 	isb	sy
 8001b0e:	f3bf 8f4f 	dsb	sy
 8001b12:	613b      	str	r3, [r7, #16]
}
 8001b14:	bf00      	nop
 8001b16:	e7fe      	b.n	8001b16 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b1a:	2b37      	cmp	r3, #55	; 0x37
 8001b1c:	d901      	bls.n	8001b22 <prvInitialiseNewTask+0xc4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b1e:	2337      	movs	r3, #55	; 0x37
 8001b20:	63bb      	str	r3, [r7, #56]	; 0x38
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b26:	639a      	str	r2, [r3, #56]	; 0x38
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b2c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b30:	3308      	adds	r3, #8
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fc63 	bl	80003fe <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b3a:	3320      	adds	r3, #32
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fc5e 	bl	80003fe <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b46:	619a      	str	r2, [r3, #24]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	461c      	mov	r4, r3
 8001b4e:	4615      	mov	r5, r2
 8001b50:	2300      	movs	r3, #0
 8001b52:	f1d4 0838 	rsbs	r8, r4, #56	; 0x38
 8001b56:	eb63 0905 	sbc.w	r9, r3, r5
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b5c:	e9c3 8908 	strd	r8, r9, [r3, #32]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	69b8      	ldr	r0, [r7, #24]
 8001b6c:	f003 fc02 	bl	8005374 <pxPortInitialiseStack>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b74:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b82:	bf00      	nop
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001b8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001b94:	f003 fd78 	bl	8005688 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001b98:	4b40      	ldr	r3, [pc, #256]	; (8001c9c <prvAddNewTaskToReadyList+0x110>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a3f      	ldr	r2, [pc, #252]	; (8001c9c <prvAddNewTaskToReadyList+0x110>)
 8001ba0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <prvAddNewTaskToReadyList+0x114>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001baa:	4a3d      	ldr	r2, [pc, #244]	; (8001ca0 <prvAddNewTaskToReadyList+0x114>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001bb0:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <prvAddNewTaskToReadyList+0x110>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d110      	bne.n	8001bda <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001bb8:	f001 fd4c 	bl	8003654 <prvInitialiseTaskLists>
 8001bbc:	e00d      	b.n	8001bda <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <prvAddNewTaskToReadyList+0x118>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <prvAddNewTaskToReadyList+0x114>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d802      	bhi.n	8001bda <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001bd4:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <prvAddNewTaskToReadyList+0x114>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001bda:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <prvAddNewTaskToReadyList+0x11c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <prvAddNewTaskToReadyList+0x11c>)
 8001be2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <prvAddNewTaskToReadyList+0x120>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d903      	bls.n	8001bf8 <prvAddNewTaskToReadyList+0x6c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	; (8001cac <prvAddNewTaskToReadyList+0x120>)
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bfc:	492c      	ldr	r1, [pc, #176]	; (8001cb0 <prvAddNewTaskToReadyList+0x124>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3304      	adds	r3, #4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	615a      	str	r2, [r3, #20]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	3208      	adds	r2, #8
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f103 0208 	add.w	r2, r3, #8
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <prvAddNewTaskToReadyList+0x124>)
 8001c3e:	441a      	add	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	61da      	str	r2, [r3, #28]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c48:	4919      	ldr	r1, [pc, #100]	; (8001cb0 <prvAddNewTaskToReadyList+0x124>)
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	440b      	add	r3, r1
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c5a:	1c59      	adds	r1, r3, #1
 8001c5c:	4814      	ldr	r0, [pc, #80]	; (8001cb0 <prvAddNewTaskToReadyList+0x124>)
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4403      	add	r3, r0
 8001c68:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001c6a:	f003 fd3d 	bl	80056e8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <prvAddNewTaskToReadyList+0x118>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00e      	beq.n	8001c94 <prvAddNewTaskToReadyList+0x108>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <prvAddNewTaskToReadyList+0x114>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <prvAddNewTaskToReadyList+0x108>
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <prvAddNewTaskToReadyList+0x128>)
 8001c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000600 	.word	0x20000600
 8001ca0:	20000030 	.word	0x20000030
 8001ca4:	20000614 	.word	0x20000614
 8001ca8:	20000628 	.word	0x20000628
 8001cac:	20000610 	.word	0x20000610
 8001cb0:	20000038 	.word	0x20000038
 8001cb4:	e000ed04 	.word	0xe000ed04

08001cb8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8001cc4:	f003 fce0 	bl	8005688 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d102      	bne.n	8001cd4 <vTaskDelete+0x1c>
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <vTaskDelete+0x104>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e000      	b.n	8001cd6 <vTaskDelete+0x1e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
            configASSERT( pxTCB != NULL );
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10a      	bne.n	8001cf4 <vTaskDelete+0x3c>
    __asm volatile
 8001cde:	f04f 0310 	mov.w	r3, #16
 8001ce2:	f383 8811 	msr	BASEPRI, r3
 8001ce6:	f3bf 8f6f 	isb	sy
 8001cea:	f3bf 8f4f 	dsb	sy
 8001cee:	613b      	str	r3, [r7, #16]
}
 8001cf0:	bf00      	nop
 8001cf2:	e7fe      	b.n	8001cf2 <vTaskDelete+0x3a>

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fbf4 	bl	80004e6 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <vTaskDelete+0x58>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	3320      	adds	r3, #32
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fbeb 	bl	80004e6 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <vTaskDelete+0x108>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <vTaskDelete+0x108>)
 8001d18:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <vTaskDelete+0x104>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d101      	bne.n	8001d28 <vTaskDelete+0x70>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <vTaskDelete+0x72>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <vTaskDelete+0x10c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d010      	beq.n	8001d56 <vTaskDelete+0x9e>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00d      	beq.n	8001d56 <vTaskDelete+0x9e>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4821      	ldr	r0, [pc, #132]	; (8001dc8 <vTaskDelete+0x110>)
 8001d42:	f7fe fb69 	bl	8000418 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <vTaskDelete+0x114>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <vTaskDelete+0x114>)
 8001d4e:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8001d50:	2301      	movs	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	e006      	b.n	8001d64 <vTaskDelete+0xac>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <vTaskDelete+0x118>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <vTaskDelete+0x118>)
 8001d5e:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8001d60:	f001 fcf6 	bl	8003750 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8001d64:	f003 fcc0 	bl	80056e8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d002      	beq.n	8001d74 <vTaskDelete+0xbc>
        {
            prvDeleteTCB( pxTCB );
 8001d6e:	69b8      	ldr	r0, [r7, #24]
 8001d70:	f001 fcde 	bl	8003730 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <vTaskDelete+0x10c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <vTaskDelete+0xfc>
            {
                if( pxTCB == pxCurrentTCB )
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <vTaskDelete+0x104>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d116      	bne.n	8001db4 <vTaskDelete+0xfc>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <vTaskDelete+0x11c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <vTaskDelete+0xec>
    __asm volatile
 8001d8e:	f04f 0310 	mov.w	r3, #16
 8001d92:	f383 8811 	msr	BASEPRI, r3
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	f3bf 8f4f 	dsb	sy
 8001d9e:	60fb      	str	r3, [r7, #12]
}
 8001da0:	bf00      	nop
 8001da2:	e7fe      	b.n	8001da2 <vTaskDelete+0xea>
                    taskYIELD_WITHIN_API();
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <vTaskDelete+0x120>)
 8001da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000030 	.word	0x20000030
 8001dc0:	20000628 	.word	0x20000628
 8001dc4:	20000614 	.word	0x20000614
 8001dc8:	200005c8 	.word	0x200005c8
 8001dcc:	200005e0 	.word	0x200005e0
 8001dd0:	20000600 	.word	0x20000600
 8001dd4:	2000063c 	.word	0x2000063c
 8001dd8:	e000ed04 	.word	0xe000ed04

08001ddc <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8001ddc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001de0:	b08e      	sub	sp, #56	; 0x38
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	e9c7 2300 	strd	r2, r3, [r7]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34

        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10a      	bne.n	8001e0a <xTaskDelayUntil+0x2e>
    __asm volatile
 8001df4:	f04f 0310 	mov.w	r3, #16
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	61bb      	str	r3, [r7, #24]
}
 8001e06:	bf00      	nop
 8001e08:	e7fe      	b.n	8001e08 <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 8001e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	d10a      	bne.n	8001e28 <xTaskDelayUntil+0x4c>
    __asm volatile
 8001e12:	f04f 0310 	mov.w	r3, #16
 8001e16:	f383 8811 	msr	BASEPRI, r3
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	617b      	str	r3, [r7, #20]
}
 8001e24:	bf00      	nop
 8001e26:	e7fe      	b.n	8001e26 <xTaskDelayUntil+0x4a>

        vTaskSuspendAll();
 8001e28:	f000 fd36 	bl	8002898 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <xTaskDelayUntil+0x140>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

            configASSERT( uxSchedulerSuspended == 1U );
 8001e36:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <xTaskDelayUntil+0x144>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d00a      	beq.n	8001e54 <xTaskDelayUntil+0x78>
    __asm volatile
 8001e3e:	f04f 0310 	mov.w	r3, #16
 8001e42:	f383 8811 	msr	BASEPRI, r3
 8001e46:	f3bf 8f6f 	isb	sy
 8001e4a:	f3bf 8f4f 	dsb	sy
 8001e4e:	613b      	str	r3, [r7, #16]
}
 8001e50:	bf00      	nop
 8001e52:	e7fe      	b.n	8001e52 <xTaskDelayUntil+0x76>

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e5e:	1884      	adds	r4, r0, r2
 8001e60:	eb41 0503 	adc.w	r5, r1, r3
 8001e64:	e9c7 4508 	strd	r4, r5, [r7, #32]

            if( xConstTickCount < *pxPreviousWakeTime )
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e72:	4290      	cmp	r0, r2
 8001e74:	eb71 0303 	sbcs.w	r3, r1, r3
 8001e78:	d213      	bcs.n	8001ea2 <xTaskDelayUntil+0xc6>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e84:	4290      	cmp	r0, r2
 8001e86:	eb71 0303 	sbcs.w	r3, r1, r3
 8001e8a:	d21d      	bcs.n	8001ec8 <xTaskDelayUntil+0xec>
 8001e8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e94:	4290      	cmp	r0, r2
 8001e96:	eb71 0303 	sbcs.w	r3, r1, r3
 8001e9a:	d215      	bcs.n	8001ec8 <xTaskDelayUntil+0xec>
                {
                    xShouldDelay = pdTRUE;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea0:	e012      	b.n	8001ec8 <xTaskDelayUntil+0xec>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001eac:	4290      	cmp	r0, r2
 8001eae:	eb71 0303 	sbcs.w	r3, r1, r3
 8001eb2:	d307      	bcc.n	8001ec4 <xTaskDelayUntil+0xe8>
 8001eb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ebc:	4290      	cmp	r0, r2
 8001ebe:	eb71 0303 	sbcs.w	r3, r1, r3
 8001ec2:	d201      	bcs.n	8001ec8 <xTaskDelayUntil+0xec>
                {
                    xShouldDelay = pdTRUE;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8001ec8:	68f9      	ldr	r1, [r7, #12]
 8001eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ece:	e9c1 2300 	strd	r2, r3, [r1]

            if( xShouldDelay != pdFALSE )
 8001ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00c      	beq.n	8001ef2 <xTaskDelayUntil+0x116>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001ed8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ee0:	ebb0 0802 	subs.w	r8, r0, r2
 8001ee4:	eb61 0903 	sbc.w	r9, r1, r3
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4640      	mov	r0, r8
 8001eec:	4649      	mov	r1, r9
 8001eee:	f002 fc07 	bl	8004700 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8001ef2:	f000 fcdf 	bl	80028b4 <xTaskResumeAll>
 8001ef6:	61f8      	str	r0, [r7, #28]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <xTaskDelayUntil+0x132>
        {
            taskYIELD_WITHIN_API();
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <xTaskDelayUntil+0x148>)
 8001f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );

        return xShouldDelay;
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001f10:	4618      	mov	r0, r3
 8001f12:	3738      	adds	r7, #56	; 0x38
 8001f14:	46bd      	mov	sp, r7
 8001f16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000608 	.word	0x20000608
 8001f20:	2000063c 	.word	0x2000063c
 8001f24:	e000ed04 	.word	0xe000ed04

08001f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	e9c7 0100 	strd	r0, r1, [r7]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	d018      	beq.n	8001f70 <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 8001f3e:	f000 fcab 	bl	8002898 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <vTaskDelay+0x68>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d00a      	beq.n	8001f60 <vTaskDelay+0x38>
    __asm volatile
 8001f4a:	f04f 0310 	mov.w	r3, #16
 8001f4e:	f383 8811 	msr	BASEPRI, r3
 8001f52:	f3bf 8f6f 	isb	sy
 8001f56:	f3bf 8f4f 	dsb	sy
 8001f5a:	60bb      	str	r3, [r7, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	e7fe      	b.n	8001f5e <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f60:	2200      	movs	r2, #0
 8001f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f66:	f002 fbcb 	bl	8004700 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001f6a:	f000 fca3 	bl	80028b4 <xTaskResumeAll>
 8001f6e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <vTaskDelay+0x6c>)
 8001f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	f3bf 8f4f 	dsb	sy
 8001f82:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000063c 	.word	0x2000063c
 8001f94:	e000ed04 	.word	0xe000ed04

08001f98 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        traceENTER_uxTaskPriorityGet( xTask );

        portBASE_TYPE_ENTER_CRITICAL();
 8001fa0:	f003 fb72 	bl	8005688 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <uxTaskPriorityGet+0x18>
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <uxTaskPriorityGet+0x4c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e000      	b.n	8001fb2 <uxTaskPriorityGet+0x1a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	617b      	str	r3, [r7, #20]
            configASSERT( pxTCB != NULL );
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <uxTaskPriorityGet+0x38>
    __asm volatile
 8001fba:	f04f 0310 	mov.w	r3, #16
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	60fb      	str	r3, [r7, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	e7fe      	b.n	8001fce <uxTaskPriorityGet+0x36>

            uxReturn = pxTCB->uxPriority;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	613b      	str	r3, [r7, #16]
        }
        portBASE_TYPE_EXIT_CRITICAL();
 8001fd6:	f003 fb87 	bl	80056e8 <vPortExitCritical>

        traceRETURN_uxTaskPriorityGet( uxReturn );

        return uxReturn;
 8001fda:	693b      	ldr	r3, [r7, #16]
    }
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000030 	.word	0x20000030

08001fe8 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
    {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ff0:	f003 fc27 	bl	8005842 <vPortValidateInterruptPriority>
    __asm volatile
 8001ff4:	f3ef 8211 	mrs	r2, BASEPRI
 8001ff8:	f04f 0310 	mov.w	r3, #16
 8001ffc:	f383 8811 	msr	BASEPRI, r3
 8002000:	f3bf 8f6f 	isb	sy
 8002004:	f3bf 8f4f 	dsb	sy
 8002008:	61ba      	str	r2, [r7, #24]
 800200a:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 800200c:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <uxTaskPriorityGetFromISR+0x34>
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <uxTaskPriorityGetFromISR+0x70>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e000      	b.n	800201e <uxTaskPriorityGetFromISR+0x36>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	623b      	str	r3, [r7, #32]
            configASSERT( pxTCB != NULL );
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <uxTaskPriorityGetFromISR+0x54>
    __asm volatile
 8002026:	f04f 0310 	mov.w	r3, #16
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	613b      	str	r3, [r7, #16]
}
 8002038:	bf00      	nop
 800203a:	e7fe      	b.n	800203a <uxTaskPriorityGetFromISR+0x52>

            uxReturn = pxTCB->uxPriority;
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f383 8811 	msr	BASEPRI, r3
}
 800204c:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_uxTaskPriorityGetFromISR( uxReturn );

        return uxReturn;
 800204e:	69fb      	ldr	r3, [r7, #28]
    }
 8002050:	4618      	mov	r0, r3
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000030 	.word	0x20000030

0800205c <uxTaskBasePriorityGet>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) )

    UBaseType_t uxTaskBasePriorityGet( const TaskHandle_t xTask )
    {
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        traceENTER_uxTaskBasePriorityGet( xTask );

        portBASE_TYPE_ENTER_CRITICAL();
 8002064:	f003 fb10 	bl	8005688 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the base priority of the task
             * that called uxTaskBasePriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <uxTaskBasePriorityGet+0x18>
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <uxTaskBasePriorityGet+0x4c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	e000      	b.n	8002076 <uxTaskBasePriorityGet+0x1a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	617b      	str	r3, [r7, #20]
            configASSERT( pxTCB != NULL );
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10a      	bne.n	8002094 <uxTaskBasePriorityGet+0x38>
    __asm volatile
 800207e:	f04f 0310 	mov.w	r3, #16
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	60fb      	str	r3, [r7, #12]
}
 8002090:	bf00      	nop
 8002092:	e7fe      	b.n	8002092 <uxTaskBasePriorityGet+0x36>

            uxReturn = pxTCB->uxBasePriority;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002098:	613b      	str	r3, [r7, #16]
        }
        portBASE_TYPE_EXIT_CRITICAL();
 800209a:	f003 fb25 	bl	80056e8 <vPortExitCritical>

        traceRETURN_uxTaskBasePriorityGet( uxReturn );

        return uxReturn;
 800209e:	693b      	ldr	r3, [r7, #16]
    }
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000030 	.word	0x20000030

080020ac <uxTaskBasePriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_uxTaskPriorityGet == 1 ) && ( configUSE_MUTEXES == 1 ) )

    UBaseType_t uxTaskBasePriorityGetFromISR( const TaskHandle_t xTask )
    {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020b4:	f003 fbc5 	bl	8005842 <vPortValidateInterruptPriority>
    __asm volatile
 80020b8:	f3ef 8211 	mrs	r2, BASEPRI
 80020bc:	f04f 0310 	mov.w	r3, #16
 80020c0:	f383 8811 	msr	BASEPRI, r3
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	61ba      	str	r2, [r7, #24]
 80020ce:	617b      	str	r3, [r7, #20]
    return ulOriginalBASEPRI;
 80020d0:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
        {
            /* If null is passed in here then it is the base priority of the calling
             * task that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <uxTaskBasePriorityGetFromISR+0x34>
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <uxTaskBasePriorityGetFromISR+0x70>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e000      	b.n	80020e2 <uxTaskBasePriorityGetFromISR+0x36>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	623b      	str	r3, [r7, #32]
            configASSERT( pxTCB != NULL );
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <uxTaskBasePriorityGetFromISR+0x54>
    __asm volatile
 80020ea:	f04f 0310 	mov.w	r3, #16
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	613b      	str	r3, [r7, #16]
}
 80020fc:	bf00      	nop
 80020fe:	e7fe      	b.n	80020fe <uxTaskBasePriorityGetFromISR+0x52>

            uxReturn = pxTCB->uxBasePriority;
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	60fb      	str	r3, [r7, #12]
    __asm volatile
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f383 8811 	msr	BASEPRI, r3
}
 8002110:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_uxTaskBasePriorityGetFromISR( uxReturn );

        return uxReturn;
 8002112:	69fb      	ldr	r3, [r7, #28]
    }
 8002114:	4618      	mov	r0, r3
 8002116:	3728      	adds	r7, #40	; 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000030 	.word	0x20000030

08002120 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002124:	b08a      	sub	sp, #40	; 0x28
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
            BaseType_t xYieldForTask = pdFALSE;
        #endif

        traceENTER_vTaskPrioritySet( xTask, uxNewPriority );

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b37      	cmp	r3, #55	; 0x37
 8002134:	d90a      	bls.n	800214c <vTaskPrioritySet+0x2c>
    __asm volatile
 8002136:	f04f 0310 	mov.w	r3, #16
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	613b      	str	r3, [r7, #16]
}
 8002148:	bf00      	nop
 800214a:	e7fe      	b.n	800214a <vTaskPrioritySet+0x2a>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b37      	cmp	r3, #55	; 0x37
 8002150:	d901      	bls.n	8002156 <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002152:	2337      	movs	r3, #55	; 0x37
 8002154:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002156:	f003 fa97 	bl	8005688 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <vTaskPrioritySet+0x46>
 8002160:	4b5e      	ldr	r3, [pc, #376]	; (80022dc <vTaskPrioritySet+0x1bc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	e000      	b.n	8002168 <vTaskPrioritySet+0x48>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	623b      	str	r3, [r7, #32]
            configASSERT( pxTCB != NULL );
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <vTaskPrioritySet+0x66>
    __asm volatile
 8002170:	f04f 0310 	mov.w	r3, #16
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	60fb      	str	r3, [r7, #12]
}
 8002182:	bf00      	nop
 8002184:	e7fe      	b.n	8002184 <vTaskPrioritySet+0x64>

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218a:	61fb      	str	r3, [r7, #28]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	f000 809c 	beq.w	80022ce <vTaskPrioritySet+0x1ae>
            {
                /* The priority change may have readied a task of higher
                 * priority than a running task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	429a      	cmp	r2, r3
 800219c:	d90d      	bls.n	80021ba <vTaskPrioritySet+0x9a>
                {
                    #if ( configNUMBER_OF_CORES == 1 )
                    {
                        if( pxTCB != pxCurrentTCB )
 800219e:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <vTaskPrioritySet+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6a3a      	ldr	r2, [r7, #32]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d00f      	beq.n	80021c8 <vTaskPrioritySet+0xa8>
                        {
                            /* The priority of a task other than the currently
                             * running task is being raised.  Is the priority being
                             * raised above that of the running task? */
                            if( uxNewPriority > pxCurrentTCB->uxPriority )
 80021a8:	4b4c      	ldr	r3, [pc, #304]	; (80022dc <vTaskPrioritySet+0x1bc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d909      	bls.n	80021c8 <vTaskPrioritySet+0xa8>
                            {
                                xYieldRequired = pdTRUE;
 80021b4:	2301      	movs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	e006      	b.n	80021c8 <vTaskPrioritySet+0xa8>
                         * perform a yield for this task later. */
                        xYieldForTask = pdTRUE;
                    }
                    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                }
                else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 80021ba:	4b48      	ldr	r3, [pc, #288]	; (80022dc <vTaskPrioritySet+0x1bc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a3a      	ldr	r2, [r7, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d101      	bne.n	80021c8 <vTaskPrioritySet+0xa8>
                     * is ready to execute. */
                    #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
                        if( pxTCB->xPreemptionDisable == pdFALSE )
                    #endif
                    {
                        xYieldRequired = pdTRUE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	61bb      	str	r3, [r7, #24]
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority or the new priority
                     * is bigger than the inherited priority. */
                    if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->uxPriority ) )
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d004      	beq.n	80021e4 <vTaskPrioritySet+0xc4>
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d902      	bls.n	80021ea <vTaskPrioritySet+0xca>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	639a      	str	r2, [r3, #56]	; 0x38
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	651a      	str	r2, [r3, #80]	; 0x50
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <vTaskPrioritySet+0xf2>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) );
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	461c      	mov	r4, r3
 8002200:	4615      	mov	r5, r2
 8002202:	2300      	movs	r3, #0
 8002204:	f1d4 0838 	rsbs	r8, r4, #56	; 0x38
 8002208:	eb63 0905 	sbc.w	r9, r3, r5
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	e9c3 8908 	strd	r8, r9, [r3, #32]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	69d9      	ldr	r1, [r3, #28]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4a2f      	ldr	r2, [pc, #188]	; (80022e0 <vTaskPrioritySet+0x1c0>)
 8002222:	4413      	add	r3, r2
 8002224:	4299      	cmp	r1, r3
 8002226:	d147      	bne.n	80022b8 <vTaskPrioritySet+0x198>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	3308      	adds	r3, #8
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f95a 	bl	80004e6 <uxListRemove>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <vTaskPrioritySet+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d903      	bls.n	8002246 <vTaskPrioritySet+0x126>
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <vTaskPrioritySet+0x1c4>)
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800224a:	4925      	ldr	r1, [pc, #148]	; (80022e0 <vTaskPrioritySet+0x1c0>)
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	3304      	adds	r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	615a      	str	r2, [r3, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	6a3a      	ldr	r2, [r7, #32]
 8002270:	3208      	adds	r2, #8
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f103 0208 	add.w	r2, r3, #8
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <vTaskPrioritySet+0x1c0>)
 800228c:	441a      	add	r2, r3
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	61da      	str	r2, [r3, #28]
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002296:	4912      	ldr	r1, [pc, #72]	; (80022e0 <vTaskPrioritySet+0x1c0>)
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a8:	1c59      	adds	r1, r3, #1
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <vTaskPrioritySet+0x1c0>)
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4403      	add	r3, r0
 80022b6:	6019      	str	r1, [r3, #0]
                        xYieldForTask = pdFALSE;
                    }
                    #endif
                }

                if( xYieldRequired != pdFALSE )
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <vTaskPrioritySet+0x1ae>
                {
                    /* The running task priority is set down. Request the task to yield. */
                    taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <vTaskPrioritySet+0x1c8>)
 80022c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80022ce:	f003 fa0b 	bl	80056e8 <vPortExitCritical>

        traceRETURN_vTaskPrioritySet();
    }
 80022d2:	bf00      	nop
 80022d4:	3728      	adds	r7, #40	; 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022dc:	20000030 	.word	0x20000030
 80022e0:	20000038 	.word	0x20000038
 80022e4:	20000610 	.word	0x20000610
 80022e8:	e000ed04 	.word	0xe000ed04

080022ec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        traceENTER_vTaskSuspend( xTaskToSuspend );

        taskENTER_CRITICAL();
 80022f4:	f003 f9c8 	bl	8005688 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <vTaskSuspend+0x18>
 80022fe:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <vTaskSuspend+0x10c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	e000      	b.n	8002306 <vTaskSuspend+0x1a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	61bb      	str	r3, [r7, #24]
            configASSERT( pxTCB != NULL );
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <vTaskSuspend+0x38>
    __asm volatile
 800230e:	f04f 0310 	mov.w	r3, #16
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	613b      	str	r3, [r7, #16]
}
 8002320:	bf00      	nop
 8002322:	e7fe      	b.n	8002322 <vTaskSuspend+0x36>

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	3308      	adds	r3, #8
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f8dc 	bl	80004e6 <uxListRemove>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <vTaskSuspend+0x54>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	3320      	adds	r3, #32
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f8d3 	bl	80004e6 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	3308      	adds	r3, #8
 8002344:	4619      	mov	r1, r3
 8002346:	482d      	ldr	r0, [pc, #180]	; (80023fc <vTaskSuspend+0x110>)
 8002348:	f7fe f866 	bl	8000418 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	e010      	b.n	8002374 <vTaskSuspend+0x88>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4413      	add	r3, r2
 8002358:	335c      	adds	r3, #92	; 0x5c
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <vTaskSuspend+0x82>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	4413      	add	r3, r2
 8002368:	335c      	adds	r3, #92	; 0x5c
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	ddeb      	ble.n	8002352 <vTaskSuspend+0x66>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
        }
        taskEXIT_CRITICAL();
 800237a:	f003 f9b5 	bl	80056e8 <vPortExitCritical>

        #if ( configNUMBER_OF_CORES == 1 )
        {
            UBaseType_t uxCurrentListLength;

            if( xSchedulerRunning != pdFALSE )
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <vTaskSuspend+0x114>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <vTaskSuspend+0xa6>
            {
                /* Reset the next expected unblock time in case it referred to the
                 * task that is now in the Suspended state. */
                taskENTER_CRITICAL();
 8002386:	f003 f97f 	bl	8005688 <vPortEnterCritical>
                {
                    prvResetNextTaskUnblockTime();
 800238a:	f001 f9e1 	bl	8003750 <prvResetNextTaskUnblockTime>
                }
                taskEXIT_CRITICAL();
 800238e:	f003 f9ab 	bl	80056e8 <vPortExitCritical>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( pxTCB == pxCurrentTCB )
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <vTaskSuspend+0x10c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	429a      	cmp	r2, r3
 800239a:	d129      	bne.n	80023f0 <vTaskSuspend+0x104>
            {
                if( xSchedulerRunning != pdFALSE )
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <vTaskSuspend+0x114>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d017      	beq.n	80023d4 <vTaskSuspend+0xe8>
                {
                    /* The current task has just been suspended. */
                    configASSERT( uxSchedulerSuspended == 0 );
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <vTaskSuspend+0x118>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <vTaskSuspend+0xd6>
    __asm volatile
 80023ac:	f04f 0310 	mov.w	r3, #16
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	60fb      	str	r3, [r7, #12]
}
 80023be:	bf00      	nop
 80023c0:	e7fe      	b.n	80023c0 <vTaskSuspend+0xd4>
                    portYIELD_WITHIN_API();
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <vTaskSuspend+0x11c>)
 80023c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskSuspend();
    }
 80023d2:	e00d      	b.n	80023f0 <vTaskSuspend+0x104>
                    uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <vTaskSuspend+0x110>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	617b      	str	r3, [r7, #20]
                    if( uxCurrentListLength == uxCurrentNumberOfTasks )
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <vTaskSuspend+0x120>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d103      	bne.n	80023ec <vTaskSuspend+0x100>
                        pxCurrentTCB = NULL;
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <vTaskSuspend+0x10c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
    }
 80023ea:	e001      	b.n	80023f0 <vTaskSuspend+0x104>
                        vTaskSwitchContext();
 80023ec:	f000 fd4c 	bl	8002e88 <vTaskSwitchContext>
    }
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000030 	.word	0x20000030
 80023fc:	200005e8 	.word	0x200005e8
 8002400:	20000614 	.word	0x20000614
 8002404:	2000063c 	.word	0x2000063c
 8002408:	e000ed04 	.word	0xe000ed04
 800240c:	20000600 	.word	0x20000600

08002410 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	60fb      	str	r3, [r7, #12]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <prvTaskIsTaskSuspended+0x2c>
    __asm volatile
 8002426:	f04f 0310 	mov.w	r3, #16
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	60bb      	str	r3, [r7, #8]
}
 8002438:	bf00      	nop
 800243a:	e7fe      	b.n	800243a <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <prvTaskIsTaskSuspended+0x84>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11e      	bne.n	8002484 <prvTaskIsTaskSuspended+0x74>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <prvTaskIsTaskSuspended+0x88>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d019      	beq.n	8002484 <prvTaskIsTaskSuspended+0x74>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because it is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	2b00      	cmp	r3, #0
 8002456:	d115      	bne.n	8002484 <prvTaskIsTaskSuspended+0x74>
                        /* The task does not appear on the event list item of
                         * and of the RTOS objects, but could still be in the
                         * blocked state if it is waiting on its notification
                         * rather than waiting on an object.  If not, is
                         * suspended. */
                        xReturn = pdTRUE;
 8002458:	2301      	movs	r3, #1
 800245a:	617b      	str	r3, [r7, #20]

                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e00d      	b.n	800247e <prvTaskIsTaskSuspended+0x6e>
                        {
                            if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	335c      	adds	r3, #92	; 0x5c
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <prvTaskIsTaskSuspended+0x68>
                            {
                                xReturn = pdFALSE;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
                                break;
 8002476:	e005      	b.n	8002484 <prvTaskIsTaskSuspended+0x74>
                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	3301      	adds	r3, #1
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	ddee      	ble.n	8002462 <prvTaskIsTaskSuspended+0x52>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002484:	697b      	ldr	r3, [r7, #20]
    }
 8002486:	4618      	mov	r0, r3
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	200005e8 	.word	0x200005e8
 8002498:	200005b0 	.word	0x200005b0

0800249c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskResume( xTaskToResume );

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <vTaskResume+0x28>
    __asm volatile
 80024ae:	f04f 0310 	mov.w	r3, #16
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	60fb      	str	r3, [r7, #12]
}
 80024c0:	bf00      	nop
 80024c2:	e7fe      	b.n	80024c2 <vTaskResume+0x26>

        #if ( configNUMBER_OF_CORES == 1 )

            /* The parameter cannot be NULL as it is impossible to resume the
             * currently executing task. */
            if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80024c4:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <vTaskResume+0x104>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d063      	beq.n	8002596 <vTaskResume+0xfa>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d060      	beq.n	8002596 <vTaskResume+0xfa>
             * to check their run state here. Therefore, we get into a critical
             * section and check if the task is actually suspended or not. */
            if( pxTCB != NULL )
        #endif
        {
            taskENTER_CRITICAL();
 80024d4:	f003 f8d8 	bl	8005688 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80024d8:	6978      	ldr	r0, [r7, #20]
 80024da:	f7ff ff99 	bl	8002410 <prvTaskIsTaskSuspended>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d056      	beq.n	8002592 <vTaskResume+0xf6>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3308      	adds	r3, #8
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd fffc 	bl	80004e6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <vTaskResume+0x108>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d903      	bls.n	8002502 <vTaskResume+0x66>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <vTaskResume+0x108>)
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002506:	4928      	ldr	r1, [pc, #160]	; (80025a8 <vTaskResume+0x10c>)
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	3304      	adds	r3, #4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	615a      	str	r2, [r3, #20]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	3208      	adds	r2, #8
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f103 0208 	add.w	r2, r3, #8
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <vTaskResume+0x10c>)
 8002548:	441a      	add	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	61da      	str	r2, [r3, #28]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002552:	4915      	ldr	r1, [pc, #84]	; (80025a8 <vTaskResume+0x10c>)
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002564:	1c59      	adds	r1, r3, #1
 8002566:	4810      	ldr	r0, [pc, #64]	; (80025a8 <vTaskResume+0x10c>)
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4403      	add	r3, r0
 8002572:	6019      	str	r1, [r3, #0]

                    /* This yield may not cause the task just resumed to run,
                     * but will leave the lists in the correct state for the
                     * next yield. */
                    taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <vTaskResume+0x104>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	429a      	cmp	r2, r3
 8002580:	d207      	bcs.n	8002592 <vTaskResume+0xf6>
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <vTaskResume+0x110>)
 8002584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002592:	f003 f8a9 	bl	80056e8 <vPortExitCritical>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskResume();
    }
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000030 	.word	0x20000030
 80025a4:	20000610 	.word	0x20000610
 80025a8:	20000038 	.word	0x20000038
 80025ac:	e000ed04 	.word	0xe000ed04

080025b0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	623b      	str	r3, [r7, #32]
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskResumeFromISR( xTaskToResume );

        configASSERT( xTaskToResume );
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <xTaskResumeFromISR+0x2c>
    __asm volatile
 80025c6:	f04f 0310 	mov.w	r3, #16
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	617b      	str	r3, [r7, #20]
}
 80025d8:	bf00      	nop
 80025da:	e7fe      	b.n	80025da <xTaskResumeFromISR+0x2a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025dc:	f003 f931 	bl	8005842 <vPortValidateInterruptPriority>
    __asm volatile
 80025e0:	f3ef 8211 	mrs	r2, BASEPRI
 80025e4:	f04f 0310 	mov.w	r3, #16
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	613a      	str	r2, [r7, #16]
 80025f6:	60fb      	str	r3, [r7, #12]
    return ulOriginalBASEPRI;
 80025f8:	693b      	ldr	r3, [r7, #16]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 80025fa:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80025fc:	6a38      	ldr	r0, [r7, #32]
 80025fe:	f7ff ff07 	bl	8002410 <prvTaskIsTaskSuspended>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d05e      	beq.n	80026c6 <xTaskResumeFromISR+0x116>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002608:	4b34      	ldr	r3, [pc, #208]	; (80026dc <xTaskResumeFromISR+0x12c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d154      	bne.n	80026ba <xTaskResumeFromISR+0x10a>
                {
                    #if ( configNUMBER_OF_CORES == 1 )
                    {
                        /* Ready lists can be accessed so move the task from the
                         * suspended list to the ready list directly. */
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002614:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <xTaskResumeFromISR+0x130>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	429a      	cmp	r2, r3
 800261c:	d904      	bls.n	8002628 <xTaskResumeFromISR+0x78>
                        {
                            xYieldRequired = pdTRUE;
 800261e:	2301      	movs	r3, #1
 8002620:	627b      	str	r3, [r7, #36]	; 0x24

                            /* Mark that a yield is pending in case the user is not
                             * using the return value to initiate a context switch
                             * from the ISR using the port specific portYIELD_FROM_ISR(). */
                            xYieldPendings[ 0 ] = pdTRUE;
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <xTaskResumeFromISR+0x134>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	3308      	adds	r3, #8
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd ff5a 	bl	80004e6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002636:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <xTaskResumeFromISR+0x138>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d903      	bls.n	8002646 <xTaskResumeFromISR+0x96>
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	4a29      	ldr	r2, [pc, #164]	; (80026e8 <xTaskResumeFromISR+0x138>)
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264a:	4928      	ldr	r1, [pc, #160]	; (80026ec <xTaskResumeFromISR+0x13c>)
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	3304      	adds	r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	615a      	str	r2, [r3, #20]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	6a3a      	ldr	r2, [r7, #32]
 8002670:	3208      	adds	r2, #8
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	f103 0208 	add.w	r2, r3, #8
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4a18      	ldr	r2, [pc, #96]	; (80026ec <xTaskResumeFromISR+0x13c>)
 800268c:	441a      	add	r2, r3
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	61da      	str	r2, [r3, #28]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002696:	4915      	ldr	r1, [pc, #84]	; (80026ec <xTaskResumeFromISR+0x13c>)
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a3a      	ldr	r2, [r7, #32]
 80026a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026a8:	1c59      	adds	r1, r3, #1
 80026aa:	4810      	ldr	r0, [pc, #64]	; (80026ec <xTaskResumeFromISR+0x13c>)
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4403      	add	r3, r0
 80026b6:	6019      	str	r1, [r3, #0]
 80026b8:	e005      	b.n	80026c6 <xTaskResumeFromISR+0x116>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	3320      	adds	r3, #32
 80026be:	4619      	mov	r1, r3
 80026c0:	480b      	ldr	r0, [pc, #44]	; (80026f0 <xTaskResumeFromISR+0x140>)
 80026c2:	f7fd fea9 	bl	8000418 <vListInsertEnd>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	60bb      	str	r3, [r7, #8]
    __asm volatile
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f383 8811 	msr	BASEPRI, r3
}
 80026d0:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskResumeFromISR( xYieldRequired );

        return xYieldRequired;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80026d4:	4618      	mov	r0, r3
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2000063c 	.word	0x2000063c
 80026e0:	20000030 	.word	0x20000030
 80026e4:	20000620 	.word	0x20000620
 80026e8:	20000610 	.word	0x20000610
 80026ec:	20000038 	.word	0x20000038
 80026f0:	200005b0 	.word	0x200005b0

080026f4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
    TaskFunction_t pxIdleTaskFunction = NULL;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e011      	b.n	800273a <prvCreateIdleTasks+0x46>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002716:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <prvCreateIdleTasks+0xa0>)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	4413      	add	r3, r2
 800271c:	7819      	ldrb	r1, [r3, #0]
 800271e:	463a      	mov	r2, r7
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4413      	add	r3, r2
 8002724:	460a      	mov	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002728:	463a      	mov	r2, r7
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4413      	add	r3, r2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <prvCreateIdleTasks+0x4e>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b0e      	cmp	r3, #14
 800273e:	d9ea      	bls.n	8002716 <prvCreateIdleTasks+0x22>
 8002740:	e000      	b.n	8002744 <prvCreateIdleTasks+0x50>
        {
            break;
 8002742:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8002744:	463a      	mov	r2, r7
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4413      	add	r3, r2
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	e015      	b.n	8002780 <prvCreateIdleTasks+0x8c>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <prvCreateIdleTasks+0xa4>)
 8002756:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <prvCreateIdleTasks+0xa8>)
 800275e:	4413      	add	r3, r2
 8002760:	4639      	mov	r1, r7
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	2300      	movs	r3, #0
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2300      	movs	r3, #0
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	6938      	ldr	r0, [r7, #16]
 800276e:	f7ff f953 	bl	8001a18 <xTaskCreate>
 8002772:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d106      	bne.n	8002788 <prvCreateIdleTasks+0x94>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	3301      	adds	r3, #1
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	dde6      	ble.n	8002754 <prvCreateIdleTasks+0x60>
 8002786:	e000      	b.n	800278a <prvCreateIdleTasks+0x96>
        {
            break;
 8002788:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800278a:	69fb      	ldr	r3, [r7, #28]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	08006168 	.word	0x08006168
 8002798:	08003625 	.word	0x08003625
 800279c:	20000638 	.word	0x20000638

080027a0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80027a6:	f7ff ffa5 	bl	80026f4 <prvCreateIdleTasks>
 80027aa:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d102      	bne.n	80027b8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80027b2:	f002 f88b 	bl	80048cc <xTimerCreateTimerTask>
 80027b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d11d      	bne.n	80027fa <vTaskStartScheduler+0x5a>
    __asm volatile
 80027be:	f04f 0310 	mov.w	r3, #16
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	60bb      	str	r3, [r7, #8]
}
 80027d0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80027d2:	4914      	ldr	r1, [pc, #80]	; (8002824 <vTaskStartScheduler+0x84>)
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027dc:	e9c1 2300 	strd	r2, r3, [r1]
        xSchedulerRunning = pdTRUE;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <vTaskStartScheduler+0x88>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027e6:	4911      	ldr	r1, [pc, #68]	; (800282c <vTaskStartScheduler+0x8c>)
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9c1 2300 	strd	r2, r3, [r1]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80027f4:	f002 fe43 	bl	800547e <xPortStartScheduler>
 80027f8:	e00e      	b.n	8002818 <vTaskStartScheduler+0x78>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002800:	d10a      	bne.n	8002818 <vTaskStartScheduler+0x78>
    __asm volatile
 8002802:	f04f 0310 	mov.w	r3, #16
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	607b      	str	r3, [r7, #4]
}
 8002814:	bf00      	nop
 8002816:	e7fe      	b.n	8002816 <vTaskStartScheduler+0x76>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <vTaskStartScheduler+0x90>)
 800281a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000630 	.word	0x20000630
 8002828:	20000614 	.word	0x20000614
 800282c:	20000608 	.word	0x20000608
 8002830:	20000008 	.word	0x20000008

08002834 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
        BaseType_t xCoreID;

        #if ( configUSE_TIMERS == 1 )
        {
            /* Delete the timer task created by the kernel. */
            vTaskDelete( xTimerGetTimerDaemonTaskHandle() );
 800283a:	f002 f973 	bl	8004b24 <xTimerGetTimerDaemonTaskHandle>
 800283e:	4603      	mov	r3, r0
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fa39 	bl	8001cb8 <vTaskDelete>
        }
        #endif /* #if ( configUSE_TIMERS == 1 ) */

        /* Delete Idle tasks created by the kernel.*/
        for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	e009      	b.n	8002860 <vTaskEndScheduler+0x2c>
        {
            vTaskDelete( xIdleTaskHandles[ xCoreID ] );
 800284c:	4a10      	ldr	r2, [pc, #64]	; (8002890 <vTaskEndScheduler+0x5c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fa2f 	bl	8001cb8 <vTaskDelete>
        for( xCoreID = 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3301      	adds	r3, #1
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	ddf2      	ble.n	800284c <vTaskEndScheduler+0x18>

        /* Idle task is responsible for reclaiming the resources of the tasks in
         * xTasksWaitingTermination list. Since the idle task is now deleted and
         * no longer going to run, we need to reclaim resources of all the tasks
         * in the xTasksWaitingTermination list. */
        prvCheckTasksWaitingTermination();
 8002866:	f000 ff35 	bl	80036d4 <prvCheckTasksWaitingTermination>
    __asm volatile
 800286a:	f04f 0310 	mov.w	r3, #16
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	603b      	str	r3, [r7, #0]
}
 800287c:	bf00      	nop

    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    xSchedulerRunning = pdFALSE;
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <vTaskEndScheduler+0x60>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

    /* This function must be called from a task and the application is
     * responsible for deleting that task after the scheduler is stopped. */
    vPortEndScheduler();
 8002884:	f002 fee4 	bl	8005650 <vPortEndScheduler>

    traceRETURN_vTaskEndScheduler();
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000638 	.word	0x20000638
 8002894:	20000614 	.word	0x20000614

08002898 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <vTaskSuspendAll+0x18>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3301      	adds	r3, #1
 80028a2:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <vTaskSuspendAll+0x18>)
 80028a4:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	2000063c 	.word	0x2000063c

080028b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028b4:	b5b0      	push	{r4, r5, r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    BaseType_t xAlreadyYielded = pdFALSE;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80028c2:	f002 fee1 	bl	8005688 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80028ca:	4b7c      	ldr	r3, [pc, #496]	; (8002abc <xTaskResumeAll+0x208>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <xTaskResumeAll+0x34>
    __asm volatile
 80028d2:	f04f 0310 	mov.w	r3, #16
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	607b      	str	r3, [r7, #4]
}
 80028e4:	bf00      	nop
 80028e6:	e7fe      	b.n	80028e6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80028e8:	4b74      	ldr	r3, [pc, #464]	; (8002abc <xTaskResumeAll+0x208>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	4a73      	ldr	r2, [pc, #460]	; (8002abc <xTaskResumeAll+0x208>)
 80028f0:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80028f2:	4b72      	ldr	r3, [pc, #456]	; (8002abc <xTaskResumeAll+0x208>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 80d8 	bne.w	8002aac <xTaskResumeAll+0x1f8>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028fc:	4b70      	ldr	r3, [pc, #448]	; (8002ac0 <xTaskResumeAll+0x20c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80d3 	beq.w	8002aac <xTaskResumeAll+0x1f8>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002906:	e090      	b.n	8002a2a <xTaskResumeAll+0x176>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002908:	4b6e      	ldr	r3, [pc, #440]	; (8002ac4 <xTaskResumeAll+0x210>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002926:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	3320      	adds	r3, #32
 8002932:	429a      	cmp	r2, r3
 8002934:	d103      	bne.n	800293e <xTaskResumeAll+0x8a>
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	2200      	movs	r2, #0
 8002942:	635a      	str	r2, [r3, #52]	; 0x34
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1e5a      	subs	r2, r3, #1
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	6952      	ldr	r2, [r2, #20]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	6912      	ldr	r2, [r2, #16]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	3308      	adds	r3, #8
 8002970:	429a      	cmp	r2, r3
 8002972:	d103      	bne.n	800297c <xTaskResumeAll+0xc8>
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002990:	4b4d      	ldr	r3, [pc, #308]	; (8002ac8 <xTaskResumeAll+0x214>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d903      	bls.n	80029a0 <xTaskResumeAll+0xec>
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	4a4a      	ldr	r2, [pc, #296]	; (8002ac8 <xTaskResumeAll+0x214>)
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a4:	4949      	ldr	r1, [pc, #292]	; (8002acc <xTaskResumeAll+0x218>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3304      	adds	r3, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	611a      	str	r2, [r3, #16]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	615a      	str	r2, [r3, #20]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ca:	3208      	adds	r2, #8
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	f103 0208 	add.w	r2, r3, #8
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4a39      	ldr	r2, [pc, #228]	; (8002acc <xTaskResumeAll+0x218>)
 80029e6:	441a      	add	r2, r3
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	61da      	str	r2, [r3, #28]
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f0:	4936      	ldr	r1, [pc, #216]	; (8002acc <xTaskResumeAll+0x218>)
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	440b      	add	r3, r1
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a02:	1c59      	adds	r1, r3, #1
 8002a04:	4831      	ldr	r0, [pc, #196]	; (8002acc <xTaskResumeAll+0x218>)
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4403      	add	r3, r0
 8002a10:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a16:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <xTaskResumeAll+0x21c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d904      	bls.n	8002a2a <xTaskResumeAll+0x176>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002a20:	4a2c      	ldr	r2, [pc, #176]	; (8002ad4 <xTaskResumeAll+0x220>)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2101      	movs	r1, #1
 8002a26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <xTaskResumeAll+0x210>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f47f af6a 	bne.w	8002908 <xTaskResumeAll+0x54>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <xTaskResumeAll+0x18a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002a3a:	f000 fe89 	bl	8003750 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <xTaskResumeAll+0x224>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	e9c7 2306 	strd	r2, r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	d01b      	beq.n	8002a88 <xTaskResumeAll+0x1d4>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002a50:	f000 f8e6 	bl	8002c20 <xTaskIncrementTick>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d004      	beq.n	8002a64 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <xTaskResumeAll+0x220>)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2101      	movs	r1, #1
 8002a60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a68:	1e54      	subs	r4, r2, #1
 8002a6a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8002a6e:	e9c7 4506 	strd	r4, r5, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	d1ea      	bne.n	8002a50 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002a7a:	4917      	ldr	r1, [pc, #92]	; (8002ad8 <xTaskResumeAll+0x224>)
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9c1 2300 	strd	r2, r3, [r1]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002a88:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <xTaskResumeAll+0x220>)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00b      	beq.n	8002aac <xTaskResumeAll+0x1f8>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	623b      	str	r3, [r7, #32]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <xTaskResumeAll+0x21c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <xTaskResumeAll+0x228>)
 8002a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002aac:	f002 fe1c 	bl	80056e8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3728      	adds	r7, #40	; 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000063c 	.word	0x2000063c
 8002ac0:	20000600 	.word	0x20000600
 8002ac4:	200005b0 	.word	0x200005b0
 8002ac8:	20000610 	.word	0x20000610
 8002acc:	20000038 	.word	0x20000038
 8002ad0:	20000030 	.word	0x20000030
 8002ad4:	20000620 	.word	0x20000620
 8002ad8:	20000618 	.word	0x20000618
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
 8002ae6:	f002 fdcf 	bl	8005688 <vPortEnterCritical>
    {
        xTicks = xTickCount;
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <xTaskGetTickCount+0x28>)
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	e9c7 2300 	strd	r2, r3, [r7]
    }
    portTICK_TYPE_EXIT_CRITICAL();
 8002af4:	f002 fdf8 	bl	80056e8 <vPortExitCritical>

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8002af8:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000608 	.word	0x20000608

08002b0c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b12:	f002 fe96 	bl	8005842 <vPortValidateInterruptPriority>
    __asm volatile
 8002b16:	f3ef 8211 	mrs	r2, BASEPRI
 8002b1a:	f04f 0310 	mov.w	r3, #16
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	60ba      	str	r2, [r7, #8]
 8002b2c:	607b      	str	r3, [r7, #4]
    return ulOriginalBASEPRI;
 8002b2e:	68bb      	ldr	r3, [r7, #8]

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b30:	61fb      	str	r3, [r7, #28]
    {
        xReturn = xTickCount;
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <xTaskGetTickCountFromISR+0x4c>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	60fb      	str	r3, [r7, #12]
    __asm volatile
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f383 8811 	msr	BASEPRI, r3
}
 8002b46:	bf00      	nop
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
 8002b48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000608 	.word	0x20000608

08002b5c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <uxTaskGetNumberOfTasks+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000600 	.word	0x20000600

08002b74 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <pcTaskGetName+0x14>
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <pcTaskGetName+0x44>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	e000      	b.n	8002b8a <pcTaskGetName+0x16>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB != NULL );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <pcTaskGetName+0x34>
    __asm volatile
 8002b92:	f04f 0310 	mov.w	r3, #16
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	60bb      	str	r3, [r7, #8]
}
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <pcTaskGetName+0x32>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3340      	adds	r3, #64	; 0x40
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	20000030 	.word	0x20000030

08002bbc <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
 8002bbc:	b5b0      	push	{r4, r5, r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	e9c7 0100 	strd	r0, r1, [r7]

    traceENTER_xTaskCatchUpTicks( xTicksToCatchUp );

    /* Must not be called with the scheduler suspended as the implementation
     * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
    configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <xTaskCatchUpTicks+0x5c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <xTaskCatchUpTicks+0x28>
    __asm volatile
 8002bce:	f04f 0310 	mov.w	r3, #16
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	60bb      	str	r3, [r7, #8]
}
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <xTaskCatchUpTicks+0x26>

    /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
    vTaskSuspendAll();
 8002be4:	f7ff fe58 	bl	8002898 <vTaskSuspendAll>

    /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
    taskENTER_CRITICAL();
 8002be8:	f002 fd4e 	bl	8005688 <vPortEnterCritical>
    {
        xPendedTicks += xTicksToCatchUp;
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <xTaskCatchUpTicks+0x60>)
 8002bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bf6:	1884      	adds	r4, r0, r2
 8002bf8:	eb41 0503 	adc.w	r5, r1, r3
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <xTaskCatchUpTicks+0x60>)
 8002bfe:	e9c3 4500 	strd	r4, r5, [r3]
    }
    taskEXIT_CRITICAL();
 8002c02:	f002 fd71 	bl	80056e8 <vPortExitCritical>
    xYieldOccurred = xTaskResumeAll();
 8002c06:	f7ff fe55 	bl	80028b4 <xTaskResumeAll>
 8002c0a:	60f8      	str	r0, [r7, #12]

    traceRETURN_xTaskCatchUpTicks( xYieldOccurred );

    return xYieldOccurred;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bdb0      	pop	{r4, r5, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000063c 	.word	0x2000063c
 8002c1c:	20000618 	.word	0x20000618

08002c20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002c2a:	4b8c      	ldr	r3, [pc, #560]	; (8002e5c <xTaskIncrementTick+0x23c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8106 	bne.w	8002e40 <xTaskIncrementTick+0x220>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c34:	4b8a      	ldr	r3, [pc, #552]	; (8002e60 <xTaskIncrementTick+0x240>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	1c54      	adds	r4, r2, #1
 8002c3c:	f143 0500 	adc.w	r5, r3, #0
 8002c40:	e9c7 4508 	strd	r4, r5, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c44:	4986      	ldr	r1, [pc, #536]	; (8002e60 <xTaskIncrementTick+0x240>)
 8002c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c4a:	e9c1 2300 	strd	r2, r3, [r1]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	d120      	bne.n	8002c98 <xTaskIncrementTick+0x78>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c56:	4b83      	ldr	r3, [pc, #524]	; (8002e64 <xTaskIncrementTick+0x244>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <xTaskIncrementTick+0x56>
    __asm volatile
 8002c60:	f04f 0310 	mov.w	r3, #16
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	603b      	str	r3, [r7, #0]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xTaskIncrementTick+0x54>
 8002c76:	4b7b      	ldr	r3, [pc, #492]	; (8002e64 <xTaskIncrementTick+0x244>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	4b7a      	ldr	r3, [pc, #488]	; (8002e68 <xTaskIncrementTick+0x248>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a78      	ldr	r2, [pc, #480]	; (8002e64 <xTaskIncrementTick+0x244>)
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4a78      	ldr	r2, [pc, #480]	; (8002e68 <xTaskIncrementTick+0x248>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b78      	ldr	r3, [pc, #480]	; (8002e6c <xTaskIncrementTick+0x24c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	4a76      	ldr	r2, [pc, #472]	; (8002e6c <xTaskIncrementTick+0x24c>)
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	f000 fd5c 	bl	8003750 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c98:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <xTaskIncrementTick+0x250>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ca2:	4290      	cmp	r0, r2
 8002ca4:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ca8:	f0c0 80b5 	bcc.w	8002e16 <xTaskIncrementTick+0x1f6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cac:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <xTaskIncrementTick+0x244>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <xTaskIncrementTick+0xa6>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002cb6:	496e      	ldr	r1, [pc, #440]	; (8002e70 <xTaskIncrementTick+0x250>)
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc0:	e9c1 2300 	strd	r2, r3, [r1]
                    break;
 8002cc4:	e0a7      	b.n	8002e16 <xTaskIncrementTick+0x1f6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <xTaskIncrementTick+0x244>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cd6:	e9c7 2304 	strd	r2, r3, [r7, #16]

                    if( xConstTickCount < xItemValue )
 8002cda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ce2:	4290      	cmp	r0, r2
 8002ce4:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ce8:	d205      	bcs.n	8002cf6 <xTaskIncrementTick+0xd6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002cea:	4961      	ldr	r1, [pc, #388]	; (8002e70 <xTaskIncrementTick+0x250>)
 8002cec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cf0:	e9c1 2300 	strd	r2, r3, [r1]
                        break;
 8002cf4:	e08f      	b.n	8002e16 <xTaskIncrementTick+0x1f6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	6952      	ldr	r2, [r2, #20]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	6912      	ldr	r2, [r2, #16]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	3308      	adds	r3, #8
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d103      	bne.n	8002d24 <xTaskIncrementTick+0x104>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2200      	movs	r2, #0
 8002d28:	61da      	str	r2, [r3, #28]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	1e5a      	subs	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01e      	beq.n	8002d7a <xTaskIncrementTick+0x15a>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d4a:	60da      	str	r2, [r3, #12]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3320      	adds	r3, #32
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d103      	bne.n	8002d6a <xTaskIncrementTick+0x14a>
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <xTaskIncrementTick+0x254>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d903      	bls.n	8002d8e <xTaskIncrementTick+0x16e>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	4a3a      	ldr	r2, [pc, #232]	; (8002e74 <xTaskIncrementTick+0x254>)
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d92:	4939      	ldr	r1, [pc, #228]	; (8002e78 <xTaskIncrementTick+0x258>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3304      	adds	r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	615a      	str	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	3208      	adds	r2, #8
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f103 0208 	add.w	r2, r3, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <xTaskIncrementTick+0x258>)
 8002dd4:	441a      	add	r2, r3
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	61da      	str	r2, [r3, #28]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dde:	4926      	ldr	r1, [pc, #152]	; (8002e78 <xTaskIncrementTick+0x258>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002df0:	1c59      	adds	r1, r3, #1
 8002df2:	4821      	ldr	r0, [pc, #132]	; (8002e78 <xTaskIncrementTick+0x258>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4403      	add	r3, r0
 8002dfe:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <xTaskIncrementTick+0x25c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	f67f af4e 	bls.w	8002cac <xTaskIncrementTick+0x8c>
                            {
                                xSwitchRequired = pdTRUE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e14:	e74a      	b.n	8002cac <xTaskIncrementTick+0x8c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <xTaskIncrementTick+0x25c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1c:	4916      	ldr	r1, [pc, #88]	; (8002e78 <xTaskIncrementTick+0x258>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d901      	bls.n	8002e32 <xTaskIncrementTick+0x212>
                {
                    xSwitchRequired = pdTRUE;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <xTaskIncrementTick+0x260>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <xTaskIncrementTick+0x232>
                {
                    xSwitchRequired = pdTRUE;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e3e:	e008      	b.n	8002e52 <xTaskIncrementTick+0x232>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <xTaskIncrementTick+0x264>)
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	1c50      	adds	r0, r2, #1
 8002e48:	f143 0100 	adc.w	r1, r3, #0
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <xTaskIncrementTick+0x264>)
 8002e4e:	e9c3 0100 	strd	r0, r1, [r3]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3730      	adds	r7, #48	; 0x30
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e5c:	2000063c 	.word	0x2000063c
 8002e60:	20000608 	.word	0x20000608
 8002e64:	200005a8 	.word	0x200005a8
 8002e68:	200005ac 	.word	0x200005ac
 8002e6c:	20000624 	.word	0x20000624
 8002e70:	20000630 	.word	0x20000630
 8002e74:	20000610 	.word	0x20000610
 8002e78:	20000038 	.word	0x20000038
 8002e7c:	20000030 	.word	0x20000030
 8002e80:	20000620 	.word	0x20000620
 8002e84:	20000618 	.word	0x20000618

08002e88 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002e8e:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <vTaskSwitchContext+0x108>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002e96:	4b3f      	ldr	r3, [pc, #252]	; (8002f94 <vTaskSwitchContext+0x10c>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002e9c:	e074      	b.n	8002f88 <vTaskSwitchContext+0x100>
            xYieldPendings[ 0 ] = pdFALSE;
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <vTaskSwitchContext+0x10c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 8002ea4:	4b3c      	ldr	r3, [pc, #240]	; (8002f98 <vTaskSwitchContext+0x110>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <vTaskSwitchContext+0x110>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <vTaskSwitchContext+0x110>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d916      	bls.n	8002ef4 <vTaskSwitchContext+0x6c>
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d111      	bne.n	8002ef4 <vTaskSwitchContext+0x6c>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d10b      	bne.n	8002ef4 <vTaskSwitchContext+0x6c>
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d105      	bne.n	8002ef4 <vTaskSwitchContext+0x6c>
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	330c      	adds	r3, #12
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d009      	beq.n	8002f08 <vTaskSwitchContext+0x80>
 8002ef4:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <vTaskSwitchContext+0x110>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3340      	adds	r3, #64	; 0x40
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <vTaskSwitchContext+0x110>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68f9      	ldr	r1, [r7, #12]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 f8aa 	bl	800605c <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f08:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <vTaskSwitchContext+0x114>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e010      	b.n	8002f32 <vTaskSwitchContext+0xaa>
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <vTaskSwitchContext+0xa4>
    __asm volatile
 8002f16:	f04f 0310 	mov.w	r3, #16
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	607b      	str	r3, [r7, #4]
}
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <vTaskSwitchContext+0xa2>
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	491b      	ldr	r1, [pc, #108]	; (8002fa0 <vTaskSwitchContext+0x118>)
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0e4      	beq.n	8002f10 <vTaskSwitchContext+0x88>
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <vTaskSwitchContext+0x118>)
 8002f52:	4413      	add	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3308      	adds	r3, #8
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d103      	bne.n	8002f74 <vTaskSwitchContext+0xec>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <vTaskSwitchContext+0x110>)
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <vTaskSwitchContext+0x114>)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <vTaskSwitchContext+0x110>)
 8002f86:	681b      	ldr	r3, [r3, #0]
    }
 8002f88:	bf00      	nop
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	2000063c 	.word	0x2000063c
 8002f94:	20000620 	.word	0x20000620
 8002f98:	20000030 	.word	0x20000030
 8002f9c:	20000610 	.word	0x20000610
 8002fa0:	20000038 	.word	0x20000038

08002fa4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	e9c7 2300 	strd	r2, r3, [r7]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8002fb6:	f04f 0310 	mov.w	r3, #16
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	617b      	str	r3, [r7, #20]
}
 8002fc8:	bf00      	nop
 8002fca:	e7fe      	b.n	8002fca <vTaskPlaceOnEventList+0x26>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <vTaskPlaceOnEventList+0x48>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3320      	adds	r3, #32
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7fd fa43 	bl	8000460 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fda:	2201      	movs	r2, #1
 8002fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fe0:	f001 fb8e 	bl	8004700 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000030 	.word	0x20000030

08002ff0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8002ff0:	b5b0      	push	{r4, r5, r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	e9c7 2300 	strd	r2, r3, [r7]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <vTaskPlaceOnUnorderedEventList+0x28>
    __asm volatile
 8003002:	f04f 0310 	mov.w	r3, #16
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	61bb      	str	r3, [r7, #24]
}
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <vTaskPlaceOnUnorderedEventList+0xac>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <vTaskPlaceOnUnorderedEventList+0x46>
    __asm volatile
 8003020:	f04f 0310 	mov.w	r3, #16
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	617b      	str	r3, [r7, #20]
}
 8003032:	bf00      	nop
 8003034:	e7fe      	b.n	8003034 <vTaskPlaceOnUnorderedEventList+0x44>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <vTaskPlaceOnUnorderedEventList+0xb0>)
 8003038:	6819      	ldr	r1, [r3, #0]
 800303a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800303e:	4614      	mov	r4, r2
 8003040:	f043 4500 	orr.w	r5, r3, #2147483648	; 0x80000000
 8003044:	e9c1 4508 	strd	r4, r5, [r1, #32]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <vTaskPlaceOnUnorderedEventList+0xb0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <vTaskPlaceOnUnorderedEventList+0xb0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <vTaskPlaceOnUnorderedEventList+0xb0>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	3220      	adds	r2, #32
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <vTaskPlaceOnUnorderedEventList+0xb0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f103 0220 	add.w	r2, r3, #32
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	60da      	str	r2, [r3, #12]
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <vTaskPlaceOnUnorderedEventList+0xb0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	635a      	str	r2, [r3, #52]	; 0x34
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800308a:	2201      	movs	r2, #1
 800308c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003090:	f001 fb36 	bl	8004700 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8003094:	bf00      	nop
 8003096:	3720      	adds	r7, #32
 8003098:	46bd      	mov	sp, r7
 800309a:	bdb0      	pop	{r4, r5, r7, pc}
 800309c:	2000063c 	.word	0x2000063c
 80030a0:	20000030 	.word	0x20000030

080030a4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	e9c7 2300 	strd	r2, r3, [r7]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <vTaskPlaceOnEventListRestricted+0x28>
    __asm volatile
 80030b6:	f04f 0310 	mov.w	r3, #16
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	613b      	str	r3, [r7, #16]
}
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <vTaskPlaceOnEventListRestricted+0x90>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	629a      	str	r2, [r3, #40]	; 0x28
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <vTaskPlaceOnEventListRestricted+0x90>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	68d2      	ldr	r2, [r2, #12]
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <vTaskPlaceOnEventListRestricted+0x90>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	3220      	adds	r2, #32
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <vTaskPlaceOnEventListRestricted+0x90>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f103 0220 	add.w	r2, r3, #32
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <vTaskPlaceOnEventListRestricted+0x90>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8003114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800311c:	e9c7 2300 	strd	r2, r3, [r7]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003120:	6a3a      	ldr	r2, [r7, #32]
 8003122:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003126:	f001 faeb 	bl	8004700 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800312a:	bf00      	nop
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000030 	.word	0x20000030

08003138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003138:	b480      	push	{r7}
 800313a:	b08b      	sub	sp, #44	; 0x2c
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <xTaskRemoveFromEventList+0x2c>
    __asm volatile
 800314e:	f04f 0310 	mov.w	r3, #16
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	60fb      	str	r3, [r7, #12]
}
 8003160:	bf00      	nop
 8003162:	e7fe      	b.n	8003162 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	6a3a      	ldr	r2, [r7, #32]
 8003170:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003172:	60da      	str	r2, [r3, #12]
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	6a3a      	ldr	r2, [r7, #32]
 800317a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	3320      	adds	r3, #32
 8003186:	429a      	cmp	r2, r3
 8003188:	d103      	bne.n	8003192 <xTaskRemoveFromEventList+0x5a>
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	2200      	movs	r2, #0
 8003196:	635a      	str	r2, [r3, #52]	; 0x34
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80031a2:	4b4c      	ldr	r3, [pc, #304]	; (80032d4 <xTaskRemoveFromEventList+0x19c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d162      	bne.n	8003270 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	6a3a      	ldr	r2, [r7, #32]
 80031b6:	6952      	ldr	r2, [r2, #20]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	6a3a      	ldr	r2, [r7, #32]
 80031c0:	6912      	ldr	r2, [r2, #16]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	3308      	adds	r3, #8
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d103      	bne.n	80031d8 <xTaskRemoveFromEventList+0xa0>
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	2200      	movs	r2, #0
 80031dc:	61da      	str	r2, [r3, #28]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	1e5a      	subs	r2, r3, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ec:	4b3a      	ldr	r3, [pc, #232]	; (80032d8 <xTaskRemoveFromEventList+0x1a0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d903      	bls.n	80031fc <xTaskRemoveFromEventList+0xc4>
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	4a37      	ldr	r2, [pc, #220]	; (80032d8 <xTaskRemoveFromEventList+0x1a0>)
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003200:	4936      	ldr	r1, [pc, #216]	; (80032dc <xTaskRemoveFromEventList+0x1a4>)
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	3304      	adds	r3, #4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	611a      	str	r2, [r3, #16]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	615a      	str	r2, [r3, #20]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	6a3a      	ldr	r2, [r7, #32]
 8003226:	3208      	adds	r2, #8
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f103 0208 	add.w	r2, r3, #8
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4a26      	ldr	r2, [pc, #152]	; (80032dc <xTaskRemoveFromEventList+0x1a4>)
 8003242:	441a      	add	r2, r3
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	61da      	str	r2, [r3, #28]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324c:	4923      	ldr	r1, [pc, #140]	; (80032dc <xTaskRemoveFromEventList+0x1a4>)
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	481e      	ldr	r0, [pc, #120]	; (80032dc <xTaskRemoveFromEventList+0x1a4>)
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4403      	add	r3, r0
 800326c:	6019      	str	r1, [r3, #0]
 800326e:	e01b      	b.n	80032a8 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <xTaskRemoveFromEventList+0x1a8>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	6a3a      	ldr	r2, [r7, #32]
 800328a:	3220      	adds	r2, #32
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f103 0220 	add.w	r2, r3, #32
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <xTaskRemoveFromEventList+0x1a8>)
 800329c:	635a      	str	r2, [r3, #52]	; 0x34
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <xTaskRemoveFromEventList+0x1a8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <xTaskRemoveFromEventList+0x1a8>)
 80032a6:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <xTaskRemoveFromEventList+0x1ac>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d905      	bls.n	80032c2 <xTaskRemoveFromEventList+0x18a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80032b6:	2301      	movs	r3, #1
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <xTaskRemoveFromEventList+0x1b0>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e001      	b.n	80032c6 <xTaskRemoveFromEventList+0x18e>
        }
        else
        {
            xReturn = pdFALSE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	372c      	adds	r7, #44	; 0x2c
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	2000063c 	.word	0x2000063c
 80032d8:	20000610 	.word	0x20000610
 80032dc:	20000038 	.word	0x20000038
 80032e0:	200005b0 	.word	0x200005b0
 80032e4:	20000030 	.word	0x20000030
 80032e8:	20000620 	.word	0x20000620

080032ec <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80032ec:	b4b0      	push	{r4, r5, r7}
 80032ee:	b08b      	sub	sp, #44	; 0x2c
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	e9c7 2300 	strd	r2, r3, [r7]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80032f8:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <vTaskRemoveFromUnorderedEventList+0x17c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <vTaskRemoveFromUnorderedEventList+0x2a>
    __asm volatile
 8003300:	f04f 0310 	mov.w	r3, #16
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	617b      	str	r3, [r7, #20]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <vTaskRemoveFromUnorderedEventList+0x28>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800331a:	4614      	mov	r4, r2
 800331c:	f043 4500 	orr.w	r5, r3, #2147483648	; 0x80000000
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	e9c3 4500 	strd	r4, r5, [r3]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
    configASSERT( pxUnblockedTCB );
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <vTaskRemoveFromUnorderedEventList+0x5c>
    __asm volatile
 8003332:	f04f 0310 	mov.w	r3, #16
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	613b      	str	r3, [r7, #16]
}
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <vTaskRemoveFromUnorderedEventList+0x5a>
    listREMOVE_ITEM( pxEventListItem );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	68d2      	ldr	r2, [r2, #12]
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6892      	ldr	r2, [r2, #8]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	429a      	cmp	r2, r3
 800336a:	d103      	bne.n	8003374 <vTaskRemoveFromUnorderedEventList+0x88>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	615a      	str	r2, [r3, #20]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	1e5a      	subs	r2, r3, #1
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	6952      	ldr	r2, [r2, #20]
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339a:	6912      	ldr	r2, [r2, #16]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	3308      	adds	r3, #8
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d103      	bne.n	80033b2 <vTaskRemoveFromUnorderedEventList+0xc6>
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	2200      	movs	r2, #0
 80033b6:	61da      	str	r2, [r3, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	1e5a      	subs	r2, r3, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c6:	4b29      	ldr	r3, [pc, #164]	; (800346c <vTaskRemoveFromUnorderedEventList+0x180>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d903      	bls.n	80033d6 <vTaskRemoveFromUnorderedEventList+0xea>
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	4a26      	ldr	r2, [pc, #152]	; (800346c <vTaskRemoveFromUnorderedEventList+0x180>)
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033da:	4925      	ldr	r1, [pc, #148]	; (8003470 <vTaskRemoveFromUnorderedEventList+0x184>)
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	3304      	adds	r3, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	615a      	str	r2, [r3, #20]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	3208      	adds	r2, #8
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	f103 0208 	add.w	r2, r3, #8
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <vTaskRemoveFromUnorderedEventList+0x184>)
 800341c:	441a      	add	r2, r3
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	61da      	str	r2, [r3, #28]
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003426:	4912      	ldr	r1, [pc, #72]	; (8003470 <vTaskRemoveFromUnorderedEventList+0x184>)
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003438:	1c59      	adds	r1, r3, #1
 800343a:	480d      	ldr	r0, [pc, #52]	; (8003470 <vTaskRemoveFromUnorderedEventList+0x184>)
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4403      	add	r3, r0
 8003446:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <vTaskRemoveFromUnorderedEventList+0x188>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	429a      	cmp	r2, r3
 8003454:	d902      	bls.n	800345c <vTaskRemoveFromUnorderedEventList+0x170>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <vTaskRemoveFromUnorderedEventList+0x18c>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 800345c:	bf00      	nop
 800345e:	372c      	adds	r7, #44	; 0x2c
 8003460:	46bd      	mov	sp, r7
 8003462:	bcb0      	pop	{r4, r5, r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	2000063c 	.word	0x2000063c
 800346c:	20000610 	.word	0x20000610
 8003470:	20000038 	.word	0x20000038
 8003474:	20000030 	.word	0x20000030
 8003478:	20000620 	.word	0x20000620

0800347c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <vTaskSetTimeOutState+0x24>
    __asm volatile
 800348a:	f04f 0310 	mov.w	r3, #16
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	60fb      	str	r3, [r7, #12]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <vTaskSetTimeOutState+0x22>
    taskENTER_CRITICAL();
 80034a0:	f002 f8f2 	bl	8005688 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <vTaskSetTimeOutState+0x48>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <vTaskSetTimeOutState+0x4c>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }
    taskEXIT_CRITICAL();
 80034b8:	f002 f916 	bl	80056e8 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000624 	.word	0x20000624
 80034c8:	20000608 	.word	0x20000608

080034cc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <vTaskInternalSetTimeOutState+0x28>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <vTaskInternalSetTimeOutState+0x2c>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	e9c1 2302 	strd	r2, r3, [r1, #8]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	20000624 	.word	0x20000624
 80034f8:	20000608 	.word	0x20000608

080034fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80034fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003500:	b08a      	sub	sp, #40	; 0x28
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800350e:	f04f 0310 	mov.w	r3, #16
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60fb      	str	r3, [r7, #12]
}
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <xTaskCheckForTimeOut+0x26>
    configASSERT( pxTicksToWait );
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <xTaskCheckForTimeOut+0x44>
    __asm volatile
 800352a:	f04f 0310 	mov.w	r3, #16
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	60bb      	str	r3, [r7, #8]
}
 800353c:	bf00      	nop
 800353e:	e7fe      	b.n	800353e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003540:	f002 f8a2 	bl	8005688 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <xTaskCheckForTimeOut+0x108>)
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003554:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003558:	ebb0 0802 	subs.w	r8, r0, r2
 800355c:	eb61 0903 	sbc.w	r9, r1, r3
 8003560:	e9c7 8904 	strd	r8, r9, [r7, #16]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356e:	bf08      	it	eq
 8003570:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8003574:	d102      	bne.n	800357c <xTaskCheckForTimeOut+0x80>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e03b      	b.n	80035f4 <xTaskCheckForTimeOut+0xf8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b21      	ldr	r3, [pc, #132]	; (8003608 <xTaskCheckForTimeOut+0x10c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d012      	beq.n	80035ae <xTaskCheckForTimeOut+0xb2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800358e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003592:	4290      	cmp	r0, r2
 8003594:	eb71 0303 	sbcs.w	r3, r1, r3
 8003598:	d309      	bcc.n	80035ae <xTaskCheckForTimeOut+0xb2>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800359a:	2301      	movs	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
            *pxTicksToWait = ( TickType_t ) 0;
 800359e:	6839      	ldr	r1, [r7, #0]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9c1 2300 	strd	r2, r3, [r1]
 80035ac:	e022      	b.n	80035f4 <xTaskCheckForTimeOut+0xf8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035b8:	4290      	cmp	r0, r2
 80035ba:	eb71 0303 	sbcs.w	r3, r1, r3
 80035be:	d210      	bcs.n	80035e2 <xTaskCheckForTimeOut+0xe6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035ca:	1a84      	subs	r4, r0, r2
 80035cc:	eb61 0503 	sbc.w	r5, r1, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	e9c3 4500 	strd	r4, r5, [r3]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff78 	bl	80034cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035dc:	2300      	movs	r3, #0
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
 80035e0:	e008      	b.n	80035f4 <xTaskCheckForTimeOut+0xf8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035e2:	6839      	ldr	r1, [r7, #0]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9c1 2300 	strd	r2, r3, [r1]
            xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    taskEXIT_CRITICAL();
 80035f4:	f002 f878 	bl	80056e8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3728      	adds	r7, #40	; 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003604:	20000608 	.word	0x20000608
 8003608:	20000624 	.word	0x20000624

0800360c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <vTaskMissedYield+0x14>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	20000620 	.word	0x20000620

08003624 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800362c:	f000 f852 	bl	80036d4 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <prvIdleTask+0x28>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d9f9      	bls.n	800362c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <prvIdleTask+0x2c>)
 800363a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003648:	e7f0      	b.n	800362c <prvIdleTask+0x8>
 800364a:	bf00      	nop
 800364c:	20000038 	.word	0x20000038
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	e00c      	b.n	800367a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <prvInitialiseTaskLists+0x60>)
 800366c:	4413      	add	r3, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc fea2 	bl	80003b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3301      	adds	r3, #1
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b37      	cmp	r3, #55	; 0x37
 800367e:	d9ef      	bls.n	8003660 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <prvInitialiseTaskLists+0x64>)
 8003682:	f7fc fe99 	bl	80003b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003686:	480d      	ldr	r0, [pc, #52]	; (80036bc <prvInitialiseTaskLists+0x68>)
 8003688:	f7fc fe96 	bl	80003b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800368c:	480c      	ldr	r0, [pc, #48]	; (80036c0 <prvInitialiseTaskLists+0x6c>)
 800368e:	f7fc fe93 	bl	80003b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003692:	480c      	ldr	r0, [pc, #48]	; (80036c4 <prvInitialiseTaskLists+0x70>)
 8003694:	f7fc fe90 	bl	80003b8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <prvInitialiseTaskLists+0x74>)
 800369a:	f7fc fe8d 	bl	80003b8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <prvInitialiseTaskLists+0x78>)
 80036a0:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <prvInitialiseTaskLists+0x64>)
 80036a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <prvInitialiseTaskLists+0x7c>)
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <prvInitialiseTaskLists+0x68>)
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000038 	.word	0x20000038
 80036b8:	20000578 	.word	0x20000578
 80036bc:	20000590 	.word	0x20000590
 80036c0:	200005b0 	.word	0x200005b0
 80036c4:	200005c8 	.word	0x200005c8
 80036c8:	200005e8 	.word	0x200005e8
 80036cc:	200005a8 	.word	0x200005a8
 80036d0:	200005ac 	.word	0x200005ac

080036d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036da:	e019      	b.n	8003710 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80036dc:	f001 ffd4 	bl	8005688 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <prvCheckTasksWaitingTermination+0x50>)
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3308      	adds	r3, #8
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fc fefa 	bl	80004e6 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <prvCheckTasksWaitingTermination+0x54>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <prvCheckTasksWaitingTermination+0x54>)
 80036fa:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <prvCheckTasksWaitingTermination+0x58>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3b01      	subs	r3, #1
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <prvCheckTasksWaitingTermination+0x58>)
 8003704:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003706:	f001 ffef 	bl	80056e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f810 	bl	8003730 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <prvCheckTasksWaitingTermination+0x58>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e1      	bne.n	80036dc <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200005c8 	.word	0x200005c8
 8003728:	20000600 	.word	0x20000600
 800372c:	200005e0 	.word	0x200005e0

08003730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	4618      	mov	r0, r3
 800373e:	f002 f9b1 	bl	8005aa4 <vPortFree>
            vPortFree( pxTCB );
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f002 f9ae 	bl	8005aa4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <prvResetNextTaskUnblockTime+0x38>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d107      	bne.n	800376e <prvResetNextTaskUnblockTime+0x1e>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800375e:	490b      	ldr	r1, [pc, #44]	; (800378c <prvResetNextTaskUnblockTime+0x3c>)
 8003760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003768:	e9c1 2300 	strd	r2, r3, [r1]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800376c:	e007      	b.n	800377e <prvResetNextTaskUnblockTime+0x2e>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <prvResetNextTaskUnblockTime+0x38>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	4904      	ldr	r1, [pc, #16]	; (800378c <prvResetNextTaskUnblockTime+0x3c>)
 800377a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800377e:	bf00      	nop
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	200005a8 	.word	0x200005a8
 800378c:	20000630 	.word	0x20000630

08003790 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_RECURSIVE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <xTaskGetCurrentTaskHandle+0x1c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 800379c:	687b      	ldr	r3, [r7, #4]
        }
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000030 	.word	0x20000030

080037b0 <xTaskGetCurrentTaskHandleForCore>:
            return xReturn;
        }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    TaskHandle_t xTaskGetCurrentTaskHandleForCore( BaseType_t xCoreID )
    {
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
        TaskHandle_t xReturn = NULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]

        traceENTER_xTaskGetCurrentTaskHandleForCore( xCoreID );

        if( taskVALID_CORE_ID( xCoreID ) != pdFALSE )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	db05      	blt.n	80037ce <xTaskGetCurrentTaskHandleForCore+0x1e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	dc02      	bgt.n	80037ce <xTaskGetCurrentTaskHandleForCore+0x1e>
        {
            #if ( configNUMBER_OF_CORES == 1 )
                xReturn = pxCurrentTCB;
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <xTaskGetCurrentTaskHandleForCore+0x2c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]
            #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
        }

        traceRETURN_xTaskGetCurrentTaskHandleForCore( xReturn );

        return xReturn;
 80037ce:	68fb      	ldr	r3, [r7, #12]
    }
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20000030 	.word	0x20000030

080037e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <xTaskGetSchedulerState+0x34>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037ee:	2301      	movs	r3, #1
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	e008      	b.n	8003806 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <xTaskGetSchedulerState+0x38>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80037fc:	2302      	movs	r3, #2
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	e001      	b.n	8003806 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003802:	2300      	movs	r3, #0
 8003804:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8003806:	687b      	ldr	r3, [r7, #4]
    }
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	20000614 	.word	0x20000614
 8003818:	2000063c 	.word	0x2000063c

0800381c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800381c:	b5b0      	push	{r4, r5, r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	6139      	str	r1, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003828:	2100      	movs	r1, #0
 800382a:	6179      	str	r1, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	2900      	cmp	r1, #0
 8003830:	f000 8085 	beq.w	800393e <xTaskPriorityInherit+0x122>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003834:	6939      	ldr	r1, [r7, #16]
 8003836:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8003838:	4943      	ldr	r1, [pc, #268]	; (8003948 <xTaskPriorityInherit+0x12c>)
 800383a:	6809      	ldr	r1, [r1, #0]
 800383c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800383e:	4288      	cmp	r0, r1
 8003840:	d274      	bcs.n	800392c <xTaskPriorityInherit+0x110>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8003842:	6939      	ldr	r1, [r7, #16]
 8003844:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8003848:	2900      	cmp	r1, #0
 800384a:	db0d      	blt.n	8003868 <xTaskPriorityInherit+0x4c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800384c:	493e      	ldr	r1, [pc, #248]	; (8003948 <xTaskPriorityInherit+0x12c>)
 800384e:	6809      	ldr	r1, [r1, #0]
 8003850:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8003852:	2000      	movs	r0, #0
 8003854:	460a      	mov	r2, r1
 8003856:	4603      	mov	r3, r0
 8003858:	2100      	movs	r1, #0
 800385a:	f1d2 0438 	rsbs	r4, r2, #56	; 0x38
 800385e:	eb61 0503 	sbc.w	r5, r1, r3
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	e9c3 4508 	strd	r4, r5, [r3, #32]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4a34      	ldr	r2, [pc, #208]	; (800394c <xTaskPriorityInherit+0x130>)
 800387a:	4413      	add	r3, r2
 800387c:	4299      	cmp	r1, r3
 800387e:	d14d      	bne.n	800391c <xTaskPriorityInherit+0x100>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	3308      	adds	r3, #8
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fe2e 	bl	80004e6 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800388a:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <xTaskPriorityInherit+0x12c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	639a      	str	r2, [r3, #56]	; 0x38
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <xTaskPriorityInherit+0x134>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d903      	bls.n	80038a8 <xTaskPriorityInherit+0x8c>
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	4a2a      	ldr	r2, [pc, #168]	; (8003950 <xTaskPriorityInherit+0x134>)
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ac:	4927      	ldr	r1, [pc, #156]	; (800394c <xTaskPriorityInherit+0x130>)
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	440b      	add	r3, r1
 80038b8:	3304      	adds	r3, #4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	611a      	str	r2, [r3, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	615a      	str	r2, [r3, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	3208      	adds	r2, #8
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f103 0208 	add.w	r2, r3, #8
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4a17      	ldr	r2, [pc, #92]	; (800394c <xTaskPriorityInherit+0x130>)
 80038ee:	441a      	add	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	61da      	str	r2, [r3, #28]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f8:	4914      	ldr	r1, [pc, #80]	; (800394c <xTaskPriorityInherit+0x130>)
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800390a:	1c59      	adds	r1, r3, #1
 800390c:	480f      	ldr	r0, [pc, #60]	; (800394c <xTaskPriorityInherit+0x130>)
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4403      	add	r3, r0
 8003918:	6019      	str	r1, [r3, #0]
 800391a:	e004      	b.n	8003926 <xTaskPriorityInherit+0x10a>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <xTaskPriorityInherit+0x12c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003926:	2301      	movs	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e008      	b.n	800393e <xTaskPriorityInherit+0x122>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <xTaskPriorityInherit+0x12c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	429a      	cmp	r2, r3
 8003938:	d201      	bcs.n	800393e <xTaskPriorityInherit+0x122>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800393a:	2301      	movs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800393e:	697b      	ldr	r3, [r7, #20]
    }
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bdb0      	pop	{r4, r5, r7, pc}
 8003948:	20000030 	.word	0x20000030
 800394c:	20000038 	.word	0x20000038
 8003950:	20000610 	.word	0x20000610

08003954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003954:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003958:	b088      	sub	sp, #32
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8089 	beq.w	8003a80 <xTaskPriorityDisinherit+0x12c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <xTaskPriorityDisinherit+0x138>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	429a      	cmp	r2, r3
 8003976:	d00a      	beq.n	800398e <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8003978:	f04f 0310 	mov.w	r3, #16
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	613b      	str	r3, [r7, #16]
}
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <xTaskPriorityDisinherit+0x38>
            configASSERT( pxTCB->uxMutexesHeld );
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <xTaskPriorityDisinherit+0x58>
    __asm volatile
 8003996:	f04f 0310 	mov.w	r3, #16
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	60fb      	str	r3, [r7, #12]
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	1e5a      	subs	r2, r3, #1
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039be:	429a      	cmp	r2, r3
 80039c0:	d05e      	beq.n	8003a80 <xTaskPriorityDisinherit+0x12c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d15a      	bne.n	8003a80 <xTaskPriorityDisinherit+0x12c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	3308      	adds	r3, #8
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fc fd89 	bl	80004e6 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	2200      	movs	r2, #0
 80039e2:	461c      	mov	r4, r3
 80039e4:	4615      	mov	r5, r2
 80039e6:	2300      	movs	r3, #0
 80039e8:	f1d4 0838 	rsbs	r8, r4, #56	; 0x38
 80039ec:	eb63 0905 	sbc.w	r9, r3, r5
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	e9c3 8908 	strd	r8, r9, [r3, #32]
                    prvAddTaskToReadyList( pxTCB );
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fa:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <xTaskPriorityDisinherit+0x13c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d903      	bls.n	8003a0a <xTaskPriorityDisinherit+0xb6>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <xTaskPriorityDisinherit+0x13c>)
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0e:	4921      	ldr	r1, [pc, #132]	; (8003a94 <xTaskPriorityDisinherit+0x140>)
 8003a10:	4613      	mov	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	440b      	add	r3, r1
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	615a      	str	r2, [r3, #20]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	3208      	adds	r2, #8
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f103 0208 	add.w	r2, r3, #8
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <xTaskPriorityDisinherit+0x140>)
 8003a50:	441a      	add	r2, r3
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	61da      	str	r2, [r3, #28]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5a:	490e      	ldr	r1, [pc, #56]	; (8003a94 <xTaskPriorityDisinherit+0x140>)
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	440b      	add	r3, r1
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a6c:	1c59      	adds	r1, r3, #1
 8003a6e:	4809      	ldr	r0, [pc, #36]	; (8003a94 <xTaskPriorityDisinherit+0x140>)
 8003a70:	4613      	mov	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4403      	add	r3, r0
 8003a7a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8003a80:	69fb      	ldr	r3, [r7, #28]
    }
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a8c:	20000030 	.word	0x20000030
 8003a90:	20000610 	.word	0x20000610
 8003a94:	20000038 	.word	0x20000038

08003a98 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8003a98:	b5b0      	push	{r4, r5, r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	6239      	str	r1, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	61f9      	str	r1, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	2900      	cmp	r1, #0
 8003aae:	f000 809e 	beq.w	8003bee <vTaskPriorityDisinheritAfterTimeout+0x156>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003ab2:	6a39      	ldr	r1, [r7, #32]
 8003ab4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003ab6:	2900      	cmp	r1, #0
 8003ab8:	d10a      	bne.n	8003ad0 <vTaskPriorityDisinheritAfterTimeout+0x38>
    __asm volatile
 8003aba:	f04f 0310 	mov.w	r3, #16
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	613b      	str	r3, [r7, #16]
}
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003ad0:	6a39      	ldr	r1, [r7, #32]
 8003ad2:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8003ad4:	6838      	ldr	r0, [r7, #0]
 8003ad6:	4288      	cmp	r0, r1
 8003ad8:	d902      	bls.n	8003ae0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003ada:	6839      	ldr	r1, [r7, #0]
 8003adc:	6279      	str	r1, [r7, #36]	; 0x24
 8003ade:	e002      	b.n	8003ae6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003ae0:	6a39      	ldr	r1, [r7, #32]
 8003ae2:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8003ae4:	6279      	str	r1, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003ae6:	6a39      	ldr	r1, [r7, #32]
 8003ae8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8003aea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aec:	4288      	cmp	r0, r1
 8003aee:	d07e      	beq.n	8003bee <vTaskPriorityDisinheritAfterTimeout+0x156>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003af0:	6a39      	ldr	r1, [r7, #32]
 8003af2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003af4:	69f8      	ldr	r0, [r7, #28]
 8003af6:	4288      	cmp	r0, r1
 8003af8:	d179      	bne.n	8003bee <vTaskPriorityDisinheritAfterTimeout+0x156>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003afa:	493f      	ldr	r1, [pc, #252]	; (8003bf8 <vTaskPriorityDisinheritAfterTimeout+0x160>)
 8003afc:	6809      	ldr	r1, [r1, #0]
 8003afe:	6a38      	ldr	r0, [r7, #32]
 8003b00:	4288      	cmp	r0, r1
 8003b02:	d10a      	bne.n	8003b1a <vTaskPriorityDisinheritAfterTimeout+0x82>
    __asm volatile
 8003b04:	f04f 0310 	mov.w	r3, #16
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	60fb      	str	r3, [r7, #12]
}
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b1a:	6a39      	ldr	r1, [r7, #32]
 8003b1c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8003b1e:	61b9      	str	r1, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003b20:	6a39      	ldr	r1, [r7, #32]
 8003b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b24:	6388      	str	r0, [r1, #56]	; 0x38

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8003b26:	6a39      	ldr	r1, [r7, #32]
 8003b28:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	db0b      	blt.n	8003b48 <vTaskPriorityDisinheritAfterTimeout+0xb0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8003b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b32:	2000      	movs	r0, #0
 8003b34:	460a      	mov	r2, r1
 8003b36:	4603      	mov	r3, r0
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f1d2 0438 	rsbs	r4, r2, #56	; 0x38
 8003b3e:	eb61 0503 	sbc.w	r5, r1, r3
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	e9c3 4508 	strd	r4, r5, [r3, #32]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	69d9      	ldr	r1, [r3, #28]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003b58:	4413      	add	r3, r2
 8003b5a:	4299      	cmp	r1, r3
 8003b5c:	d147      	bne.n	8003bee <vTaskPriorityDisinheritAfterTimeout+0x156>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	3308      	adds	r3, #8
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fcbf 	bl	80004e6 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d903      	bls.n	8003b7c <vTaskPriorityDisinheritAfterTimeout+0xe4>
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b80:	491e      	ldr	r1, [pc, #120]	; (8003bfc <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	611a      	str	r2, [r3, #16]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	615a      	str	r2, [r3, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	6a3a      	ldr	r2, [r7, #32]
 8003ba6:	3208      	adds	r2, #8
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f103 0208 	add.w	r2, r3, #8
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003bc2:	441a      	add	r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	61da      	str	r2, [r3, #28]
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bcc:	490b      	ldr	r1, [pc, #44]	; (8003bfc <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003bce:	4613      	mov	r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4413      	add	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	440b      	add	r3, r1
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a3a      	ldr	r2, [r7, #32]
 8003bdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bde:	1c59      	adds	r1, r3, #1
 8003be0:	4806      	ldr	r0, [pc, #24]	; (8003bfc <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8003be2:	4613      	mov	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4403      	add	r3, r0
 8003bec:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8003bee:	bf00      	nop
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000030 	.word	0x20000030
 8003bfc:	20000038 	.word	0x20000038
 8003c00:	20000610 	.word	0x20000610

08003c04 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8003c04:	b4b0      	push	{r4, r5, r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8003c0a:	4c0e      	ldr	r4, [pc, #56]	; (8003c44 <uxTaskResetEventItemValue+0x40>)
 8003c0c:	6824      	ldr	r4, [r4, #0]
 8003c0e:	e9d4 4508 	ldrd	r4, r5, [r4, #32]
 8003c12:	e9c7 4500 	strd	r4, r5, [r7]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8003c16:	4c0b      	ldr	r4, [pc, #44]	; (8003c44 <uxTaskResetEventItemValue+0x40>)
 8003c18:	6824      	ldr	r4, [r4, #0]
 8003c1a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	4622      	mov	r2, r4
 8003c20:	462b      	mov	r3, r5
 8003c22:	4c08      	ldr	r4, [pc, #32]	; (8003c44 <uxTaskResetEventItemValue+0x40>)
 8003c24:	6824      	ldr	r4, [r4, #0]
 8003c26:	2500      	movs	r5, #0
 8003c28:	f1d2 0038 	rsbs	r0, r2, #56	; 0x38
 8003c2c:	eb65 0103 	sbc.w	r1, r5, r3
 8003c30:	e9c4 0108 	strd	r0, r1, [r4, #32]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8003c34:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bcb0      	pop	{r4, r5, r7}
 8003c42:	4770      	bx	lr
 8003c44:	20000030 	.word	0x20000030

08003c48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <pvTaskIncrementMutexHeldCount+0x2c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8003c64:	687b      	ldr	r3, [r7, #4]
    }
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000030 	.word	0x20000030

08003c78 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	e9c7 2300 	strd	r2, r3, [r7]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <ulTaskGenericNotifyTake+0x2e>
    __asm volatile
 8003c90:	f04f 0310 	mov.w	r3, #16
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	613b      	str	r3, [r7, #16]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <ulTaskGenericNotifyTake+0x2c>

        /* If the notification count is zero, and if we are willing to wait for a
         * notification, then block the task and wait. */
        if( ( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U ) && ( xTicksToWait > ( TickType_t ) 0 ) )
 8003ca6:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <ulTaskGenericNotifyTake+0x100>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	3216      	adds	r2, #22
 8003cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d133      	bne.n	8003d1e <ulTaskGenericNotifyTake+0xa6>
 8003cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d02f      	beq.n	8003d1e <ulTaskGenericNotifyTake+0xa6>
        {
            /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
             * non-deterministic operation. */
            vTaskSuspendAll();
 8003cbe:	f7fe fdeb 	bl	8002898 <vTaskSuspendAll>
            {
                /* We MUST enter a critical section to atomically check if a notification
                 * has occurred and set the flag to indicate that we are waiting for
                 * a notification. If we do not do so, a notification sent from an ISR
                 * will get lost. */
                taskENTER_CRITICAL();
 8003cc2:	f001 fce1 	bl	8005688 <vPortEnterCritical>
                {
                    /* Only block if the notification count is not already non-zero. */
                    if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8003cc6:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <ulTaskGenericNotifyTake+0x100>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	3216      	adds	r2, #22
 8003cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d108      	bne.n	8003ce8 <ulTaskGenericNotifyTake+0x70>
                    {
                        /* Mark this task as waiting for a notification. */
                        pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8003cd6:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <ulTaskGenericNotifyTake+0x100>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	335c      	adds	r3, #92	; 0x5c
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]

                        /* Arrange to wait for a notification. */
                        xShouldBlock = pdTRUE;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
 8003ce8:	f001 fcfe 	bl	80056e8 <vPortExitCritical>

                /* We are now out of the critical section but the scheduler is still
                 * suspended, so we are safe to do non-deterministic operations such
                 * as prvAddCurrentTaskToDelayedList. */
                if( xShouldBlock == pdTRUE )
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d104      	bne.n	8003cfc <ulTaskGenericNotifyTake+0x84>
                {
                    traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cf8:	f000 fd02 	bl	8004700 <prvAddCurrentTaskToDelayedList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            xAlreadyYielded = xTaskResumeAll();
 8003cfc:	f7fe fdda 	bl	80028b4 <xTaskResumeAll>
 8003d00:	61b8      	str	r0, [r7, #24]

            /* Force a reschedule if xTaskResumeAll has not already done so. */
            if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d10a      	bne.n	8003d1e <ulTaskGenericNotifyTake+0xa6>
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d107      	bne.n	8003d1e <ulTaskGenericNotifyTake+0xa6>
            {
                taskYIELD_WITHIN_API();
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <ulTaskGenericNotifyTake+0x104>)
 8003d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        taskENTER_CRITICAL();
 8003d1e:	f001 fcb3 	bl	8005688 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <ulTaskGenericNotifyTake+0x100>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	3216      	adds	r2, #22
 8003d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2e:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d012      	beq.n	8003d5c <ulTaskGenericNotifyTake+0xe4>
            {
                if( xClearCountOnExit != pdFALSE )
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <ulTaskGenericNotifyTake+0xd4>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <ulTaskGenericNotifyTake+0x100>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	3216      	adds	r2, #22
 8003d44:	2100      	movs	r1, #0
 8003d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003d4a:	e007      	b.n	8003d5c <ulTaskGenericNotifyTake+0xe4>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <ulTaskGenericNotifyTake+0x100>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	1e51      	subs	r1, r2, #1
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	3216      	adds	r2, #22
 8003d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <ulTaskGenericNotifyTake+0x100>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	335c      	adds	r3, #92	; 0x5c
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003d6a:	f001 fcbd 	bl	80056e8 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8003d6e:	697b      	ldr	r3, [r7, #20]
    }
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000030 	.word	0x20000030
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <xTaskGenericNotifyWait+0x2e>
    __asm volatile
 8003d98:	f04f 0310 	mov.w	r3, #16
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	613b      	str	r3, [r7, #16]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xTaskGenericNotifyWait+0x2c>

        /* If the task hasn't received a notification, and if we are willing to wait
         * for it, then block the task and wait. */
        if( ( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED ) && ( xTicksToWait > ( TickType_t ) 0 ) )
 8003dae:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <xTaskGenericNotifyWait+0x130>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	335c      	adds	r3, #92	; 0x5c
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d041      	beq.n	8003e44 <xTaskGenericNotifyWait+0xc4>
 8003dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	d03d      	beq.n	8003e44 <xTaskGenericNotifyWait+0xc4>
        {
            /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
             * non-deterministic operation. */
            vTaskSuspendAll();
 8003dc8:	f7fe fd66 	bl	8002898 <vTaskSuspendAll>
            {
                /* We MUST enter a critical section to atomically check and update the
                 * task notification value. If we do not do so, a notification from
                 * an ISR will get lost. */
                taskENTER_CRITICAL();
 8003dcc:	f001 fc5c 	bl	8005688 <vPortEnterCritical>
                {
                    /* Only block if a notification is not already pending. */
                    if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8003dd0:	4b37      	ldr	r3, [pc, #220]	; (8003eb0 <xTaskGenericNotifyWait+0x130>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	335c      	adds	r3, #92	; 0x5c
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d015      	beq.n	8003e0e <xTaskGenericNotifyWait+0x8e>
                    {
                        /* Clear bits in the task's notification value as bits may get
                         * set by the notifying task or interrupt. This can be used
                         * to clear the value to zero. */
                        pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8003de2:	4b33      	ldr	r3, [pc, #204]	; (8003eb0 <xTaskGenericNotifyWait+0x130>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	3216      	adds	r2, #22
 8003dea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	43d2      	mvns	r2, r2
 8003df2:	4011      	ands	r1, r2
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	3216      	adds	r2, #22
 8003df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        /* Mark this task as waiting for a notification. */
                        pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8003dfc:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <xTaskGenericNotifyWait+0x130>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	335c      	adds	r3, #92	; 0x5c
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]

                        /* Arrange to wait for a notification. */
                        xShouldBlock = pdTRUE;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61bb      	str	r3, [r7, #24]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
 8003e0e:	f001 fc6b 	bl	80056e8 <vPortExitCritical>

                /* We are now out of the critical section but the scheduler is still
                 * suspended, so we are safe to do non-deterministic operations such
                 * as prvAddCurrentTaskToDelayedList. */
                if( xShouldBlock == pdTRUE )
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d104      	bne.n	8003e22 <xTaskGenericNotifyWait+0xa2>
                {
                    traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e18:	2201      	movs	r2, #1
 8003e1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e1e:	f000 fc6f 	bl	8004700 <prvAddCurrentTaskToDelayedList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            xAlreadyYielded = xTaskResumeAll();
 8003e22:	f7fe fd47 	bl	80028b4 <xTaskResumeAll>
 8003e26:	6178      	str	r0, [r7, #20]

            /* Force a reschedule if xTaskResumeAll has not already done so. */
            if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10a      	bne.n	8003e44 <xTaskGenericNotifyWait+0xc4>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d107      	bne.n	8003e44 <xTaskGenericNotifyWait+0xc4>
            {
                taskYIELD_WITHIN_API();
 8003e34:	4b1f      	ldr	r3, [pc, #124]	; (8003eb4 <xTaskGenericNotifyWait+0x134>)
 8003e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	f3bf 8f6f 	isb	sy
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        taskENTER_CRITICAL();
 8003e44:	f001 fc20 	bl	8005688 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <xTaskGenericNotifyWait+0xde>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8003e4e:	4b18      	ldr	r3, [pc, #96]	; (8003eb0 <xTaskGenericNotifyWait+0x130>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	3216      	adds	r2, #22
 8003e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8003e5e:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <xTaskGenericNotifyWait+0x130>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	335c      	adds	r3, #92	; 0x5c
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d002      	beq.n	8003e76 <xTaskGenericNotifyWait+0xf6>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
 8003e74:	e00e      	b.n	8003e94 <xTaskGenericNotifyWait+0x114>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8003e76:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <xTaskGenericNotifyWait+0x130>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	3216      	adds	r2, #22
 8003e7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	43d2      	mvns	r2, r2
 8003e86:	4011      	ands	r1, r2
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	3216      	adds	r2, #22
 8003e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <xTaskGenericNotifyWait+0x130>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	335c      	adds	r3, #92	; 0x5c
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003ea2:	f001 fc21 	bl	80056e8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
    }
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000030 	.word	0x20000030
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	; 0x38
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <xTaskGenericNotify+0x2e>
    __asm volatile
 8003ed0:	f04f 0310 	mov.w	r3, #16
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	623b      	str	r3, [r7, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <xTaskGenericNotify+0x4a>
    __asm volatile
 8003eec:	f04f 0310 	mov.w	r3, #16
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	61fb      	str	r3, [r7, #28]
}
 8003efe:	bf00      	nop
 8003f00:	e7fe      	b.n	8003f00 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003f06:	f001 fbbf 	bl	8005688 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	3216      	adds	r2, #22
 8003f16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4413      	add	r3, r2
 8003f24:	335c      	adds	r3, #92	; 0x5c
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4413      	add	r3, r2
 8003f32:	335c      	adds	r3, #92	; 0x5c
 8003f34:	2202      	movs	r2, #2
 8003f36:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d83b      	bhi.n	8003fb6 <xTaskGenericNotify+0xfe>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <xTaskGenericNotify+0x8c>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003fd7 	.word	0x08003fd7
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f75 	.word	0x08003f75
 8003f50:	08003f8d 	.word	0x08003f8d
 8003f54:	08003f9b 	.word	0x08003f9b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	3216      	adds	r2, #22
 8003f5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	ea42 0103 	orr.w	r1, r2, r3
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	3216      	adds	r2, #22
 8003f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003f72:	e033      	b.n	8003fdc <xTaskGenericNotify+0x124>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	3216      	adds	r2, #22
 8003f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7e:	1c59      	adds	r1, r3, #1
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	3216      	adds	r2, #22
 8003f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003f8a:	e027      	b.n	8003fdc <xTaskGenericNotify+0x124>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	3216      	adds	r2, #22
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003f98:	e020      	b.n	8003fdc <xTaskGenericNotify+0x124>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d006      	beq.n	8003fb0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	3216      	adds	r2, #22
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003fae:	e015      	b.n	8003fdc <xTaskGenericNotify+0x124>
                        xReturn = pdFAIL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003fb4:	e012      	b.n	8003fdc <xTaskGenericNotify+0x124>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003fb6:	4b4f      	ldr	r3, [pc, #316]	; (80040f4 <xTaskGenericNotify+0x23c>)
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d00c      	beq.n	8003fda <xTaskGenericNotify+0x122>
    __asm volatile
 8003fc0:	f04f 0310 	mov.w	r3, #16
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	61bb      	str	r3, [r7, #24]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <xTaskGenericNotify+0x11c>
                    break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <xTaskGenericNotify+0x124>

                    break;
 8003fda:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d17f      	bne.n	80040e4 <xTaskGenericNotify+0x22c>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff0:	6952      	ldr	r2, [r2, #20]
 8003ff2:	60da      	str	r2, [r3, #12]
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffa:	6912      	ldr	r2, [r2, #16]
 8003ffc:	609a      	str	r2, [r3, #8]
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	3308      	adds	r3, #8
 8004006:	429a      	cmp	r2, r3
 8004008:	d103      	bne.n	8004012 <xTaskGenericNotify+0x15a>
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2200      	movs	r2, #0
 8004016:	61da      	str	r2, [r3, #28]
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1e5a      	subs	r2, r3, #1
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004026:	4b34      	ldr	r3, [pc, #208]	; (80040f8 <xTaskGenericNotify+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d903      	bls.n	8004036 <xTaskGenericNotify+0x17e>
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	4a31      	ldr	r2, [pc, #196]	; (80040f8 <xTaskGenericNotify+0x240>)
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403a:	4930      	ldr	r1, [pc, #192]	; (80040fc <xTaskGenericNotify+0x244>)
 800403c:	4613      	mov	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4413      	add	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	440b      	add	r3, r1
 8004046:	3304      	adds	r3, #4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004050:	611a      	str	r2, [r3, #16]
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	615a      	str	r2, [r3, #20]
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004060:	3208      	adds	r2, #8
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	f103 0208 	add.w	r2, r3, #8
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4a20      	ldr	r2, [pc, #128]	; (80040fc <xTaskGenericNotify+0x244>)
 800407c:	441a      	add	r2, r3
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	61da      	str	r2, [r3, #28]
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004086:	491d      	ldr	r1, [pc, #116]	; (80040fc <xTaskGenericNotify+0x244>)
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	440b      	add	r3, r1
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004098:	1c59      	adds	r1, r3, #1
 800409a:	4818      	ldr	r0, [pc, #96]	; (80040fc <xTaskGenericNotify+0x244>)
 800409c:	4613      	mov	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4403      	add	r3, r0
 80040a6:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <xTaskGenericNotify+0x20e>
    __asm volatile
 80040b0:	f04f 0310 	mov.w	r3, #16
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	617b      	str	r3, [r7, #20]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xTaskGenericNotify+0x20c>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <xTaskGenericNotify+0x248>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d207      	bcs.n	80040e4 <xTaskGenericNotify+0x22c>
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <xTaskGenericNotify+0x24c>)
 80040d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80040e4:	f001 fb00 	bl	80056e8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80040ea:	4618      	mov	r0, r3
 80040ec:	3738      	adds	r7, #56	; 0x38
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000608 	.word	0x20000608
 80040f8:	20000610 	.word	0x20000610
 80040fc:	20000038 	.word	0x20000038
 8004100:	20000030 	.word	0x20000030
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004108:	b580      	push	{r7, lr}
 800410a:	b092      	sub	sp, #72	; 0x48
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004116:	2301      	movs	r3, #1
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xTaskGenericNotifyFromISR+0x2e>
    __asm volatile
 8004120:	f04f 0310 	mov.w	r3, #16
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <xTaskGenericNotifyFromISR+0x4a>
    __asm volatile
 800413c:	f04f 0310 	mov.w	r3, #16
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004152:	f001 fb76 	bl	8005842 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	643b      	str	r3, [r7, #64]	; 0x40
    __asm volatile
 800415a:	f3ef 8211 	mrs	r2, BASEPRI
 800415e:	f04f 0310 	mov.w	r3, #16
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	623a      	str	r2, [r7, #32]
 8004170:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 8004172:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004174:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8004176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004178:	2b00      	cmp	r3, #0
 800417a:	d006      	beq.n	800418a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800417c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	3216      	adds	r2, #22
 8004182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004188:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800418a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4413      	add	r3, r2
 8004190:	335c      	adds	r3, #92	; 0x5c
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4413      	add	r3, r2
 800419e:	335c      	adds	r3, #92	; 0x5c
 80041a0:	2202      	movs	r2, #2
 80041a2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d83b      	bhi.n	8004222 <xTaskGenericNotifyFromISR+0x11a>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <xTaskGenericNotifyFromISR+0xa8>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	08004243 	.word	0x08004243
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	080041f9 	.word	0x080041f9
 80041c0:	08004207 	.word	0x08004207
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80041c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	3216      	adds	r2, #22
 80041ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	ea42 0103 	orr.w	r1, r2, r3
 80041d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	3216      	adds	r2, #22
 80041da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80041de:	e033      	b.n	8004248 <xTaskGenericNotifyFromISR+0x140>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80041e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	3216      	adds	r2, #22
 80041e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ea:	1c59      	adds	r1, r3, #1
 80041ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	3216      	adds	r2, #22
 80041f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80041f6:	e027      	b.n	8004248 <xTaskGenericNotifyFromISR+0x140>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80041f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	3216      	adds	r2, #22
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004204:	e020      	b.n	8004248 <xTaskGenericNotifyFromISR+0x140>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004206:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800420a:	2b02      	cmp	r3, #2
 800420c:	d006      	beq.n	800421c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800420e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	3216      	adds	r2, #22
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800421a:	e015      	b.n	8004248 <xTaskGenericNotifyFromISR+0x140>
                        xReturn = pdFAIL;
 800421c:	2300      	movs	r3, #0
 800421e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8004220:	e012      	b.n	8004248 <xTaskGenericNotifyFromISR+0x140>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004222:	4b62      	ldr	r3, [pc, #392]	; (80043ac <xTaskGenericNotifyFromISR+0x2a4>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	4313      	orrs	r3, r2
 800422a:	d00c      	beq.n	8004246 <xTaskGenericNotifyFromISR+0x13e>
    __asm volatile
 800422c:	f04f 0310 	mov.w	r3, #16
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	61bb      	str	r3, [r7, #24]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <xTaskGenericNotifyFromISR+0x138>
                    break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <xTaskGenericNotifyFromISR+0x140>
                    break;
 8004246:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004248:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800424c:	2b01      	cmp	r3, #1
 800424e:	f040 80a2 	bne.w	8004396 <xTaskGenericNotifyFromISR+0x28e>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <xTaskGenericNotifyFromISR+0x168>
    __asm volatile
 800425a:	f04f 0310 	mov.w	r3, #16
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	617b      	str	r3, [r7, #20]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <xTaskGenericNotifyFromISR+0x166>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004270:	4b4f      	ldr	r3, [pc, #316]	; (80043b0 <xTaskGenericNotifyFromISR+0x2a8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d162      	bne.n	800433e <xTaskGenericNotifyFromISR+0x236>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	633b      	str	r3, [r7, #48]	; 0x30
 800427e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004284:	6952      	ldr	r2, [r2, #20]
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800428e:	6912      	ldr	r2, [r2, #16]
 8004290:	609a      	str	r2, [r3, #8]
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004298:	3308      	adds	r3, #8
 800429a:	429a      	cmp	r2, r3
 800429c:	d103      	bne.n	80042a6 <xTaskGenericNotifyFromISR+0x19e>
 800429e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a8:	2200      	movs	r2, #0
 80042aa:	61da      	str	r2, [r3, #28]
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	1e5a      	subs	r2, r3, #1
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80042b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <xTaskGenericNotifyFromISR+0x2ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d903      	bls.n	80042ca <xTaskGenericNotifyFromISR+0x1c2>
 80042c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	4a3b      	ldr	r2, [pc, #236]	; (80043b4 <xTaskGenericNotifyFromISR+0x2ac>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ce:	493a      	ldr	r1, [pc, #232]	; (80043b8 <xTaskGenericNotifyFromISR+0x2b0>)
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	440b      	add	r3, r1
 80042da:	3304      	adds	r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e4:	611a      	str	r2, [r3, #16]
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ec:	615a      	str	r2, [r3, #20]
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042f4:	3208      	adds	r2, #8
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fa:	f103 0208 	add.w	r2, r3, #8
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <xTaskGenericNotifyFromISR+0x2b0>)
 8004310:	441a      	add	r2, r3
 8004312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004314:	61da      	str	r2, [r3, #28]
 8004316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431a:	4927      	ldr	r1, [pc, #156]	; (80043b8 <xTaskGenericNotifyFromISR+0x2b0>)
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	440b      	add	r3, r1
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800432a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800432c:	1c59      	adds	r1, r3, #1
 800432e:	4822      	ldr	r0, [pc, #136]	; (80043b8 <xTaskGenericNotifyFromISR+0x2b0>)
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4403      	add	r3, r0
 800433a:	6019      	str	r1, [r3, #0]
 800433c:	e01b      	b.n	8004376 <xTaskGenericNotifyFromISR+0x26e>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800433e:	4b1f      	ldr	r3, [pc, #124]	; (80043bc <xTaskGenericNotifyFromISR+0x2b4>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
 8004344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004348:	629a      	str	r2, [r3, #40]	; 0x28
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c
 8004352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004358:	3220      	adds	r2, #32
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435e:	f103 0220 	add.w	r2, r3, #32
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004368:	4a14      	ldr	r2, [pc, #80]	; (80043bc <xTaskGenericNotifyFromISR+0x2b4>)
 800436a:	635a      	str	r2, [r3, #52]	; 0x34
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <xTaskGenericNotifyFromISR+0x2b4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <xTaskGenericNotifyFromISR+0x2b4>)
 8004374:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437a:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <xTaskGenericNotifyFromISR+0x2b8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	429a      	cmp	r2, r3
 8004382:	d908      	bls.n	8004396 <xTaskGenericNotifyFromISR+0x28e>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <xTaskGenericNotifyFromISR+0x288>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800438a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438c:	2201      	movs	r2, #1
 800438e:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <xTaskGenericNotifyFromISR+0x2bc>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004398:	613b      	str	r3, [r7, #16]
    __asm volatile
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f383 8811 	msr	BASEPRI, r3
}
 80043a0:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 80043a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80043a4:	4618      	mov	r0, r3
 80043a6:	3748      	adds	r7, #72	; 0x48
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000608 	.word	0x20000608
 80043b0:	2000063c 	.word	0x2000063c
 80043b4:	20000610 	.word	0x20000610
 80043b8:	20000038 	.word	0x20000038
 80043bc:	200005b0 	.word	0x200005b0
 80043c0:	20000030 	.word	0x20000030
 80043c4:	20000620 	.word	0x20000620

080043c8 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b090      	sub	sp, #64	; 0x40
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <vTaskGenericNotifyGiveFromISR+0x28>
    __asm volatile
 80043da:	f04f 0310 	mov.w	r3, #16
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <vTaskGenericNotifyGiveFromISR+0x44>
    __asm volatile
 80043f6:	f04f 0310 	mov.w	r3, #16
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	623b      	str	r3, [r7, #32]
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <vTaskGenericNotifyGiveFromISR+0x42>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800440c:	f001 fa19 	bl	8005842 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm volatile
 8004414:	f3ef 8211 	mrs	r2, BASEPRI
 8004418:	f04f 0310 	mov.w	r3, #16
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	61fa      	str	r2, [r7, #28]
 800442a:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 800442c:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800442e:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4413      	add	r3, r2
 8004436:	335c      	adds	r3, #92	; 0x5c
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800443e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4413      	add	r3, r2
 8004444:	335c      	adds	r3, #92	; 0x5c
 8004446:	2202      	movs	r2, #2
 8004448:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800444a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	3216      	adds	r2, #22
 8004450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004454:	1c59      	adds	r1, r3, #1
 8004456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	3216      	adds	r2, #22
 800445c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004460:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004464:	2b01      	cmp	r3, #1
 8004466:	f040 80a2 	bne.w	80045ae <vTaskGenericNotifyGiveFromISR+0x1e6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800446a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <vTaskGenericNotifyGiveFromISR+0xc0>
    __asm volatile
 8004472:	f04f 0310 	mov.w	r3, #16
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	617b      	str	r3, [r7, #20]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <vTaskGenericNotifyGiveFromISR+0xbe>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004488:	4b4e      	ldr	r3, [pc, #312]	; (80045c4 <vTaskGenericNotifyGiveFromISR+0x1fc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d162      	bne.n	8004556 <vTaskGenericNotifyGiveFromISR+0x18e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800449c:	6952      	ldr	r2, [r2, #20]
 800449e:	60da      	str	r2, [r3, #12]
 80044a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a6:	6912      	ldr	r2, [r2, #16]
 80044a8:	609a      	str	r2, [r3, #8]
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b0:	3308      	adds	r3, #8
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d103      	bne.n	80044be <vTaskGenericNotifyGiveFromISR+0xf6>
 80044b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c0:	2200      	movs	r2, #0
 80044c2:	61da      	str	r2, [r3, #28]
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	1e5a      	subs	r2, r3, #1
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80044ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d2:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <vTaskGenericNotifyGiveFromISR+0x200>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d903      	bls.n	80044e2 <vTaskGenericNotifyGiveFromISR+0x11a>
 80044da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	4a3a      	ldr	r2, [pc, #232]	; (80045c8 <vTaskGenericNotifyGiveFromISR+0x200>)
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e6:	4939      	ldr	r1, [pc, #228]	; (80045cc <vTaskGenericNotifyGiveFromISR+0x204>)
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	440b      	add	r3, r1
 80044f2:	3304      	adds	r3, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044fc:	611a      	str	r2, [r3, #16]
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004504:	615a      	str	r2, [r3, #20]
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800450c:	3208      	adds	r2, #8
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004512:	f103 0208 	add.w	r2, r3, #8
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4a29      	ldr	r2, [pc, #164]	; (80045cc <vTaskGenericNotifyGiveFromISR+0x204>)
 8004528:	441a      	add	r2, r3
 800452a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452c:	61da      	str	r2, [r3, #28]
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004532:	4926      	ldr	r1, [pc, #152]	; (80045cc <vTaskGenericNotifyGiveFromISR+0x204>)
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	440b      	add	r3, r1
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004544:	1c59      	adds	r1, r3, #1
 8004546:	4821      	ldr	r0, [pc, #132]	; (80045cc <vTaskGenericNotifyGiveFromISR+0x204>)
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4403      	add	r3, r0
 8004552:	6019      	str	r1, [r3, #0]
 8004554:	e01b      	b.n	800458e <vTaskGenericNotifyGiveFromISR+0x1c6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004556:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <vTaskGenericNotifyGiveFromISR+0x208>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	633b      	str	r3, [r7, #48]	; 0x30
 800455c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004570:	3220      	adds	r2, #32
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004576:	f103 0220 	add.w	r2, r3, #32
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004580:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <vTaskGenericNotifyGiveFromISR+0x208>)
 8004582:	635a      	str	r2, [r3, #52]	; 0x34
 8004584:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <vTaskGenericNotifyGiveFromISR+0x208>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <vTaskGenericNotifyGiveFromISR+0x208>)
 800458c:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800458e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <vTaskGenericNotifyGiveFromISR+0x20c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	429a      	cmp	r2, r3
 800459a:	d908      	bls.n	80045ae <vTaskGenericNotifyGiveFromISR+0x1e6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <vTaskGenericNotifyGiveFromISR+0x1e0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <vTaskGenericNotifyGiveFromISR+0x210>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	613b      	str	r3, [r7, #16]
    __asm volatile
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f383 8811 	msr	BASEPRI, r3
}
 80045b8:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 80045ba:	bf00      	nop
 80045bc:	3740      	adds	r7, #64	; 0x40
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	2000063c 	.word	0x2000063c
 80045c8:	20000610 	.word	0x20000610
 80045cc:	20000038 	.word	0x20000038
 80045d0:	200005b0 	.word	0x200005b0
 80045d4:	20000030 	.word	0x20000030
 80045d8:	20000620 	.word	0x20000620

080045dc <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        traceENTER_xTaskGenericNotifyStateClear( xTask, uxIndexToClear );

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <xTaskGenericNotifyStateClear+0x26>
    __asm volatile
 80045ec:	f04f 0310 	mov.w	r3, #16
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60fb      	str	r3, [r7, #12]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <xTaskGenericNotifyStateClear+0x32>
 8004608:	4b17      	ldr	r3, [pc, #92]	; (8004668 <xTaskGenericNotifyStateClear+0x8c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	e000      	b.n	8004610 <xTaskGenericNotifyStateClear+0x34>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	613b      	str	r3, [r7, #16]
        configASSERT( pxTCB != NULL );
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <xTaskGenericNotifyStateClear+0x52>
    __asm volatile
 8004618:	f04f 0310 	mov.w	r3, #16
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	60bb      	str	r3, [r7, #8]
}
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <xTaskGenericNotifyStateClear+0x50>

        taskENTER_CRITICAL();
 800462e:	f001 f82b 	bl	8005688 <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	4413      	add	r3, r2
 8004638:	335c      	adds	r3, #92	; 0x5c
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d108      	bne.n	8004654 <xTaskGenericNotifyStateClear+0x78>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	4413      	add	r3, r2
 8004648:	335c      	adds	r3, #92	; 0x5c
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 800464e:	2301      	movs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e001      	b.n	8004658 <xTaskGenericNotifyStateClear+0x7c>
            }
            else
            {
                xReturn = pdFAIL;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8004658:	f001 f846 	bl	80056e8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyStateClear( xReturn );

        return xReturn;
 800465c:	697b      	ldr	r3, [r7, #20]
    }
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000030 	.word	0x20000030

0800466c <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint32_t ulReturn;

        traceENTER_ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <ulTaskGenericNotifyValueClear+0x28>
    __asm volatile
 800467e:	f04f 0310 	mov.w	r3, #16
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	617b      	str	r3, [r7, #20]
}
 8004690:	bf00      	nop
 8004692:	e7fe      	b.n	8004692 <ulTaskGenericNotifyValueClear+0x26>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <ulTaskGenericNotifyValueClear+0x34>
 800469a:	4b18      	ldr	r3, [pc, #96]	; (80046fc <ulTaskGenericNotifyValueClear+0x90>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	e000      	b.n	80046a2 <ulTaskGenericNotifyValueClear+0x36>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	61fb      	str	r3, [r7, #28]
        configASSERT( pxTCB != NULL );
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <ulTaskGenericNotifyValueClear+0x54>
    __asm volatile
 80046aa:	f04f 0310 	mov.w	r3, #16
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	613b      	str	r3, [r7, #16]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <ulTaskGenericNotifyValueClear+0x52>

        taskENTER_CRITICAL();
 80046c0:	f000 ffe2 	bl	8005688 <vPortEnterCritical>
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	3216      	adds	r2, #22
 80046ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ce:	61bb      	str	r3, [r7, #24]
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	3216      	adds	r2, #22
 80046d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	43db      	mvns	r3, r3
 80046de:	ea02 0103 	and.w	r1, r2, r3
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	3216      	adds	r2, #22
 80046e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
        taskEXIT_CRITICAL();
 80046ec:	f000 fffc 	bl	80056e8 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyValueClear( ulReturn );

        return ulReturn;
 80046f0:	69bb      	ldr	r3, [r7, #24]
    }
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000030 	.word	0x20000030

08004700 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004700:	b5b0      	push	{r4, r5, r7, lr}
 8004702:	b08c      	sub	sp, #48	; 0x30
 8004704:	af00      	add	r7, sp, #0
 8004706:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800470c:	4b3b      	ldr	r3, [pc, #236]	; (80047fc <prvAddCurrentTaskToDelayedList+0xfc>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    List_t * const pxDelayedList = pxDelayedTaskList;
 8004716:	4b3a      	ldr	r3, [pc, #232]	; (8004800 <prvAddCurrentTaskToDelayedList+0x100>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800471c:	4b39      	ldr	r3, [pc, #228]	; (8004804 <prvAddCurrentTaskToDelayedList+0x104>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	623b      	str	r3, [r7, #32]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004722:	4b39      	ldr	r3, [pc, #228]	; (8004808 <prvAddCurrentTaskToDelayedList+0x108>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	4618      	mov	r0, r3
 800472a:	f7fb fedc 	bl	80004e6 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800472e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004736:	bf08      	it	eq
 8004738:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800473c:	d125      	bne.n	800478a <prvAddCurrentTaskToDelayedList+0x8a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d022      	beq.n	800478a <prvAddCurrentTaskToDelayedList+0x8a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004744:	4b31      	ldr	r3, [pc, #196]	; (800480c <prvAddCurrentTaskToDelayedList+0x10c>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	4b2f      	ldr	r3, [pc, #188]	; (8004808 <prvAddCurrentTaskToDelayedList+0x108>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	611a      	str	r2, [r3, #16]
 8004752:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <prvAddCurrentTaskToDelayedList+0x108>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	68d2      	ldr	r2, [r2, #12]
 800475a:	615a      	str	r2, [r3, #20]
 800475c:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <prvAddCurrentTaskToDelayedList+0x108>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	3208      	adds	r2, #8
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	4b27      	ldr	r3, [pc, #156]	; (8004808 <prvAddCurrentTaskToDelayedList+0x108>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f103 0208 	add.w	r2, r3, #8
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	60da      	str	r2, [r3, #12]
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <prvAddCurrentTaskToDelayedList+0x108>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a24      	ldr	r2, [pc, #144]	; (800480c <prvAddCurrentTaskToDelayedList+0x10c>)
 800477a:	61da      	str	r2, [r3, #28]
 800477c:	4b23      	ldr	r3, [pc, #140]	; (800480c <prvAddCurrentTaskToDelayedList+0x10c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	4a22      	ldr	r2, [pc, #136]	; (800480c <prvAddCurrentTaskToDelayedList+0x10c>)
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004788:	e033      	b.n	80047f2 <prvAddCurrentTaskToDelayedList+0xf2>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800478a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800478e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004792:	1884      	adds	r4, r0, r2
 8004794:	eb41 0503 	adc.w	r5, r1, r3
 8004798:	e9c7 4504 	strd	r4, r5, [r7, #16]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800479c:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <prvAddCurrentTaskToDelayedList+0x108>)
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            if( xTimeToWake < xConstTickCount )
 80047a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047b0:	4290      	cmp	r0, r2
 80047b2:	eb71 0303 	sbcs.w	r3, r1, r3
 80047b6:	d207      	bcs.n	80047c8 <prvAddCurrentTaskToDelayedList+0xc8>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80047b8:	4b13      	ldr	r3, [pc, #76]	; (8004808 <prvAddCurrentTaskToDelayedList+0x108>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3308      	adds	r3, #8
 80047be:	4619      	mov	r1, r3
 80047c0:	6a38      	ldr	r0, [r7, #32]
 80047c2:	f7fb fe4d 	bl	8000460 <vListInsert>
}
 80047c6:	e014      	b.n	80047f2 <prvAddCurrentTaskToDelayedList+0xf2>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80047c8:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <prvAddCurrentTaskToDelayedList+0x108>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	4619      	mov	r1, r3
 80047d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047d2:	f7fb fe45 	bl	8000460 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80047d6:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <prvAddCurrentTaskToDelayedList+0x110>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047e0:	4290      	cmp	r0, r2
 80047e2:	eb71 0303 	sbcs.w	r3, r1, r3
 80047e6:	d204      	bcs.n	80047f2 <prvAddCurrentTaskToDelayedList+0xf2>
                    xNextTaskUnblockTime = xTimeToWake;
 80047e8:	4909      	ldr	r1, [pc, #36]	; (8004810 <prvAddCurrentTaskToDelayedList+0x110>)
 80047ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047ee:	e9c1 2300 	strd	r2, r3, [r1]
}
 80047f2:	bf00      	nop
 80047f4:	3730      	adds	r7, #48	; 0x30
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bdb0      	pop	{r4, r5, r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000608 	.word	0x20000608
 8004800:	200005a8 	.word	0x200005a8
 8004804:	200005ac 	.word	0x200005ac
 8004808:	20000030 	.word	0x20000030
 800480c:	200005e8 	.word	0x200005e8
 8004810:	20000630 	.word	0x20000630

08004814 <vTaskResetState>:
 * Reset the state in this file. This state is normally initialized at start up.
 * This function must be called by the application before restarting the
 * scheduler.
 */
void vTaskResetState( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
    BaseType_t xCoreID;

    /* Task control block. */
    #if ( configNUMBER_OF_CORES == 1 )
    {
        pxCurrentTCB = NULL;
 800481a:	4b20      	ldr	r3, [pc, #128]	; (800489c <vTaskResetState+0x88>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 8004820:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <vTaskResetState+0x8c>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
        FreeRTOS_errno = 0;
    }
    #endif /* #if ( configUSE_POSIX_ERRNO == 1 ) */

    /* Other file private variables. */
    uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 8004826:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <vTaskResetState+0x90>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
    xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800482c:	491e      	ldr	r1, [pc, #120]	; (80048a8 <vTaskResetState+0x94>)
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9c1 2300 	strd	r2, r3, [r1]
    uxTopReadyPriority = tskIDLE_PRIORITY;
 800483a:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <vTaskResetState+0x98>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
    xSchedulerRunning = pdFALSE;
 8004840:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <vTaskResetState+0x9c>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
    xPendedTicks = ( TickType_t ) 0U;
 8004846:	491b      	ldr	r1, [pc, #108]	; (80048b4 <vTaskResetState+0xa0>)
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9c1 2300 	strd	r2, r3, [r1]

    for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
 8004854:	2300      	movs	r3, #0
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	e007      	b.n	800486a <vTaskResetState+0x56>
    {
        xYieldPendings[ xCoreID ] = pdFALSE;
 800485a:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <vTaskResetState+0xa4>)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2100      	movs	r1, #0
 8004860:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for( xCoreID = 0; xCoreID < configNUMBER_OF_CORES; xCoreID++ )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3301      	adds	r3, #1
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	ddf4      	ble.n	800485a <vTaskResetState+0x46>
    }

    xNumOfOverflows = ( BaseType_t ) 0;
 8004870:	4b12      	ldr	r3, [pc, #72]	; (80048bc <vTaskResetState+0xa8>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    uxTaskNumber = ( UBaseType_t ) 0U;
 8004876:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <vTaskResetState+0xac>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
    xNextTaskUnblockTime = ( TickType_t ) 0U;
 800487c:	4911      	ldr	r1, [pc, #68]	; (80048c4 <vTaskResetState+0xb0>)
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	e9c1 2300 	strd	r2, r3, [r1]

    uxSchedulerSuspended = ( UBaseType_t ) 0U;
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <vTaskResetState+0xb4>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
            ulTaskSwitchedInTime[ xCoreID ] = 0U;
            ulTotalRunTime[ xCoreID ] = 0U;
        }
    }
    #endif /* #if ( configGENERATE_RUN_TIME_STATS == 1 ) */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	20000030 	.word	0x20000030
 80048a0:	200005e0 	.word	0x200005e0
 80048a4:	20000600 	.word	0x20000600
 80048a8:	20000608 	.word	0x20000608
 80048ac:	20000610 	.word	0x20000610
 80048b0:	20000614 	.word	0x20000614
 80048b4:	20000618 	.word	0x20000618
 80048b8:	20000620 	.word	0x20000620
 80048bc:	20000624 	.word	0x20000624
 80048c0:	20000628 	.word	0x20000628
 80048c4:	20000630 	.word	0x20000630
 80048c8:	2000063c 	.word	0x2000063c

080048cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80048d6:	f000 fca9 	bl	800522c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <xTimerCreateTimerTask+0x54>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <xTimerCreateTimerTask+0x58>)
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	2337      	movs	r3, #55	; 0x37
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	2300      	movs	r3, #0
 80048ec:	2280      	movs	r2, #128	; 0x80
 80048ee:	490e      	ldr	r1, [pc, #56]	; (8004928 <xTimerCreateTimerTask+0x5c>)
 80048f0:	480e      	ldr	r0, [pc, #56]	; (800492c <xTimerCreateTimerTask+0x60>)
 80048f2:	f7fd f891 	bl	8001a18 <xTaskCreate>
 80048f6:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <xTimerCreateTimerTask+0x48>
    __asm volatile
 80048fe:	f04f 0310 	mov.w	r3, #16
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	603b      	str	r3, [r7, #0]
}
 8004910:	bf00      	nop
 8004912:	e7fe      	b.n	8004912 <xTimerCreateTimerTask+0x46>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8004914:	687b      	ldr	r3, [r7, #4]
    }
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000678 	.word	0x20000678
 8004924:	2000067c 	.word	0x2000067c
 8004928:	08006170 	.word	0x08006170
 800492c:	08004dbd 	.word	0x08004dbd

08004930 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	; 0x28
 8004934:	af04      	add	r7, sp, #16
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	e9c7 2300 	strd	r2, r3, [r7]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800493c:	2038      	movs	r0, #56	; 0x38
 800493e:	f000 ffbf 	bl	80058c0 <pvPortMalloc>
 8004942:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d010      	beq.n	800496c <xTimerCreate+0x3c>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	9303      	str	r3, [sp, #12]
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	9302      	str	r3, [sp, #8]
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f805 	bl	8004976 <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 800496c:	697b      	ldr	r3, [r7, #20]
        }
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8004976:	b580      	push	{r7, lr}
 8004978:	b086      	sub	sp, #24
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	e9c7 2300 	strd	r2, r3, [r7]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004986:	4313      	orrs	r3, r2
 8004988:	d10a      	bne.n	80049a0 <prvInitialiseNewTimer+0x2a>
    __asm volatile
 800498a:	f04f 0310 	mov.w	r3, #16
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	617b      	str	r3, [r7, #20]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80049a0:	f000 fc44 	bl	800522c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80049aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
        pxNewTimer->pvTimerID = pvTimerID;
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b8:	629a      	str	r2, [r3, #40]	; 0x28
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	3308      	adds	r3, #8
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fb fd1a 	bl	80003fe <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <prvInitialiseNewTimer+0x6c>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049d6:	f043 0304 	orr.w	r3, r3, #4
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80049e2:	bf00      	nop
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b090      	sub	sp, #64	; 0x40
 80049ee:	af02      	add	r7, sp, #8
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xReturn = pdFAIL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <xTimerGenericCommandFromTask+0x2e>
    __asm volatile
 8004a02:	f04f 0310 	mov.w	r3, #16
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	633b      	str	r3, [r7, #48]	; 0x30
}
 8004a14:	bf00      	nop
 8004a16:	e7fe      	b.n	8004a16 <xTimerGenericCommandFromTask+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004a18:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <xTimerGenericCommandFromTask+0xae>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d036      	beq.n	8004a8e <xTimerGenericCommandFromTask+0xa4>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a28:	e9c7 2306 	strd	r2, r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	623b      	str	r3, [r7, #32]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	dd0a      	ble.n	8004a4c <xTimerGenericCommandFromTask+0x62>
    __asm volatile
 8004a36:	f04f 0310 	mov.w	r3, #16
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 8004a48:	bf00      	nop
 8004a4a:	e7fe      	b.n	8004a4a <xTimerGenericCommandFromTask+0x60>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	dc1d      	bgt.n	8004a8e <xTimerGenericCommandFromTask+0xa4>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a52:	f7fe fec5 	bl	80037e0 <xTaskGetSchedulerState>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d10b      	bne.n	8004a74 <xTimerGenericCommandFromTask+0x8a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <xTimerGenericCommandFromTask+0xae>)
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	f107 0110 	add.w	r1, r7, #16
 8004a64:	2300      	movs	r3, #0
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a6c:	f7fb ff37 	bl	80008de <xQueueGenericSend>
 8004a70:	6378      	str	r0, [r7, #52]	; 0x34
 8004a72:	e00c      	b.n	8004a8e <xTimerGenericCommandFromTask+0xa4>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a74:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <xTimerGenericCommandFromTask+0xae>)
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	f107 0110 	add.w	r1, r7, #16
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	f7fb ff29 	bl	80008de <xQueueGenericSend>
 8004a8c:	6378      	str	r0, [r7, #52]	; 0x34
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004a90:	4618      	mov	r0, r3
 8004a92:	3738      	adds	r7, #56	; 0x38
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000678 	.word	0x20000678

08004a9c <xTimerGenericCommandFromISR>:
    BaseType_t xTimerGenericCommandFromISR( TimerHandle_t xTimer,
                                            const BaseType_t xCommandID,
                                            const TickType_t xOptionalValue,
                                            BaseType_t * const pxHigherPriorityTaskWoken,
                                            const TickType_t xTicksToWait )
    {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08e      	sub	sp, #56	; 0x38
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xReturn = pdFAIL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34

        ( void ) xTicksToWait;

        traceENTER_xTimerGenericCommandFromISR( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xTimerGenericCommandFromISR+0x2e>
    __asm volatile
 8004ab4:	f04f 0310 	mov.w	r3, #16
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xTimerGenericCommandFromISR+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004aca:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <xTimerGenericCommandFromISR+0x84>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d021      	beq.n	8004b16 <xTimerGenericCommandFromISR+0x7a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ada:	e9c7 2306 	strd	r2, r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	623b      	str	r3, [r7, #32]

            configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	dc0a      	bgt.n	8004afe <xTimerGenericCommandFromISR+0x62>
    __asm volatile
 8004ae8:	f04f 0310 	mov.w	r3, #16
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <xTimerGenericCommandFromISR+0x60>

            if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b05      	cmp	r3, #5
 8004b02:	dd08      	ble.n	8004b16 <xTimerGenericCommandFromISR+0x7a>
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <xTimerGenericCommandFromISR+0x84>)
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	f107 0110 	add.w	r1, r7, #16
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b10:	f7fb ffe6 	bl	8000ae0 <xQueueGenericSendFromISR>
 8004b14:	6378      	str	r0, [r7, #52]	; 0x34
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromISR( xReturn );

        return xReturn;
 8004b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3738      	adds	r7, #56	; 0x38
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000678 	.word	0x20000678

08004b24 <xTimerGetTimerDaemonTaskHandle>:
/*-----------------------------------------------------------*/

    TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
    {
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
        traceENTER_xTimerGetTimerDaemonTaskHandle();

        /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
         * started, then xTimerTaskHandle will be NULL. */
        configASSERT( ( xTimerTaskHandle != NULL ) );
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <xTimerGetTimerDaemonTaskHandle+0x34>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <xTimerGetTimerDaemonTaskHandle+0x24>
    __asm volatile
 8004b32:	f04f 0310 	mov.w	r3, #16
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	607b      	str	r3, [r7, #4]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xTimerGetTimerDaemonTaskHandle+0x22>

        traceRETURN_xTimerGetTimerDaemonTaskHandle( xTimerTaskHandle );

        return xTimerTaskHandle;
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <xTimerGetTimerDaemonTaskHandle+0x34>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
    }
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	2000067c 	.word	0x2000067c

08004b5c <xTimerGetPeriod>:
/*-----------------------------------------------------------*/

    TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
    {
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60fb      	str	r3, [r7, #12]

        traceENTER_xTimerGetPeriod( xTimer );

        configASSERT( xTimer );
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <xTimerGetPeriod+0x28>
    __asm volatile
 8004b6e:	f04f 0310 	mov.w	r3, #16
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60bb      	str	r3, [r7, #8]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <xTimerGetPeriod+0x26>

        traceRETURN_xTimerGetPeriod( pxTimer->xTimerPeriodInTicks );

        return pxTimer->xTimerPeriodInTicks;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    }
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

    void vTimerSetReloadMode( TimerHandle_t xTimer,
                              const BaseType_t xAutoReload )
    {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
        Timer_t * pxTimer = xTimer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]

        traceENTER_vTimerSetReloadMode( xTimer, xAutoReload );

        configASSERT( xTimer );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <vTimerSetReloadMode+0x2a>
    __asm volatile
 8004bac:	f04f 0310 	mov.w	r3, #16
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60bb      	str	r3, [r7, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <vTimerSetReloadMode+0x28>
        taskENTER_CRITICAL();
 8004bc2:	f000 fd61 	bl	8005688 <vPortEnterCritical>
        {
            if( xAutoReload != pdFALSE )
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <vTimerSetReloadMode+0x48>
            {
                pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8004bde:	e008      	b.n	8004bf2 <vTimerSetReloadMode+0x5a>
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004be6:	f023 0304 	bic.w	r3, r3, #4
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            }
        }
        taskEXIT_CRITICAL();
 8004bf2:	f000 fd79 	bl	80056e8 <vPortExitCritical>

        traceRETURN_vTimerSetReloadMode();
    }
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <xTimerGetReloadMode>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerGetReloadMode( TimerHandle_t xTimer )
    {
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn;

        traceENTER_xTimerGetReloadMode( xTimer );

        configASSERT( xTimer );
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <xTimerGetReloadMode+0x28>
    __asm volatile
 8004c10:	f04f 0310 	mov.w	r3, #16
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xTimerGetReloadMode+0x26>
        portBASE_TYPE_ENTER_CRITICAL();
 8004c26:	f000 fd2f 	bl	8005688 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0U )
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <xTimerGetReloadMode+0x40>
            {
                /* Not an auto-reload timer. */
                xReturn = pdFALSE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e001      	b.n	8004c42 <xTimerGetReloadMode+0x44>
            }
            else
            {
                /* Is an auto-reload timer. */
                xReturn = pdTRUE;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	617b      	str	r3, [r7, #20]
            }
        }
        portBASE_TYPE_EXIT_CRITICAL();
 8004c42:	f000 fd51 	bl	80056e8 <vPortExitCritical>

        traceRETURN_xTimerGetReloadMode( xReturn );

        return xReturn;
 8004c46:	697b      	ldr	r3, [r7, #20]
    }
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <uxTimerGetReloadMode>:

    UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
    {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;

        traceENTER_uxTimerGetReloadMode( xTimer );

        uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ffd0 	bl	8004bfe <xTimerGetReloadMode>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	60fb      	str	r3, [r7, #12]

        traceRETURN_uxTimerGetReloadMode( uxReturn );

        return uxReturn;
 8004c62:	68fb      	ldr	r3, [r7, #12]
    }
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <xTimerGetExpiryTime>:
/*-----------------------------------------------------------*/

    TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
    {
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	61fb      	str	r3, [r7, #28]
        TickType_t xReturn;

        traceENTER_xTimerGetExpiryTime( xTimer );

        configASSERT( xTimer );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <xTimerGetExpiryTime+0x28>
    __asm volatile
 8004c7e:	f04f 0310 	mov.w	r3, #16
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	60fb      	str	r3, [r7, #12]
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <xTimerGetExpiryTime+0x26>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004c9a:	e9c7 2304 	strd	r2, r3, [r7, #16]

        traceRETURN_xTimerGetExpiryTime( xReturn );

        return xReturn;
 8004c9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    }
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	3724      	adds	r7, #36	; 0x24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <pcTimerGetName>:
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

    const char * pcTimerGetName( TimerHandle_t xTimer )
    {
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60fb      	str	r3, [r7, #12]

        traceENTER_pcTimerGetName( xTimer );

        configASSERT( xTimer );
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <pcTimerGetName+0x28>
    __asm volatile
 8004cc2:	f04f 0310 	mov.w	r3, #16
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60bb      	str	r3, [r7, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <pcTimerGetName+0x26>

        traceRETURN_pcTimerGetName( pxTimer->pcTimerName );

        return pxTimer->pcTimerName;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
    }
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cec:	b088      	sub	sp, #32
 8004cee:	af04      	add	r7, sp, #16
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	e9c7 2300 	strd	r2, r3, [r7]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004cf6:	e00d      	b.n	8004d14 <prvReloadTimer+0x2c>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d02:	1884      	adds	r4, r0, r2
 8004d04:	eb41 0503 	adc.w	r5, r1, r3
 8004d08:	e9c7 4500 	strd	r4, r5, [r7]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d1e:	eb10 0802 	adds.w	r8, r0, r2
 8004d22:	eb41 0903 	adc.w	r9, r1, r3
 8004d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d32:	e9cd 2300 	strd	r2, r3, [sp]
 8004d36:	4642      	mov	r2, r8
 8004d38:	464b      	mov	r3, r9
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f904 	bl	8004f48 <prvInsertTimerInActiveList>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1d8      	bne.n	8004cf8 <prvReloadTimer+0x10>
        }
    }
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004d52 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b088      	sub	sp, #32
 8004d56:	af02      	add	r7, sp, #8
 8004d58:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004d5c:	e9c7 2300 	strd	r2, r3, [r7]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <prvProcessExpiredTimer+0x66>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fb fbb9 	bl	80004e6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <prvProcessExpiredTimer+0x44>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d86:	e9cd 2300 	strd	r2, r3, [sp]
 8004d8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d8e:	6978      	ldr	r0, [r7, #20]
 8004d90:	f7ff ffaa 	bl	8004ce8 <prvReloadTimer>
 8004d94:	e008      	b.n	8004da8 <prvProcessExpiredTimer+0x56>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	6978      	ldr	r0, [r7, #20]
 8004dae:	4798      	blx	r3
    }
 8004db0:	bf00      	nop
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000670 	.word	0x20000670

08004dbc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
        {
            /* Allow the application writer to execute some code in the context of
             * this task at the point the task starts executing.  This is useful if the
             * application includes initialisation code that would benefit from
             * executing after the scheduler has been started. */
            vApplicationDaemonTaskStartupHook();
 8004dc4:	f001 f934 	bl	8006030 <vApplicationDaemonTaskStartupHook>

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 f867 	bl	8004ea0 <prvGetNextExpireTime>
 8004dd2:	e9c7 0104 	strd	r0, r1, [r7, #16]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dde:	f000 f803 	bl	8004de8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004de2:	f000 f907 	bl	8004ff4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004de6:	e7ef      	b.n	8004dc8 <prvTimerTask+0xc>

08004de8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dea:	b08b      	sub	sp, #44	; 0x2c
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004df4:	f7fd fd50 	bl	8002898 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004df8:	f107 0314 	add.w	r3, r7, #20
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f87b 	bl	8004ef8 <prvSampleTimeNow>
 8004e02:	e9c7 0106 	strd	r0, r1, [r7, #24]

            if( xTimerListsWereSwitched == pdFALSE )
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d13d      	bne.n	8004e88 <prvProcessTimerOrBlockTask+0xa0>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d110      	bne.n	8004e34 <prvProcessTimerOrBlockTask+0x4c>
 8004e12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e1a:	4290      	cmp	r0, r2
 8004e1c:	eb71 0303 	sbcs.w	r3, r1, r3
 8004e20:	d308      	bcc.n	8004e34 <prvProcessTimerOrBlockTask+0x4c>
                {
                    ( void ) xTaskResumeAll();
 8004e22:	f7fd fd47 	bl	80028b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e2e:	f7ff ff90 	bl	8004d52 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004e32:	e02b      	b.n	8004e8c <prvProcessTimerOrBlockTask+0xa4>
                    if( xListWasEmpty != pdFALSE )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <prvProcessTimerOrBlockTask+0x64>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e3a:	4b16      	ldr	r3, [pc, #88]	; (8004e94 <prvProcessTimerOrBlockTask+0xac>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <prvProcessTimerOrBlockTask+0x60>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <prvProcessTimerOrBlockTask+0x62>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	607b      	str	r3, [r7, #4]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <prvProcessTimerOrBlockTask+0xb0>)
 8004e4e:	681e      	ldr	r6, [r3, #0]
 8004e50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e58:	1a84      	subs	r4, r0, r2
 8004e5a:	eb61 0503 	sbc.w	r5, r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	4622      	mov	r2, r4
 8004e64:	462b      	mov	r3, r5
 8004e66:	4630      	mov	r0, r6
 8004e68:	f7fc fd62 	bl	8001930 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004e6c:	f7fd fd22 	bl	80028b4 <xTaskResumeAll>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <prvProcessTimerOrBlockTask+0xa4>
                        taskYIELD_WITHIN_API();
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <prvProcessTimerOrBlockTask+0xb4>)
 8004e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
    }
 8004e86:	e001      	b.n	8004e8c <prvProcessTimerOrBlockTask+0xa4>
                ( void ) xTaskResumeAll();
 8004e88:	f7fd fd14 	bl	80028b4 <xTaskResumeAll>
    }
 8004e8c:	bf00      	nop
 8004e8e:	3724      	adds	r7, #36	; 0x24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e94:	20000674 	.word	0x20000674
 8004e98:	20000678 	.word	0x20000678
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ea8:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <prvGetNextExpireTime+0x54>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <prvGetNextExpireTime+0x16>
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	e000      	b.n	8004eb8 <prvGetNextExpireTime+0x18>
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <prvGetNextExpireTime+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <prvGetNextExpireTime+0x54>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004ed2:	e005      	b.n	8004ee0 <prvGetNextExpireTime+0x40>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9c7 2302 	strd	r2, r3, [r7, #8]
        }

        return xNextExpireTime;
 8004ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000670 	.word	0x20000670

08004ef8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004f00:	f7fd fdee 	bl	8002ae0 <xTaskGetTickCount>
 8004f04:	e9c7 0102 	strd	r0, r1, [r7, #8]

        if( xTimeNow < xLastTime )
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <prvSampleTimeNow+0x4c>)
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f12:	4290      	cmp	r0, r2
 8004f14:	eb71 0303 	sbcs.w	r3, r1, r3
 8004f18:	d205      	bcs.n	8004f26 <prvSampleTimeNow+0x2e>
        {
            prvSwitchTimerLists();
 8004f1a:	f000 f95d 	bl	80051d8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e002      	b.n	8004f2c <prvSampleTimeNow+0x34>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004f2c:	4905      	ldr	r1, [pc, #20]	; (8004f44 <prvSampleTimeNow+0x4c>)
 8004f2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f32:	e9c1 2300 	strd	r2, r3, [r1]

        return xTimeNow;
 8004f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    }
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000680 	.word	0x20000680

08004f48 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004f48:	b5b0      	push	{r4, r5, r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	e9c7 2300 	strd	r2, r3, [r7]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	619a      	str	r2, [r3, #24]

        if( xNextExpiryTime <= xTimeNow )
 8004f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f70:	4290      	cmp	r0, r2
 8004f72:	eb71 0303 	sbcs.w	r3, r1, r3
 8004f76:	d319      	bcc.n	8004fac <prvInsertTimerInActiveList+0x64>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004f78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f80:	1a84      	subs	r4, r0, r2
 8004f82:	eb61 0503 	sbc.w	r5, r1, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f8c:	4294      	cmp	r4, r2
 8004f8e:	eb75 0303 	sbcs.w	r3, r5, r3
 8004f92:	d302      	bcc.n	8004f9a <prvInsertTimerInActiveList+0x52>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e023      	b.n	8004fe2 <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f9a:	4b14      	ldr	r3, [pc, #80]	; (8004fec <prvInsertTimerInActiveList+0xa4>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f7fb fa5b 	bl	8000460 <vListInsert>
 8004faa:	e01a      	b.n	8004fe2 <prvInsertTimerInActiveList+0x9a>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fb4:	4290      	cmp	r0, r2
 8004fb6:	eb71 0303 	sbcs.w	r3, r1, r3
 8004fba:	d20a      	bcs.n	8004fd2 <prvInsertTimerInActiveList+0x8a>
 8004fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fc0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fc4:	4290      	cmp	r0, r2
 8004fc6:	eb71 0303 	sbcs.w	r3, r1, r3
 8004fca:	d302      	bcc.n	8004fd2 <prvInsertTimerInActiveList+0x8a>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	e007      	b.n	8004fe2 <prvInsertTimerInActiveList+0x9a>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <prvInsertTimerInActiveList+0xa8>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f7fb fa3f 	bl	8000460 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004fe2:	697b      	ldr	r3, [r7, #20]
    }
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bdb0      	pop	{r4, r5, r7, pc}
 8004fec:	20000674 	.word	0x20000674
 8004ff0:	20000670 	.word	0x20000670

08004ff4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff8:	b092      	sub	sp, #72	; 0x48
 8004ffa:	af04      	add	r7, sp, #16
        DaemonTaskMessage_t xMessage = { 0 };
 8004ffc:	f107 0308 	add.w	r3, r7, #8
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	611a      	str	r2, [r3, #16]
 800500c:	615a      	str	r2, [r3, #20]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800500e:	e0cd      	b.n	80051ac <prvProcessReceivedCommands+0x1b8>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f2c0 80c9 	blt.w	80051aa <prvProcessReceivedCommands+0x1b6>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	637b      	str	r3, [r7, #52]	; 0x34

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800501c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	3308      	adds	r3, #8
 8005028:	4618      	mov	r0, r3
 800502a:	f7fb fa5c 	bl	80004e6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800502e:	1d3b      	adds	r3, r7, #4
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff61 	bl	8004ef8 <prvSampleTimeNow>
 8005036:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

                switch( xMessage.xMessageID )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3b01      	subs	r3, #1
 800503e:	2b08      	cmp	r3, #8
 8005040:	f200 80b4 	bhi.w	80051ac <prvProcessReceivedCommands+0x1b8>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <prvProcessReceivedCommands+0x58>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	08005071 	.word	0x08005071
 8005050:	08005071 	.word	0x08005071
 8005054:	08005103 	.word	0x08005103
 8005058:	08005117 	.word	0x08005117
 800505c:	08005181 	.word	0x08005181
 8005060:	08005071 	.word	0x08005071
 8005064:	08005071 	.word	0x08005071
 8005068:	08005103 	.word	0x08005103
 800506c:	08005117 	.word	0x08005117
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	b2da      	uxtb	r2, r3
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005082:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800508c:	1884      	adds	r4, r0, r2
 800508e:	eb41 0503 	adc.w	r5, r1, r3
 8005092:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800509a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800509e:	e9cd 2300 	strd	r2, r3, [sp]
 80050a2:	4622      	mov	r2, r4
 80050a4:	462b      	mov	r3, r5
 80050a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050a8:	f7ff ff4e 	bl	8004f48 <prvInsertTimerInActiveList>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d07c      	beq.n	80051ac <prvProcessReceivedCommands+0x1b8>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80050b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d012      	beq.n	80050e6 <prvProcessReceivedCommands+0xf2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80050c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050ca:	eb10 0802 	adds.w	r8, r0, r2
 80050ce:	eb41 0903 	adc.w	r9, r1, r3
 80050d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050d6:	e9cd 2300 	strd	r2, r3, [sp]
 80050da:	4642      	mov	r2, r8
 80050dc:	464b      	mov	r3, r9
 80050de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050e0:	f7ff fe02 	bl	8004ce8 <prvReloadTimer>
 80050e4:	e008      	b.n	80050f8 <prvProcessReceivedCommands+0x104>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050fe:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005100:	e054      	b.n	80051ac <prvProcessReceivedCommands+0x1b8>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	b2da      	uxtb	r2, r3
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        break;
 8005114:	e04a      	b.n	80051ac <prvProcessReceivedCommands+0x1b8>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	b2da      	uxtb	r2, r3
 8005122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005128:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800512c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800512e:	e9c1 2308 	strd	r2, r3, [r1, #32]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005138:	4313      	orrs	r3, r2
 800513a:	d10a      	bne.n	8005152 <prvProcessReceivedCommands+0x15e>
    __asm volatile
 800513c:	f04f 0310 	mov.w	r3, #16
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800515c:	eb10 0a02 	adds.w	sl, r0, r2
 8005160:	eb41 0b03 	adc.w	fp, r1, r3
 8005164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800516c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005170:	e9cd 2300 	strd	r2, r3, [sp]
 8005174:	4652      	mov	r2, sl
 8005176:	465b      	mov	r3, fp
 8005178:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800517a:	f7ff fee5 	bl	8004f48 <prvInsertTimerInActiveList>
                        break;
 800517e:	e015      	b.n	80051ac <prvProcessReceivedCommands+0x1b8>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d103      	bne.n	8005196 <prvProcessReceivedCommands+0x1a2>
                            {
                                vPortFree( pxTimer );
 800518e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005190:	f000 fc88 	bl	8005aa4 <vPortFree>
 8005194:	e00a      	b.n	80051ac <prvProcessReceivedCommands+0x1b8>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005198:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80051a8:	e000      	b.n	80051ac <prvProcessReceivedCommands+0x1b8>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80051aa:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <prvProcessReceivedCommands+0x1e0>)
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	f107 0108 	add.w	r1, r7, #8
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	f7fb fde6 	bl	8000d8c <xQueueReceive>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f47f af24 	bne.w	8005010 <prvProcessReceivedCommands+0x1c>
        }
    }
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	3738      	adds	r7, #56	; 0x38
 80051ce:	46bd      	mov	sp, r7
 80051d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d4:	20000678 	.word	0x20000678

080051d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051de:	e00e      	b.n	80051fe <prvSwitchTimerLists+0x26>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051e0:	4b10      	ldr	r3, [pc, #64]	; (8005224 <prvSwitchTimerLists+0x4c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	e9c7 2300 	strd	r2, r3, [r7]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80051ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051fa:	f7ff fdaa 	bl	8004d52 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <prvSwitchTimerLists+0x4c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1eb      	bne.n	80051e0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <prvSwitchTimerLists+0x4c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]
        pxCurrentTimerList = pxOverflowTimerList;
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <prvSwitchTimerLists+0x50>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a04      	ldr	r2, [pc, #16]	; (8005224 <prvSwitchTimerLists+0x4c>)
 8005214:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005216:	4a04      	ldr	r2, [pc, #16]	; (8005228 <prvSwitchTimerLists+0x50>)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6013      	str	r3, [r2, #0]
    }
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000670 	.word	0x20000670
 8005228:	20000674 	.word	0x20000674

0800522c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005230:	f000 fa2a 	bl	8005688 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005234:	4b0d      	ldr	r3, [pc, #52]	; (800526c <prvCheckForValidListAndQueue+0x40>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d113      	bne.n	8005264 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 800523c:	480c      	ldr	r0, [pc, #48]	; (8005270 <prvCheckForValidListAndQueue+0x44>)
 800523e:	f7fb f8bb 	bl	80003b8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005242:	480c      	ldr	r0, [pc, #48]	; (8005274 <prvCheckForValidListAndQueue+0x48>)
 8005244:	f7fb f8b8 	bl	80003b8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <prvCheckForValidListAndQueue+0x4c>)
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <prvCheckForValidListAndQueue+0x44>)
 800524c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <prvCheckForValidListAndQueue+0x50>)
 8005250:	4a08      	ldr	r2, [pc, #32]	; (8005274 <prvCheckForValidListAndQueue+0x48>)
 8005252:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8005254:	2200      	movs	r2, #0
 8005256:	2118      	movs	r1, #24
 8005258:	200a      	movs	r0, #10
 800525a:	f7fb f9ff 	bl	800065c <xQueueGenericCreate>
 800525e:	4603      	mov	r3, r0
 8005260:	4a02      	ldr	r2, [pc, #8]	; (800526c <prvCheckForValidListAndQueue+0x40>)
 8005262:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005264:	f000 fa40 	bl	80056e8 <vPortExitCritical>
    }
 8005268:	bf00      	nop
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000678 	.word	0x20000678
 8005270:	20000640 	.word	0x20000640
 8005274:	20000658 	.word	0x20000658
 8005278:	20000670 	.word	0x20000670
 800527c:	20000674 	.word	0x20000674

08005280 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	613b      	str	r3, [r7, #16]

        traceENTER_xTimerIsTimerActive( xTimer );

        configASSERT( xTimer );
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <xTimerIsTimerActive+0x28>
    __asm volatile
 8005292:	f04f 0310 	mov.w	r3, #16
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60fb      	str	r3, [r7, #12]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        portBASE_TYPE_ENTER_CRITICAL();
 80052a8:	f000 f9ee 	bl	8005688 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0U )
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d102      	bne.n	80052c0 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e001      	b.n	80052c4 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
            }
        }
        portBASE_TYPE_EXIT_CRITICAL();
 80052c4:	f000 fa10 	bl	80056e8 <vPortExitCritical>

        traceRETURN_xTimerIsTimerActive( xReturn );

        return xReturn;
 80052c8:	697b      	ldr	r3, [r7, #20]
    }
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b086      	sub	sp, #24
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <pvTimerGetTimerID+0x28>
    __asm volatile
 80052e4:	f04f 0310 	mov.w	r3, #16
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	60fb      	str	r3, [r7, #12]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80052fa:	f000 f9c5 	bl	8005688 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8005304:	f000 f9f0 	bl	80056e8 <vPortExitCritical>

        traceRETURN_pvTimerGetTimerID( pvReturn );

        return pvReturn;
 8005308:	693b      	ldr	r3, [r7, #16]
    }
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = xTimer;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTimerSetTimerID( xTimer, pvNewID );

        configASSERT( xTimer );
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <vTimerSetTimerID+0x2a>
    __asm volatile
 8005326:	f04f 0310 	mov.w	r3, #16
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <vTimerSetTimerID+0x28>

        taskENTER_CRITICAL();
 800533c:	f000 f9a4 	bl	8005688 <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
        }
        taskEXIT_CRITICAL();
 8005346:	f000 f9cf 	bl	80056e8 <vPortExitCritical>

        traceRETURN_vTimerSetTimerID();
    }
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <vTimerResetState>:
 * Reset the state in this file. This state is normally initialized at start up.
 * This function must be called by the application before restarting the
 * scheduler.
 */
    void vTimerResetState( void )
    {
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
        xTimerQueue = NULL;
 8005356:	4b05      	ldr	r3, [pc, #20]	; (800536c <vTimerResetState+0x1a>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
        xTimerTaskHandle = NULL;
 800535c:	4b04      	ldr	r3, [pc, #16]	; (8005370 <vTimerResetState+0x1e>)
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
    }
 8005362:	bf00      	nop
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	20000678 	.word	0x20000678
 8005370:	2000067c 	.word	0x2000067c

08005374 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3b04      	subs	r3, #4
 8005384:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800538c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3b04      	subs	r3, #4
 8005392:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3b04      	subs	r3, #4
 80053a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80053a4:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <pxPortInitialiseStack+0x64>)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3b14      	subs	r3, #20
 80053ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3b04      	subs	r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f06f 0202 	mvn.w	r2, #2
 80053c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3b20      	subs	r3, #32
 80053c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80053ca:	68fb      	ldr	r3, [r7, #12]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	080053dd 	.word	0x080053dd

080053dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <prvTaskExitError+0x54>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ee:	d00a      	beq.n	8005406 <prvTaskExitError+0x2a>
    __asm volatile
 80053f0:	f04f 0310 	mov.w	r3, #16
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60fb      	str	r3, [r7, #12]
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <prvTaskExitError+0x28>
    __asm volatile
 8005406:	f04f 0310 	mov.w	r3, #16
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60bb      	str	r3, [r7, #8]
}
 8005418:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800541a:	bf00      	nop
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0fc      	beq.n	800541c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	2000000c 	.word	0x2000000c

08005434 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <SVC_Handler+0x1c>)
 8005436:	6819      	ldr	r1, [r3, #0]
 8005438:	6808      	ldr	r0, [r1, #0]
 800543a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543e:	f380 8809 	msr	PSP, r0
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f04f 0000 	mov.w	r0, #0
 800544a:	f380 8811 	msr	BASEPRI, r0
 800544e:	4770      	bx	lr
 8005450:	20000030 	.word	0x20000030
        "   msr basepri, r0                 \n"
        "   bx r14                          \n"
        "                                   \n"
        "   .ltorg                          \n"
        );
}
 8005454:	bf00      	nop

08005456 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005456:	4808      	ldr	r0, [pc, #32]	; (8005478 <prvPortStartFirstTask+0x22>)
 8005458:	6800      	ldr	r0, [r0, #0]
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	f380 8808 	msr	MSP, r0
 8005460:	f04f 0000 	mov.w	r0, #0
 8005464:	f380 8814 	msr	CONTROL, r0
 8005468:	b662      	cpsie	i
 800546a:	b661      	cpsie	f
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	df00      	svc	0
 8005476:	bf00      	nop
 8005478:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 800547c:	bf00      	nop

0800547e <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b08c      	sub	sp, #48	; 0x30
 8005482:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005484:	4b65      	ldr	r3, [pc, #404]	; (800561c <xPortStartScheduler+0x19e>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a65      	ldr	r2, [pc, #404]	; (8005620 <xPortStartScheduler+0x1a2>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10a      	bne.n	80054a4 <xPortStartScheduler+0x26>
    __asm volatile
 800548e:	f04f 0310 	mov.w	r3, #16
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054a4:	4b5d      	ldr	r3, [pc, #372]	; (800561c <xPortStartScheduler+0x19e>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a5e      	ldr	r2, [pc, #376]	; (8005624 <xPortStartScheduler+0x1a6>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d10a      	bne.n	80054c4 <xPortStartScheduler+0x46>
    __asm volatile
 80054ae:	f04f 0310 	mov.w	r3, #16
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	623b      	str	r3, [r7, #32]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <xPortStartScheduler+0x44>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80054c4:	4b58      	ldr	r3, [pc, #352]	; (8005628 <xPortStartScheduler+0x1aa>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
         * https://www.freertos.org/Why-FreeRTOS/FAQs.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	332c      	adds	r3, #44	; 0x2c
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a56      	ldr	r2, [pc, #344]	; (800562c <xPortStartScheduler+0x1ae>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00a      	beq.n	80054ec <xPortStartScheduler+0x6e>
    __asm volatile
 80054d6:	f04f 0310 	mov.w	r3, #16
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	61fb      	str	r3, [r7, #28]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <xPortStartScheduler+0x6c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	3338      	adds	r3, #56	; 0x38
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a4f      	ldr	r2, [pc, #316]	; (8005630 <xPortStartScheduler+0x1b2>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00a      	beq.n	800550e <xPortStartScheduler+0x90>
    __asm volatile
 80054f8:	f04f 0310 	mov.w	r3, #16
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61bb      	str	r3, [r7, #24]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xPortStartScheduler+0x8e>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005512:	4b48      	ldr	r3, [pc, #288]	; (8005634 <xPortStartScheduler+0x1b6>)
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	22ff      	movs	r2, #255	; 0xff
 8005522:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	b2da      	uxtb	r2, r3
 8005536:	4b40      	ldr	r3, [pc, #256]	; (8005638 <xPortStartScheduler+0x1ba>)
 8005538:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800553a:	4b3f      	ldr	r3, [pc, #252]	; (8005638 <xPortStartScheduler+0x1ba>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <xPortStartScheduler+0xda>
    __asm volatile
 8005542:	f04f 0310 	mov.w	r3, #16
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	617b      	str	r3, [r7, #20]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <xPortStartScheduler+0xd8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b00      	cmp	r3, #0
 8005564:	d012      	beq.n	800558c <xPortStartScheduler+0x10e>
    __asm volatile
 8005566:	f04f 0310 	mov.w	r3, #16
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	613b      	str	r3, [r7, #16]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xPortStartScheduler+0xfc>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	3301      	adds	r3, #1
 8005580:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005594:	2b80      	cmp	r3, #128	; 0x80
 8005596:	d0f1      	beq.n	800557c <xPortStartScheduler+0xfe>
        }

        if( ulImplementedPrioBits == 8 )
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b08      	cmp	r3, #8
 800559c:	d103      	bne.n	80055a6 <xPortStartScheduler+0x128>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800559e:	4b27      	ldr	r3, [pc, #156]	; (800563c <xPortStartScheduler+0x1be>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e004      	b.n	80055b0 <xPortStartScheduler+0x132>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f1c3 0307 	rsb	r3, r3, #7
 80055ac:	4a23      	ldr	r2, [pc, #140]	; (800563c <xPortStartScheduler+0x1be>)
 80055ae:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <xPortStartScheduler+0x1be>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	021b      	lsls	r3, r3, #8
 80055b6:	4a21      	ldr	r2, [pc, #132]	; (800563c <xPortStartScheduler+0x1be>)
 80055b8:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055ba:	4b20      	ldr	r3, [pc, #128]	; (800563c <xPortStartScheduler+0x1be>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055c2:	4a1e      	ldr	r2, [pc, #120]	; (800563c <xPortStartScheduler+0x1be>)
 80055c4:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80055ce:	4b1c      	ldr	r3, [pc, #112]	; (8005640 <xPortStartScheduler+0x1c2>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <xPortStartScheduler+0x1c2>)
 80055d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d8:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80055da:	4b19      	ldr	r3, [pc, #100]	; (8005640 <xPortStartScheduler+0x1c2>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a18      	ldr	r2, [pc, #96]	; (8005640 <xPortStartScheduler+0x1c2>)
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80055e6:	4b17      	ldr	r3, [pc, #92]	; (8005644 <xPortStartScheduler+0x1c6>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80055ec:	f000 f8fa 	bl	80057e4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80055f0:	4b15      	ldr	r3, [pc, #84]	; (8005648 <xPortStartScheduler+0x1ca>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80055f6:	f000 f919 	bl	800582c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055fa:	4b14      	ldr	r3, [pc, #80]	; (800564c <xPortStartScheduler+0x1ce>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a13      	ldr	r2, [pc, #76]	; (800564c <xPortStartScheduler+0x1ce>)
 8005600:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005604:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005606:	f7ff ff26 	bl	8005456 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800560a:	f7fd fc3d 	bl	8002e88 <vTaskSwitchContext>
    prvTaskExitError();
 800560e:	f7ff fee5 	bl	80053dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3730      	adds	r7, #48	; 0x30
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	e000ed00 	.word	0xe000ed00
 8005620:	410fc271 	.word	0x410fc271
 8005624:	410fc270 	.word	0x410fc270
 8005628:	e000ed08 	.word	0xe000ed08
 800562c:	08005435 	.word	0x08005435
 8005630:	0800573d 	.word	0x0800573d
 8005634:	e000e400 	.word	0xe000e400
 8005638:	20000688 	.word	0x20000688
 800563c:	2000068c 	.word	0x2000068c
 8005640:	e000ed20 	.word	0xe000ed20
 8005644:	e000ed1c 	.word	0xe000ed1c
 8005648:	2000000c 	.word	0x2000000c
 800564c:	e000ef34 	.word	0xe000ef34

08005650 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
    /* Not implemented in ports where there is nothing to return to.
     * Artificially force an assert. */
    configASSERT( uxCriticalNesting == 1000UL );
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <vPortEndScheduler+0x34>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800565e:	d00a      	beq.n	8005676 <vPortEndScheduler+0x26>
    __asm volatile
 8005660:	f04f 0310 	mov.w	r3, #16
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	607b      	str	r3, [r7, #4]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <vPortEndScheduler+0x24>
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	2000000c 	.word	0x2000000c

08005688 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
    __asm volatile
 800568e:	f04f 0310 	mov.w	r3, #16
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
}
 80056a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80056a2:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <vPortEnterCritical+0x58>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	4a0d      	ldr	r2, [pc, #52]	; (80056e0 <vPortEnterCritical+0x58>)
 80056aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80056ac:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <vPortEnterCritical+0x58>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d10f      	bne.n	80056d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <vPortEnterCritical+0x5c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <vPortEnterCritical+0x4c>
    __asm volatile
 80056be:	f04f 0310 	mov.w	r3, #16
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	603b      	str	r3, [r7, #0]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <vPortEnterCritical+0x4a>
    }
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	2000000c 	.word	0x2000000c
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80056ee:	4b12      	ldr	r3, [pc, #72]	; (8005738 <vPortExitCritical+0x50>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <vPortExitCritical+0x24>
    __asm volatile
 80056f6:	f04f 0310 	mov.w	r3, #16
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	607b      	str	r3, [r7, #4]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <vPortExitCritical+0x50>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3b01      	subs	r3, #1
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <vPortExitCritical+0x50>)
 8005714:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <vPortExitCritical+0x50>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d105      	bne.n	800572a <vPortExitCritical+0x42>
 800571e:	2300      	movs	r3, #0
 8005720:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f383 8811 	msr	BASEPRI, r3
}
 8005728:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	2000000c 	.word	0x2000000c

0800573c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800573c:	f3ef 8009 	mrs	r0, PSP
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <PendSV_Handler+0x5c>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	f01e 0f10 	tst.w	lr, #16
 800574c:	bf08      	it	eq
 800574e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005752:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005756:	6010      	str	r0, [r2, #0]
 8005758:	e92d 0009 	stmdb	sp!, {r0, r3}
 800575c:	f04f 0010 	mov.w	r0, #16
 8005760:	f380 8811 	msr	BASEPRI, r0
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f7fd fb8c 	bl	8002e88 <vTaskSwitchContext>
 8005770:	f04f 0000 	mov.w	r0, #0
 8005774:	f380 8811 	msr	BASEPRI, r0
 8005778:	bc09      	pop	{r0, r3}
 800577a:	6819      	ldr	r1, [r3, #0]
 800577c:	6808      	ldr	r0, [r1, #0]
 800577e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005782:	f01e 0f10 	tst.w	lr, #16
 8005786:	bf08      	it	eq
 8005788:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800578c:	f380 8809 	msr	PSP, r0
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	4770      	bx	lr
 8005796:	0000      	.short	0x0000
 8005798:	20000030 	.word	0x20000030
        "   bx r14                              \n"
        "                                       \n"
        "   .ltorg                              \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800579c:	bf00      	nop

0800579e <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
    __asm volatile
 80057a4:	f04f 0310 	mov.w	r3, #16
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	607b      	str	r3, [r7, #4]
}
 80057b6:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80057b8:	f7fd fa32 	bl	8002c20 <xTaskIncrementTick>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057c2:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <xPortSysTickHandler+0x42>)
 80057c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	2300      	movs	r3, #0
 80057cc:	603b      	str	r3, [r7, #0]
    __asm volatile
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f383 8811 	msr	BASEPRI, r3
}
 80057d4:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057e8:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <vPortSetupTimerInterrupt+0x34>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <vPortSetupTimerInterrupt+0x38>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <vPortSetupTimerInterrupt+0x3c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a0a      	ldr	r2, [pc, #40]	; (8005824 <vPortSetupTimerInterrupt+0x40>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	0a5b      	lsrs	r3, r3, #9
 8005800:	4a09      	ldr	r2, [pc, #36]	; (8005828 <vPortSetupTimerInterrupt+0x44>)
 8005802:	3b01      	subs	r3, #1
 8005804:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005806:	4b04      	ldr	r3, [pc, #16]	; (8005818 <vPortSetupTimerInterrupt+0x34>)
 8005808:	2207      	movs	r2, #7
 800580a:	601a      	str	r2, [r3, #0]
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	e000e010 	.word	0xe000e010
 800581c:	e000e018 	.word	0xe000e018
 8005820:	20000000 	.word	0x20000000
 8005824:	10624dd3 	.word	0x10624dd3
 8005828:	e000e014 	.word	0xe000e014

0800582c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800582c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800583c <vPortEnableVFP+0x10>
 8005830:	6801      	ldr	r1, [r0, #0]
 8005832:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005836:	6001      	str	r1, [r0, #0]
 8005838:	4770      	bx	lr
 800583a:	0000      	.short	0x0000
 800583c:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005840:	bf00      	nop

08005842 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005848:	f3ef 8305 	mrs	r3, IPSR
 800584c:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b0f      	cmp	r3, #15
 8005852:	d914      	bls.n	800587e <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005854:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <vPortValidateInterruptPriority+0x6e>)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.freertos.org/Why-FreeRTOS/FAQs */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800585e:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <vPortValidateInterruptPriority+0x72>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	7afa      	ldrb	r2, [r7, #11]
 8005864:	429a      	cmp	r2, r3
 8005866:	d20a      	bcs.n	800587e <vPortValidateInterruptPriority+0x3c>
    __asm volatile
 8005868:	f04f 0310 	mov.w	r3, #16
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	607b      	str	r3, [r7, #4]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800587e:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <vPortValidateInterruptPriority+0x76>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005886:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <vPortValidateInterruptPriority+0x7a>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d90a      	bls.n	80058a4 <vPortValidateInterruptPriority+0x62>
    __asm volatile
 800588e:	f04f 0310 	mov.w	r3, #16
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	603b      	str	r3, [r7, #0]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <vPortValidateInterruptPriority+0x60>
    }
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	e000e3f0 	.word	0xe000e3f0
 80058b4:	20000688 	.word	0x20000688
 80058b8:	e000ed0c 	.word	0xe000ed0c
 80058bc:	2000068c 	.word	0x2000068c

080058c0 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08c      	sub	sp, #48	; 0x30
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	623b      	str	r3, [r7, #32]

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 80058d0:	4b6f      	ldr	r3, [pc, #444]	; (8005a90 <pvPortMalloc+0x1d0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <pvPortMalloc+0x2e>
    __asm volatile
 80058d8:	f04f 0310 	mov.w	r3, #16
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	617b      	str	r3, [r7, #20]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <pvPortMalloc+0x2c>

    if( xWantedSize > 0 )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d022      	beq.n	800593a <pvPortMalloc+0x7a>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80058f4:	2308      	movs	r3, #8
 80058f6:	43db      	mvns	r3, r3
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d81b      	bhi.n	8005936 <pvPortMalloc+0x76>
        {
            xWantedSize += xHeapStructSize;
 80058fe:	2208      	movs	r2, #8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	2b00      	cmp	r3, #0
 800590e:	d014      	beq.n	800593a <pvPortMalloc+0x7a>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	f1c3 0308 	rsb	r3, r3, #8
 800591a:	61fb      	str	r3, [r7, #28]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	43db      	mvns	r3, r3
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	d804      	bhi.n	8005930 <pvPortMalloc+0x70>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4413      	add	r3, r2
 800592c:	607b      	str	r3, [r7, #4]
 800592e:	e004      	b.n	800593a <pvPortMalloc+0x7a>
                }
                else
                {
                    xWantedSize = 0;
 8005930:	2300      	movs	r3, #0
 8005932:	607b      	str	r3, [r7, #4]
 8005934:	e001      	b.n	800593a <pvPortMalloc+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800593a:	f7fc ffad 	bl	8002898 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f2c0 8089 	blt.w	8005a58 <pvPortMalloc+0x198>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8085 	beq.w	8005a58 <pvPortMalloc+0x198>
 800594e:	4b51      	ldr	r3, [pc, #324]	; (8005a94 <pvPortMalloc+0x1d4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d87f      	bhi.n	8005a58 <pvPortMalloc+0x198>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005958:	4b4f      	ldr	r3, [pc, #316]	; (8005a98 <pvPortMalloc+0x1d8>)
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800595c:	4b4e      	ldr	r3, [pc, #312]	; (8005a98 <pvPortMalloc+0x1d8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005962:	e004      	b.n	800596e <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	d903      	bls.n	8005980 <pvPortMalloc+0xc0>
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f1      	bne.n	8005964 <pvPortMalloc+0xa4>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005980:	4b43      	ldr	r3, [pc, #268]	; (8005a90 <pvPortMalloc+0x1d0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005986:	429a      	cmp	r2, r3
 8005988:	d066      	beq.n	8005a58 <pvPortMalloc+0x198>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2208      	movs	r2, #8
 8005990:	4413      	add	r3, r2
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d90a      	bls.n	80059bc <pvPortMalloc+0xfc>
    __asm volatile
 80059a6:	f04f 0310 	mov.w	r3, #16
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	613b      	str	r3, [r7, #16]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <pvPortMalloc+0xfa>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	1ad2      	subs	r2, r2, r3
 80059c4:	2308      	movs	r3, #8
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d923      	bls.n	8005a14 <pvPortMalloc+0x154>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <pvPortMalloc+0x134>
    __asm volatile
 80059de:	f04f 0310 	mov.w	r3, #16
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	60fb      	str	r3, [r7, #12]
}
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <pvPortMalloc+0x132>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1ad2      	subs	r2, r2, r3
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a14:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <pvPortMalloc+0x1d4>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <pvPortMalloc+0x1d4>)
 8005a20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <pvPortMalloc+0x1d4>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <pvPortMalloc+0x1dc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d203      	bcs.n	8005a36 <pvPortMalloc+0x176>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a2e:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <pvPortMalloc+0x1d4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1a      	ldr	r2, [pc, #104]	; (8005a9c <pvPortMalloc+0x1dc>)
 8005a34:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	623b      	str	r3, [r7, #32]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005a4e:	4b14      	ldr	r3, [pc, #80]	; (8005aa0 <pvPortMalloc+0x1e0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <pvPortMalloc+0x1e0>)
 8005a56:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8005a58:	f7fc ff2c 	bl	80028b4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <pvPortMalloc+0x1a6>
        {
            vApplicationMallocFailedHook();
 8005a62:	f000 fb01 	bl	8006068 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <pvPortMalloc+0x1c6>
    __asm volatile
 8005a70:	f04f 0310 	mov.w	r3, #16
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	60bb      	str	r3, [r7, #8]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <pvPortMalloc+0x1c4>
    return pvReturn;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3730      	adds	r7, #48	; 0x30
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000698 	.word	0x20000698
 8005a94:	2000069c 	.word	0x2000069c
 8005a98:	20000690 	.word	0x20000690
 8005a9c:	200006a0 	.word	0x200006a0
 8005aa0:	200006a4 	.word	0x200006a4

08005aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d059      	beq.n	8005b6a <vPortFree+0xc6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	425b      	negs	r3, r3
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	613b      	str	r3, [r7, #16]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	db0a      	blt.n	8005ae2 <vPortFree+0x3e>
    __asm volatile
 8005acc:	f04f 0310 	mov.w	r3, #16
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	60fb      	str	r3, [r7, #12]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <vPortFree+0x5c>
    __asm volatile
 8005aea:	f04f 0310 	mov.w	r3, #16
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	60bb      	str	r3, [r7, #8]
}
 8005afc:	bf00      	nop
 8005afe:	e7fe      	b.n	8005afe <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	0fdb      	lsrs	r3, r3, #31
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d02c      	beq.n	8005b6a <vPortFree+0xc6>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d128      	bne.n	8005b6a <vPortFree+0xc6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	605a      	str	r2, [r3, #4]
                #if ( configHEAP_CLEAR_MEMORY_ON_FREE == 1 )
                {
                    /* Check for underflow as this can occur if xBlockSize is
                     * overwritten in a heap block. */
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d30a      	bcc.n	8005b44 <vPortFree+0xa0>
                    {
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 8005b2e:	2208      	movs	r2, #8
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1898      	adds	r0, r3, r2
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2208      	movs	r2, #8
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2100      	movs	r1, #0
 8005b40:	f000 faf2 	bl	8006128 <memset>
                    }
                }
                #endif

                vTaskSuspendAll();
 8005b44:	f7fc fea8 	bl	8002898 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <vPortFree+0xd0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4413      	add	r3, r2
 8005b52:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <vPortFree+0xd0>)
 8005b54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b56:	6938      	ldr	r0, [r7, #16]
 8005b58:	f000 f868 	bl	8005c2c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <vPortFree+0xd4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3301      	adds	r3, #1
 8005b62:	4a05      	ldr	r2, [pc, #20]	; (8005b78 <vPortFree+0xd4>)
 8005b64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005b66:	f7fc fea5 	bl	80028b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005b6a:	bf00      	nop
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	2000069c 	.word	0x2000069c
 8005b78:	200006a8 	.word	0x200006a8

08005b7c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <xPortGetFreeHeapSize+0x14>)
 8005b82:	681b      	ldr	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	2000069c 	.word	0x2000069c

08005b94 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8005b98:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	200006a0 	.word	0x200006a0

08005bac <xPortResetHeapMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

void xPortResetHeapMinimumEverFreeHeapSize( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
    xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <xPortResetHeapMinimumEverFreeHeapSize+0x18>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a04      	ldr	r2, [pc, #16]	; (8005bc8 <xPortResetHeapMinimumEverFreeHeapSize+0x1c>)
 8005bb6:	6013      	str	r3, [r2, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	2000069c 	.word	0x2000069c
 8005bc8:	200006a0 	.word	0x200006a0

08005bcc <pvPortCalloc>:
/*-----------------------------------------------------------*/

void * pvPortCalloc( size_t xNum,
                     size_t xSize )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
    void * pv = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]

    if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d009      	beq.n	8005bf4 <pvPortCalloc+0x28>
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d901      	bls.n	8005bf4 <pvPortCalloc+0x28>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <pvPortCalloc+0x2a>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d113      	bne.n	8005c22 <pvPortCalloc+0x56>
    {
        pv = pvPortMalloc( xNum * xSize );
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fe5c 	bl	80058c0 <pvPortMalloc>
 8005c08:	60f8      	str	r0, [r7, #12]

        if( pv != NULL )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <pvPortCalloc+0x56>
        {
            ( void ) memset( pv, 0, xNum * xSize );
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	fb02 f303 	mul.w	r3, r2, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fa83 	bl	8006128 <memset>
        }
    }

    return pv;
 8005c22:	68fb      	ldr	r3, [r7, #12]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005c34:	4b28      	ldr	r3, [pc, #160]	; (8005cd8 <prvInsertBlockIntoFreeList+0xac>)
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e002      	b.n	8005c40 <prvInsertBlockIntoFreeList+0x14>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d8f7      	bhi.n	8005c3a <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	4413      	add	r3, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d108      	bne.n	8005c6e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	441a      	add	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d118      	bne.n	8005cb4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <prvInsertBlockIntoFreeList+0xb0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d00d      	beq.n	8005caa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	441a      	add	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e008      	b.n	8005cbc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005caa:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <prvInsertBlockIntoFreeList+0xb0>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	e003      	b.n	8005cbc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d002      	beq.n	8005cca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000690 	.word	0x20000690
 8005cdc:	20000698 	.word	0x20000698

08005ce0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b08f      	sub	sp, #60	; 0x3c
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	623b      	str	r3, [r7, #32]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	633b      	str	r3, [r7, #48]	; 0x30
    BaseType_t xDefinedRegions = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8005cf4:	4b58      	ldr	r3, [pc, #352]	; (8005e58 <vPortDefineHeapRegions+0x178>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <vPortDefineHeapRegions+0x32>
    __asm volatile
 8005cfc:	f04f 0310 	mov.w	r3, #16
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	617b      	str	r3, [r7, #20]
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <vPortDefineHeapRegions+0x30>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24

    while( pxHeapRegion->xSizeInBytes > 0 )
 8005d1c:	e07d      	b.n	8005e1a <vPortDefineHeapRegions+0x13a>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00e      	beq.n	8005d52 <vPortDefineHeapRegions+0x72>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	3307      	adds	r3, #7
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	f023 0307 	bic.w	r3, r3, #7
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4e:	4413      	add	r3, r2
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
        }

        xAlignedHeap = xAddress;
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	61fb      	str	r3, [r7, #28]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <vPortDefineHeapRegions+0x8a>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4a3f      	ldr	r2, [pc, #252]	; (8005e5c <vPortDefineHeapRegions+0x17c>)
 8005d60:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 8005d62:	4b3e      	ldr	r3, [pc, #248]	; (8005e5c <vPortDefineHeapRegions+0x17c>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	605a      	str	r2, [r3, #4]
 8005d68:	e01f      	b.n	8005daa <vPortDefineHeapRegions+0xca>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8005d6a:	4b3b      	ldr	r3, [pc, #236]	; (8005e58 <vPortDefineHeapRegions+0x178>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <vPortDefineHeapRegions+0xa8>
    __asm volatile
 8005d72:	f04f 0310 	mov.w	r3, #16
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	613b      	str	r3, [r7, #16]
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <vPortDefineHeapRegions+0xa6>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8005d88:	4b33      	ldr	r3, [pc, #204]	; (8005e58 <vPortDefineHeapRegions+0x178>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d80a      	bhi.n	8005daa <vPortDefineHeapRegions+0xca>
    __asm volatile
 8005d94:	f04f 0310 	mov.w	r3, #16
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60fb      	str	r3, [r7, #12]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <vPortDefineHeapRegions+0xc8>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 8005daa:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <vPortDefineHeapRegions+0x178>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	61bb      	str	r3, [r7, #24]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	4413      	add	r3, r2
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005db8:	2208      	movs	r2, #8
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	f023 0307 	bic.w	r3, r3, #7
 8005dc6:	62bb      	str	r3, [r7, #40]	; 0x28
        pxEnd = ( BlockLink_t * ) xAddress;
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	4a23      	ldr	r2, [pc, #140]	; (8005e58 <vPortDefineHeapRegions+0x178>)
 8005dcc:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 8005dce:	4b22      	ldr	r3, [pc, #136]	; (8005e58 <vPortDefineHeapRegions+0x178>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8005dd6:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <vPortDefineHeapRegions+0x178>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	623b      	str	r3, [r7, #32]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005dec:	4b1a      	ldr	r3, [pc, #104]	; (8005e58 <vPortDefineHeapRegions+0x178>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <vPortDefineHeapRegions+0x120>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e06:	4413      	add	r3, r2
 8005e08:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4413      	add	r3, r2
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
    while( pxHeapRegion->xSizeInBytes > 0 )
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f47f af7d 	bne.w	8005d1e <vPortDefineHeapRegions+0x3e>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8005e24:	4a0e      	ldr	r2, [pc, #56]	; (8005e60 <vPortDefineHeapRegions+0x180>)
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8005e2a:	4a0e      	ldr	r2, [pc, #56]	; (8005e64 <vPortDefineHeapRegions+0x184>)
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <vPortDefineHeapRegions+0x16c>
    __asm volatile
 8005e36:	f04f 0310 	mov.w	r3, #16
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <vPortDefineHeapRegions+0x16a>
}
 8005e4c:	bf00      	nop
 8005e4e:	373c      	adds	r7, #60	; 0x3c
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000698 	.word	0x20000698
 8005e5c:	20000690 	.word	0x20000690
 8005e60:	200006a0 	.word	0x200006a0
 8005e64:	2000069c 	.word	0x2000069c

08005e68 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t * pxHeapStats )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e7c:	60bb      	str	r3, [r7, #8]

    vTaskSuspendAll();
 8005e7e:	f7fc fd0b 	bl	8002898 <vTaskSuspendAll>
    {
        pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <vPortGetHeapStats+0xac>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	617b      	str	r3, [r7, #20]

        /* pxBlock will be NULL if the heap has not been initialised.  The heap
         * is initialised automatically when the first allocation is made. */
        if( pxBlock != NULL )
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01f      	beq.n	8005ece <vPortGetHeapStats+0x66>
        {
            while( pxBlock != pxEnd )
 8005e8e:	e019      	b.n	8005ec4 <vPortGetHeapStats+0x5c>
            {
                /* Increment the number of blocks and record the largest block seen
                 * so far. */
                xBlocks++;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3301      	adds	r3, #1
 8005e94:	613b      	str	r3, [r7, #16]

                if( pxBlock->xBlockSize > xMaxSize )
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d202      	bcs.n	8005ea6 <vPortGetHeapStats+0x3e>
                {
                    xMaxSize = pxBlock->xBlockSize;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
                }

                /* Heap five will have a zero sized block at the end of each
                 * each region - the block is only used to link to the next
                 * heap region so it not a real block. */
                if( pxBlock->xBlockSize != 0 )
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d007      	beq.n	8005ebe <vPortGetHeapStats+0x56>
                {
                    if( pxBlock->xBlockSize < xMinSize )
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d902      	bls.n	8005ebe <vPortGetHeapStats+0x56>
                    {
                        xMinSize = pxBlock->xBlockSize;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	60bb      	str	r3, [r7, #8]
                    }
                }

                /* Move to the next block in the chain until the last block is
                 * reached. */
                pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
            while( pxBlock != pxEnd )
 8005ec4:	4b14      	ldr	r3, [pc, #80]	; (8005f18 <vPortGetHeapStats+0xb0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d1e0      	bne.n	8005e90 <vPortGetHeapStats+0x28>
            }
        }
    }
    ( void ) xTaskResumeAll();
 8005ece:	f7fc fcf1 	bl	80028b4 <xTaskResumeAll>

    pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	605a      	str	r2, [r3, #4]
    pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	609a      	str	r2, [r3, #8]
    pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	60da      	str	r2, [r3, #12]

    taskENTER_CRITICAL();
 8005ee4:	f7ff fbd0 	bl	8005688 <vPortEnterCritical>
    {
        pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <vPortGetHeapStats+0xb4>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	601a      	str	r2, [r3, #0]
        pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <vPortGetHeapStats+0xb8>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	615a      	str	r2, [r3, #20]
        pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <vPortGetHeapStats+0xbc>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	619a      	str	r2, [r3, #24]
        pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <vPortGetHeapStats+0xc0>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	611a      	str	r2, [r3, #16]
    }
    taskEXIT_CRITICAL();
 8005f08:	f7ff fbee 	bl	80056e8 <vPortExitCritical>
}
 8005f0c:	bf00      	nop
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000690 	.word	0x20000690
 8005f18:	20000698 	.word	0x20000698
 8005f1c:	2000069c 	.word	0x2000069c
 8005f20:	200006a4 	.word	0x200006a4
 8005f24:	200006a8 	.word	0x200006a8
 8005f28:	200006a0 	.word	0x200006a0

08005f2c <vPortHeapResetState>:
 * Reset the state in this file. This state is normally initialized at start up.
 * This function must be called by the application before restarting the
 * scheduler.
 */
void vPortHeapResetState( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
    pxEnd = NULL;
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <vPortHeapResetState+0x2c>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

    xFreeBytesRemaining = ( size_t ) 0U;
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <vPortHeapResetState+0x30>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
    xMinimumEverFreeBytesRemaining = ( size_t ) 0U;
 8005f3c:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <vPortHeapResetState+0x34>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
    xNumberOfSuccessfulAllocations = ( size_t ) 0U;
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <vPortHeapResetState+0x38>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
    xNumberOfSuccessfulFrees = ( size_t ) 0U;
 8005f48:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <vPortHeapResetState+0x3c>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]

    #if ( configENABLE_HEAP_PROTECTOR == 1 )
        pucHeapHighAddress = NULL;
        pucHeapLowAddress = NULL;
    #endif /* #if ( configENABLE_HEAP_PROTECTOR == 1 ) */
}
 8005f4e:	bf00      	nop
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	20000698 	.word	0x20000698
 8005f5c:	2000069c 	.word	0x2000069c
 8005f60:	200006a0 	.word	0x200006a0
 8005f64:	200006a4 	.word	0x200006a4
 8005f68:	200006a8 	.word	0x200006a8

08005f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	6039      	str	r1, [r7, #0]
 8005f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	db0a      	blt.n	8005f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	490c      	ldr	r1, [pc, #48]	; (8005fb8 <__NVIC_SetPriority+0x4c>)
 8005f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8a:	0112      	lsls	r2, r2, #4
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	440b      	add	r3, r1
 8005f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f94:	e00a      	b.n	8005fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	4908      	ldr	r1, [pc, #32]	; (8005fbc <__NVIC_SetPriority+0x50>)
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	3b04      	subs	r3, #4
 8005fa4:	0112      	lsls	r2, r2, #4
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	440b      	add	r3, r1
 8005faa:	761a      	strb	r2, [r3, #24]
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	e000e100 	.word	0xe000e100
 8005fbc:	e000ed00 	.word	0xe000ed00

08005fc0 <systick_cb>:

type_irq_desc * local_desc;


void systick_cb(void * des)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <task_1>:

static void exampleTask( void * parameters ) __attribute__( ( noreturn ) );


void task_1(void * arg)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
    int * ptr = arg;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60fb      	str	r3, [r7, #12]

    while(1)
 8005fe0:	e7fe      	b.n	8005fe0 <task_1+0xc>

08005fe2 <main>:

type_thread_struct thread_1;


int main(void)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af02      	add	r7, sp, #8
    /*
     Initialize services 
     */
    proc_mm_init(NULL);
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f000 f829 	bl	8006040 <proc_mm_init>
    /* initilize interrupts */
    

   

    int id = theread_create(&task_1, &thread_1, 128, 1, "hello", &thread_1);
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <main+0x3e>)
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <main+0x42>)
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	2280      	movs	r2, #128	; 0x80
 8005ffa:	4909      	ldr	r1, [pc, #36]	; (8006020 <main+0x3e>)
 8005ffc:	480a      	ldr	r0, [pc, #40]	; (8006028 <main+0x46>)
 8005ffe:	f7fa f9b3 	bl	8000368 <theread_create>
 8006002:	6078      	str	r0, [r7, #4]

#if (__ARM_ARCH_7A__ == 0U)
	/* Service Call interrupt might be configured before kernel start     */
	/* and when its priority is lower or equal to BASEPRI, svc intruction */
	/* causes a Hard Fault.                                               */
	NVIC_SetPriority (SVCall_IRQn, 0U);
 8006004:	2100      	movs	r1, #0
 8006006:	f06f 0004 	mvn.w	r0, #4
 800600a:	f7ff ffaf 	bl	8005f6c <__NVIC_SetPriority>
#endif


    vTaskStartScheduler();
 800600e:	f7fc fbc7 	bl	80027a0 <vTaskStartScheduler>

    while(1)
    {
        a++;   
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <main+0x4a>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3301      	adds	r3, #1
 8006018:	4a04      	ldr	r2, [pc, #16]	; (800602c <main+0x4a>)
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e7f9      	b.n	8006012 <main+0x30>
 800601e:	bf00      	nop
 8006020:	200006b0 	.word	0x200006b0
 8006024:	08006178 	.word	0x08006178
 8006028:	08005fd5 	.word	0x08005fd5
 800602c:	20000010 	.word	0x20000010

08006030 <vApplicationDaemonTaskStartupHook>:
    return 0;
}


void vApplicationDaemonTaskStartupHook( void )
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0

 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop

08006040 <proc_mm_init>:




void proc_mm_init(void * arg)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
    /* Heap memeory initialize */
    /* Pass the array into vPortDefineHeapRegions(). */  
    vPortDefineHeapRegions( xHeapRegions );
 8006048:	4803      	ldr	r0, [pc, #12]	; (8006058 <proc_mm_init+0x18>)
 800604a:	f7ff fe49 	bl	8005ce0 <vPortDefineHeapRegions>
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	08006180 	.word	0x08006180

0800605c <vApplicationStackOverflowHook>:




void vApplicationStackOverflowHook( TaskHandle_t xTask, char * pcTaskName )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
    for( ; ; )
 8006066:	e7fe      	b.n	8006066 <vApplicationStackOverflowHook+0xa>

08006068 <vApplicationMallocFailedHook>:
    {
    }
}

void vApplicationMallocFailedHook( void )
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0

    while(1)
 800606c:	e7fe      	b.n	800606c <vApplicationMallocFailedHook+0x4>
 800606e:	bf00      	nop

08006070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006074:	f7fa f88e 	bl	8000194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006078:	480c      	ldr	r0, [pc, #48]	; (80060ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800607a:	490d      	ldr	r1, [pc, #52]	; (80060b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800607c:	4a0d      	ldr	r2, [pc, #52]	; (80060b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800607e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006080:	e002      	b.n	8006088 <LoopCopyDataInit>

08006082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006086:	3304      	adds	r3, #4

08006088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800608a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800608c:	d3f9      	bcc.n	8006082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800608e:	4a0a      	ldr	r2, [pc, #40]	; (80060b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006090:	4c0a      	ldr	r4, [pc, #40]	; (80060bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8006092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006094:	e001      	b.n	800609a <LoopFillZerobss>

08006096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006098:	3204      	adds	r2, #4

0800609a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800609a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800609c:	d3fb      	bcc.n	8006096 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800609e:	f000 f811 	bl	80060c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060a2:	f7ff ff9e 	bl	8005fe2 <main>
  bx  lr    
 80060a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80060a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80060ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060b0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80060b4:	08006190 	.word	0x08006190
  ldr r2, =_sbss
 80060b8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80060bc:	200006cc 	.word	0x200006cc

080060c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80060c0:	e7fe      	b.n	80060c0 <ADC_IRQHandler>
	...

080060c4 <__libc_init_array>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4d0d      	ldr	r5, [pc, #52]	; (80060fc <__libc_init_array+0x38>)
 80060c8:	4c0d      	ldr	r4, [pc, #52]	; (8006100 <__libc_init_array+0x3c>)
 80060ca:	1b64      	subs	r4, r4, r5
 80060cc:	10a4      	asrs	r4, r4, #2
 80060ce:	2600      	movs	r6, #0
 80060d0:	42a6      	cmp	r6, r4
 80060d2:	d109      	bne.n	80060e8 <__libc_init_array+0x24>
 80060d4:	4d0b      	ldr	r5, [pc, #44]	; (8006104 <__libc_init_array+0x40>)
 80060d6:	4c0c      	ldr	r4, [pc, #48]	; (8006108 <__libc_init_array+0x44>)
 80060d8:	f000 f82e 	bl	8006138 <_init>
 80060dc:	1b64      	subs	r4, r4, r5
 80060de:	10a4      	asrs	r4, r4, #2
 80060e0:	2600      	movs	r6, #0
 80060e2:	42a6      	cmp	r6, r4
 80060e4:	d105      	bne.n	80060f2 <__libc_init_array+0x2e>
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ec:	4798      	blx	r3
 80060ee:	3601      	adds	r6, #1
 80060f0:	e7ee      	b.n	80060d0 <__libc_init_array+0xc>
 80060f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f6:	4798      	blx	r3
 80060f8:	3601      	adds	r6, #1
 80060fa:	e7f2      	b.n	80060e2 <__libc_init_array+0x1e>
	...

0800610c <memcpy>:
 800610c:	440a      	add	r2, r1
 800610e:	4291      	cmp	r1, r2
 8006110:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006114:	d100      	bne.n	8006118 <memcpy+0xc>
 8006116:	4770      	bx	lr
 8006118:	b510      	push	{r4, lr}
 800611a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800611e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006122:	4291      	cmp	r1, r2
 8006124:	d1f9      	bne.n	800611a <memcpy+0xe>
 8006126:	bd10      	pop	{r4, pc}

08006128 <memset>:
 8006128:	4402      	add	r2, r0
 800612a:	4603      	mov	r3, r0
 800612c:	4293      	cmp	r3, r2
 800612e:	d100      	bne.n	8006132 <memset+0xa>
 8006130:	4770      	bx	lr
 8006132:	f803 1b01 	strb.w	r1, [r3], #1
 8006136:	e7f9      	b.n	800612c <memset+0x4>

08006138 <_init>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	bf00      	nop
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr

08006144 <_fini>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr
